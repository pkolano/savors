=for license_for_this_file_only
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<http://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<http://www.gnu.org/philosophy/why-not-lgpl.html>.
=cut

1;

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Graph/Easy.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY';
  package Graph::Easy;use 5.008002;use Graph::Easy::Base;use Graph::Easy::Attributes;use Graph::Easy::Edge;use Graph::Easy::Group;use Graph::Easy::Group::Anon;use Graph::Easy::Layout;use Graph::Easy::Node;use Graph::Easy::Node::Anon;use Graph::Easy::Node::Empty;use Scalar::Util qw/weaken/;$VERSION='0.76';@ISA=qw/Graph::Easy::Base/;use strict;use warnings;my$att_aliases;use Graph::Easy::Util qw(ord_values);BEGIN {*get_attribute=\&attribute;*as_html_page=\&as_html_file;*as_graphviz_file=\&as_graphviz;*as_ascii_file=\&as_ascii;*as_boxart_file=\&as_boxart;*as_txt_file=\&as_txt;*as_vcg_file=\&as_vcg;*as_gdl_file=\&as_gdl;*as_graphml_file=\&as_graphml;*_aligned_label=\&Graph::Easy::Node::_aligned_label;*quoted_comment=\&Graph::Easy::Node::quoted_comment;*_un_escape=\&Graph::Easy::Node::_un_escape;*_convert_pod=\&Graph::Easy::Node::_convert_pod;*_label_as_html=\&Graph::Easy::Node::_label_as_html;*_wrapped_label=\&Graph::Easy::Node::_wrapped_label;*get_color_attribute=\&color_attribute;*get_custom_attributes=\&Graph::Easy::Node::get_custom_attributes;*custom_attributes=\&Graph::Easy::Node::get_custom_attributes;$att_aliases=Graph::Easy::_att_aliases();*is_simple_graph=\&is_simple;*vertices=\&nodes}sub new {my$class=shift;if (@_==1 &&!ref($_[0])){require Graph::Easy::Parser;my$parser=Graph::Easy::Parser->new();my$self=eval {$parser->from_text($_[0])};if (!defined$self){$self=Graph::Easy->new(fatal_errors=>0);$self->error('Error: ' .$parser->error()|| 'Unknown error while parsing initial text');$self->catch_errors(0)}return$self}my$self=bless {},$class;my$args=$_[0];$args={@_ }if ref($args)ne 'HASH';$self->_init($args)}sub DESTROY {my$self=shift;delete$self->{chains};for my$n (ord_values ($self->{nodes})){if (ref($n)){delete$n->{edges};delete$n->{group}}}for my$e (ord_values ($self->{edges})){if (ref($e)){delete$e->{cells};delete$e->{to};delete$e->{from}}}for my$g (ord_values ($self->{groups})){if (ref($g)){delete$g->{nodes};delete$g->{edges}}}}my$html_att={node=>{borderstyle=>'solid',borderwidth=>'1px',bordercolor=>'#000000',align=>'center',padding=>'0.2em','padding-left'=>'0.3em','padding-right'=>'0.3em',margin=>'0.1em',fill=>'white',},'node.anon'=>{'borderstyle'=>'none','background'=>' inherit',},graph=>{margin=>'0.5em',padding=>'0.5em','empty-cells'=>'show',},edge=>{border=>'none',padding=>'0.2em',margin=>'0.1em','font'=>'monospaced, courier-new, courier, sans-serif','vertical-align'=>'bottom',},group=>{'borderstyle'=>'dashed','borderwidth'=>'1','fontsize'=>'0.8em',fill=>'#a0d0ff',padding=>'0.2em',align=>'left',},'group.anon'=>{'borderstyle'=>'none',background=>'white',},};sub _init {my ($self,$args)=@_;$self->{debug}=0;$self->{timeout}=5;$self->{strict}=1;$self->{class}='graph';$self->{id}='';$self->{groups}={};$self->{nodes}={};$self->{edges}={};$self->{output_format}='html';$self->{_astar_bias}=0.001;$self->{use_class}={edge=>'Graph::Easy::Edge',group=>'Graph::Easy::Group',node=>'Graph::Easy::Node',};$self->{_warn_on_unknown_attributes}=0;$self->{fatal_errors}=1;$self->{att}={};for my$k (sort keys %$args){if ($k !~ /^(timeout|debug|strict|fatal_errors|undirected)\z/){$self->error ("Unknown option '$k'")}if ($k eq 'undirected' && $args->{$k}){$self->set_attribute('type','undirected');next}$self->{$k}=$args->{$k}}binmode(STDERR,'utf8')or die ("Cannot do binmode(STDERR,'utf8'")if$self->{debug};$self->{score}=undef;$self->randomize();$self}sub timeout {my$self=shift;$self->{timeout}=$_[0]if @_;$self->{timeout}}sub debug {my$self=shift;$self->{debug}=$_[0]if @_;$self->{debug}}sub strict {my$self=shift;$self->{strict}=$_[0]if @_;$self->{strict}}sub type {my$self=shift;$self->{att}->{type}|| 'directed'}sub is_simple {my$self=shift;my%count;for my$e (ord_values ($self->{edges})){my$id="$e->{to}->{id},$e->{from}->{id}";return 0 if exists$count{$id};$count{$id}=undef}1}sub is_directed {my$self=shift;$self->attribute('type')eq 'directed' ? 1 : 0}sub is_undirected {my$self=shift;$self->attribute('type')eq 'undirected' ? 1 : 0}sub id {my$self=shift;$self->{id}=shift if defined $_[0];$self->{id}}sub score {my$self=shift;$self->{score}}sub randomize {my$self=shift;srand();$self->{seed}=rand(2 ** 31);$self->{seed}}sub root_node {my$self=shift;my$root=$self->{att}->{root};$root=$self->{nodes}->{$root}if defined$root;$root}sub source_nodes {my$self=shift;my@roots;for my$node (ord_values ($self->{nodes})){push@roots,$node if (keys %{$node->{edges}}!=0)&&!$node->has_predecessors()}@roots}sub predecessorless_nodes {my$self=shift;my@roots;for my$node (ord_values ($self->{nodes})){push@roots,$node if (keys %{$node->{edges}}==0)||!$node->has_predecessors()}@roots}sub label {my$self=shift;my$label=$self->{att}->{graph}->{label};$label='' unless defined$label;$label=$self->_un_escape($label)if!$_[0]&& $label =~ /\\[EGHNT]/;$label}sub link {my$self=shift;my$link=$self->attribute('link');my$autolink='';$autolink=$self->attribute('autolink')if$link eq '';if ($link eq '' && $autolink ne ''){$link=$self->{name}if$autolink eq 'name';$link=$self->{att}->{label}if$autolink eq 'label' && defined$self->{att}->{label};$link=$self->{name}if$autolink eq 'label' &&!defined$self->{att}->{label}}$link='' unless defined$link;if ($link ne '' && $link !~ /^([\w]{3,4}:\/\/|\/)/){$link=$self->attribute('linkbase').$link}$link=$self->_un_escape($link)if!$_[0]&& $link =~ /\\[EGHNT]/;$link}sub parent {undef}sub seed {my$self=shift;$self->{seed}=$_[0]if @_ > 0;$self->{seed}}sub nodes {my ($self)=@_;my$n=$self->{nodes};return scalar keys %$n unless wantarray;return ord_values ($n)}sub anon_nodes {my ($self)=@_;my$n=$self->{nodes};if (!wantarray){my$count=0;for my$node (ord_values ($n)){$count++ if$node->is_anon()}return$count}my@anon=();for my$node (ord_values ($n)){push@anon,$node if$node->is_anon()}@anon}sub edges {my ($self)=@_;my$e=$self->{edges};return scalar keys %$e unless wantarray;ord_values ($e)}sub edges_within {my ($self)=@_;my$e=$self->{edges};return scalar keys %$e unless wantarray;ord_values ($e)}sub sorted_nodes {my ($self,$f1,$f2)=@_;return scalar keys %{$self->{nodes}}unless wantarray;$f1='id' unless defined$f1;$f2='name' if!defined$f2 && $f1 !~ /^(name|id)$/;my$sort;$sort=sub {$a->{$f1}<=> $b->{$f1}}if$f1;$sort=sub {abs($a->{$f1})<=> abs($b->{$f1})}if$f1 && $f1 eq 'rank';$sort=sub {$a->{$f1}cmp $b->{$f1}}if$f1 && $f1 =~ /^(name|title|label)$/;$sort=sub {$a->{$f1}<=> $b->{$f1}|| $a->{$f2}<=> $b->{$f2}}if$f2;$sort=sub {abs($a->{$f1})<=> abs($b->{$f1})|| $a->{$f2}<=> $b->{$f2}}if$f2 && $f1 eq 'rank';$sort=sub {$a->{$f1}<=> $b->{$f1}|| abs($a->{$f2})<=> abs($b->{$f2})}if$f2 && $f2 eq 'rank';$sort=sub {$a->{$f1}<=> $b->{$f1}|| $a->{$f2}cmp $b->{$f2}}if$f2 && $f2 =~ /^(name|title|label)$/;$sort=sub {abs($a->{$f1})<=> abs($b->{$f1})|| $a->{$f2}cmp $b->{$f2}}if $f1 && $f1 eq 'rank' && $f2 && $f2 =~ /^(name|title|label)$/;$sort=sub {$a->{$f1}cmp $b->{$f1}|| $a->{$f2}<=> $b->{$f2}}if$f2 && $f2 eq 'id' && $f1 ne 'rank';return sort$sort values %{$self->{nodes}}}sub add_edge_once {my ($self,$x,$y,$edge)=@_;return undef if ref($edge);my$x1=$self->{nodes}->{$x}unless ref$x;my$y1=$self->{nodes}->{$y}unless ref$y;if (ref($x1)&& ref($y1)){my@ids=$x1->edges_to($y1);return undef if@ids}$self->add_edge($x,$y,$edge)}sub edge {my ($self,$x,$y)=@_;$x=$self->{nodes}->{$x}unless ref$x;$y=$self->{nodes}->{$y}unless ref$y;return undef unless ref($x)&& ref($y);my@ids=$x->edges_to($y);wantarray ? @ids : $ids[0]}sub flip_edges {my ($self,$x,$y)=@_;$x=$self->{nodes}->{$x}unless ref$x;$y=$self->{nodes}->{$y}unless ref$y;return$self unless ref($x)&& ref($y)&& ($x!=$y);for my$e (ord_values ($x->{edges})){$e->flip()if$e->{from}==$x && $e->{to}==$y}$self}sub node {my ($self,$name)=@_;$name='' unless defined$name;$self->{nodes}->{$name}}sub rename_node {my ($self,$node,$new_name)=@_;$node=$self->{nodes}->{$node}unless ref($node);if (!ref($node)){$node=$self->add_node($new_name)}else {if (!ref($node->{graph})){$node->{name}=$new_name;$self->add_node($node)}else {if ($node->{graph}!=$self){$node->{graph}->del_node($node);$node->{name}=$new_name;$self->add_node($node)}else {delete$self->{nodes}->{$node->{name}};$node->{name}=$new_name;$self->{nodes}->{$node->{name}}=$node}}}if ($node->is_anon()){bless$node,$self->{use_class}->{node}|| 'Graph::Easy::Node';delete$node->{att}->{label}if$node->{att}->{label}eq ' ';$node->{class}='group'}$node}sub rename_group {my ($self,$group,$new_name)=@_;if (!ref($group)){$group=$self->add_group($new_name)}else {if (!ref($group->{graph})){$group->{name}=$new_name;$self->add_group($group)}else {if ($group->{graph}!=$self){$group->{graph}->del_group($group);$group->{name}=$new_name;$self->add_group($group)}else {delete$self->{groups}->{$group->{name}};$group->{name}=$new_name;$self->{groups}->{$group->{name}}=$group}}}if ($group->is_anon()){bless$group,$self->{use_class}->{group}|| 'Graph::Easy::Group';delete$group->{att}->{label}if$group->{att}->{label}eq '';$group->{class}='group'}$group}sub _check_class {my ($self,$selector)=@_;my@parts=split /\s*,\s*/,$selector;my@classes=();for my$class (@parts){return unless$class =~ /^(\.\w|node|group|edge|graph\z)/;return if$class =~ /\.\z/;$class =~ /^(\w*)/;my$base_class=$1;if ($base_class eq ''){push@classes,('edge'.$class,'group'.$class,'node'.$class)}else {push@classes,$class}}@classes}sub set_attribute {my ($self,$class_selector,$name,$val)=@_;if (@_==3){$val=$name;$name=$class_selector;$class_selector='graph'}$name=$att_aliases->{$name}if exists$att_aliases->{$name};$name='undef' unless defined$name;$val='undef' unless defined$val;my@classes=$self->_check_class($class_selector);return$self->error ("Illegal class '$class_selector' when trying to set attribute '$name' to '$val'")if@classes==0;for my$class (@classes){$val=$self->unquote_attribute($class,$name,$val);if ($self->{strict}){my ($rc,$newname,$v)=$self->validate_attribute($name,$val,$class);return if defined$rc;$val=$v}$self->{score}=undef;delete$self->{cache};if ($class eq 'graph'){if ($name =~ /^g?id\z/){$self->{id}=$val}if ($name eq 'output'){$self->{output_format}=$val}}my$att=$self->{att};$att->{$class}={}unless ref$att->{$class};if ($name eq 'border'){my$c=$att->{$class};($c->{borderstyle},$c->{borderwidth},$c->{bordercolor})=$self->split_border_attributes($val);return$val}$att->{$class}->{$name}=$val}$val}sub set_attributes {my ($self,$class_selector,$att)=@_;if (defined$class_selector &&!defined$att){$att=$class_selector;$class_selector='graph'}my@classes=$self->_check_class($class_selector);return$self->error ("Illegal class '$class_selector' when trying to set attributes")if@classes==0;for my$a (sort keys %$att){for my$class (@classes){$self->set_attribute($class,$a,$att->{$a})}}$self}sub del_attribute {my ($self,$class_selector,$name)=@_;if (@_==2){$name=$class_selector;$class_selector='graph'}$name=$att_aliases->{$name}if exists$att_aliases->{$name};my@classes=$self->_check_class($class_selector);return$self->error ("Illegal class '$class_selector' when trying to delete attribute '$name'")if@classes==0;for my$class (@classes){my$a=$self->{att}->{$class};delete$a->{$name};if ($name eq 'size'){delete$a->{rows};delete$a->{columns}}if ($name eq 'border'){delete$a->{borderstyle};delete$a->{borderwidth};delete$a->{bordercolor}}}$self}my$p_flow={'east'=>90,'west'=>270,'north'=>0,'south'=>180,'up'=>0,'down'=>180,'back'=>270,'left'=>270,'right'=>90,'front'=>90,'forward'=>90,};sub flow {my ($self)=@_;my$flow=$self->{att}->{graph}->{flow};return 90 unless defined$flow;my$f=$p_flow->{$flow};$f=$flow unless defined$f;$f}sub output_format {my$self=shift;$self->{output_format}=shift if $_[0];$self->{output_format}}sub output {my$self=shift;no strict 'refs';my$method='as_' .$self->{output_format};$self->_croak("Cannot find a method to generate '$self->{output_format}'")unless$self->can($method);$self->$method()}sub _class_styles {my ($self,$skip,$map,$base,$indent,$overlay)=@_;my$a=$self->{att};$indent='' unless defined$indent;my$indent2=$indent x 2;$indent2='  ' if$indent2 eq '';my$class_list={edge=>{},node=>{},group=>{}};if (defined$overlay){$a={};for my$class (sort keys %{$self->{att}}){my$ac=$self->{att}->{$class};$a->{$class}={};my$acc=$a->{$class};for my$k (sort keys %$ac){$acc->{$k}=$ac->{$k}}}for my$class (sort keys %$overlay){my$oc=$overlay->{$class};$a->{$class}={}unless ref$a->{$class};my$acc=$a->{$class};for my$k (sort keys %$oc){$acc->{$k}=$oc->{$k}unless exists$acc->{$k}}$class_list->{$class}={}}}my$id=$self->{id};my@primaries=sort keys %$class_list;for my$primary (@primaries){my$cl=$class_list->{$primary};for my$class (sort keys %$a){if ($class =~ /^$primary\.(.*)/){$cl->{$1}=undef}}}$base="table.graph$id " unless defined$base;my$groups=$self->groups();my$css='';for my$class (sort keys %$a){next if (not %{$a->{$class}});my$c=$class;$c =~ s/\./_/g;next if$class eq 'group' and $groups==0;my$css_txt='';my$cls='';if ($class eq 'graph' && $base eq ''){$css_txt .= "${indent}.$class \{\n"}elsif ($class eq 'graph'){$css_txt .= "$indent$base\{\n"}else {if ($c !~ /\./){$cls=join (",$base.${c}_",sort keys %{$class_list->{$c}});$cls=",$base.${c}_$cls" if$cls ne ''}$css_txt .= "$indent$base.$c$cls {\n"}my$done=0;for my$att (sort keys %{$a->{$class}}){next if$att =~ $skip || $att eq 'border';next if$class eq 'graph' && $base ne '' && $att =~ /^(color|font|fontsize|align|fill)\z/;$done++;my$val=$a->{$class}->{$att};next if!defined$val;$val='none' if$att eq 'borderstyle' && $class eq 'group';$val .= 'px' if$att eq 'borderwidth' && $val !~ /(px|em|%)\z/;my$entry=$self->_attribute_entry($class,$att);if (defined$entry){my$type=$entry->[ATTR_TYPE_SLOT ]|| ATTR_STRING;if ($type==ATTR_COLOR){$val=$self->get_color_attribute($class,$att)|| $val}}if (exists$map->{$att}){$att=$map->{$att}unless ref$map->{$att};($att,$val)=&{$map->{$att}}($self,$att,$val,$class)if ref$map->{$att}}if ($class ne 'graph' && $att && $val && $val eq 'inherit'){my$base_class=$class;$base_class='graph' unless$base_class =~ /\./;$base_class =~ s/\..*//;$val=$a->{$base_class}->{$att};if ($base_class ne 'graph' && (!defined$val || $val eq 'inherit')){$val=$a->{graph}->{$att};$att=undef if!defined$val}}$css_txt .= "$indent2$att: $val;\n" if defined$att && defined$val}$css_txt .= "$indent}\n";$css .= $css_txt if$done > 0}$css}sub _skip {my ($self)=shift;qr/^(basename|columns|colorscheme|comment|class|flow|format|group|rows|root|size|offset|origin|linkbase|(auto)?(label|link|title)|auto(join|split)|(node|edge)class|shape|arrowstyle|label(color|pos)|point(style|shape)|textstyle|style)\z/}sub _remap_text_wrap {my ($self,$name,$style)=@_;return (undef,undef)if$style ne 'auto';('white-space','normal')}sub _remap_fill {my ($self,$name,$color,$class)=@_;return ('background',$color)unless$class =~ /edge/;(undef,undef)}sub css {my$self=shift;my$a=$self->{att};my$id=$self->{id};my$css=$self->_class_styles($self->_skip(),{fill=>\&_remap_fill,textwrap=>\&_remap_text_wrap,align=>'text-align',font=>'font-family',fontsize=>'font-size',bordercolor=>'border-color',borderstyle=>'border-style',borderwidth=>'border-width',},undef,undef,$html_att,);my@groups=$self->groups();$css .= <<CSS if@groups > 0;$css .= <<CSS ;$css .= <<CSS if keys %{$self->{edges}}> 0;my$rounded=0;for my$n (ord_values ($self->{nodes})){$rounded ++ and last if$n->shape()=~ /circle|ellipse|rounded/}$css .= <<CSS if$rounded > 0;if (@groups > 0){for my$group (@groups){my$class=$group->class();my$border=$group->attribute('borderstyle');$class =~ s/.*\.//;$css .= Graph::Easy::Group::Cell->_css($self->{id},$class,$border)}}$css =~ s/##id##/$id/g;$css}sub html_page_header {my ($self,$css)=@_;my$html=<<HTML ;$html =~ s/\n\z//;$html =~ s/##charset##/utf-8/g;my$t=$self->title();$html =~ s/##title##/$t/g;$css=$self->css()unless defined$css;$html =~ s/##CSS##/\n <style type="text\/css">\n <!--\n $css -->\n <\/style>/ if$css ne '';$html =~ s/##CSS##//;$html}sub title {my$self=shift;my$title=$self->{att}->{graph}->{title};$title=$self->{att}->{graph}->{label}if!defined$title;$title='Untitled graph' if!defined$title;$title=$self->_un_escape($title,1)if!$_[0]&& $title =~ /\\[EGHNTL]/;$title}sub html_page_footer {my$self=shift;"\n</body></html>\n"}sub as_html_file {my$self=shift;$self->html_page_header().$self->as_html().$self->html_page_footer()}sub _caption {my$self=shift;my ($caption,$switch_to_center)=$self->_label_as_html();return ('','')unless defined$caption && $caption ne '';my$bg=$self->raw_color_attribute('fill');my$style=' style="';$style .= "background: $bg;" if$bg;my$f=$self->raw_attribute('font')|| '';$style .= "font-family: $f;" if$f ne '';my$c=$self->raw_color_attribute('color');$style .= "color: $c;" if$c;$style .= $self->text_styles_as_css();$style =~ s/;\z//;$style .= '"' unless$style eq ' style="';$style =~ s/style="\s/style="/;my$link=$self->link();if ($link ne ''){$link =~ s/\s/\+/g;$link =~ s/'/%27/g;$caption="<a href='$link'>$caption</a>"}$caption="<tr>\n  <td colspan=##cols##$style>$caption</td>\n</tr>\n";my$pos=$self->attribute('labelpos');($caption,$pos)}sub as_html {my ($self)=shift;$self->layout()unless defined$self->{score};my$top="\n" .$self->quoted_comment();my$cells=$self->{cells};my ($rows,$cols);my$max_x=undef;my$min_x=undef;for my$k (sort keys %$cells){my ($x,$y)=split/,/,$k;my$node=$cells->{$k};$max_x=$x if!defined$max_x || $x > $max_x;$min_x=$x if!defined$min_x || $x < $min_x;$rows->{$y}->{$x}=$node;$cols->{$x}=undef}$max_x=1,$min_x=1 unless defined$max_x;my$max_cells=$max_x - $min_x + 1;my$groups=scalar$self->groups();my$id=$self->{id};$top .= "\n<table class=\"graph$id\" cellpadding=0 cellspacing=0";$top .= ">\n";my$html='';my ($caption,$pos)=$self->_caption();my$row_id=0;for my$y (sort {($a||0)<=> ($b||0)}keys %$rows){my$rs=[[],[],[],[]];for my$x (sort {$a <=> $b}keys %$cols){if (!exists$rows->{$y}->{$x}){push @{$rs->[0]},undef;next}my$node=$rows->{$y}->{$x};next if$node->isa('Graph::Easy::Node::Cell');my$h=$node->as_html();if (ref($h)eq 'ARRAY'){local $_;my$i=0;push @{$rs->[$i++]},$_ for @$h}else {push @{$rs->[0]},$h}}for my$row (@$rs){pop @$row while (@$row > 0 &&!defined$row->[-1]);local $_;for (@$row){$_=" <td colspan=4 rowspan=4></td>\n" unless defined $_}}for my$row (@$rs){next;my$i=0;while ($i < @$row){next if$row->[$i]=~ /border(:|-left)/;next if$row->[$i]=~ /(row|col)span.*\1span/m;my$j=$i + 1;$j++ while ($j < @$row && $row->[$j]eq $row->[$i]);if ($j > $i + 1){my$cnt=$j - $i - 1;splice (@$row,$i + 1,$cnt);$row->[$i]=~ s/<td/<td colspan=0/ unless$row->[$i]=~ /colspan/;$row->[$i]=~ s/colspan=(\d+)/'colspan='.($1+$cnt*4)/e}}continue {$i++}}my$i=0;for my$row (@$rs){my$r=join('',@$row);if ($r !~ s/^[\s\n]*\z//){$r="\n" .$r}$html .= "<!-- row $row_id line $i -->\n" .'<tr>' .$r ."</tr>\n\n";$i++}$row_id++}$max_cells *= 4;$caption =~ s/##cols##/$max_cells/ if defined$caption;$html .= $caption if$pos eq 'bottom';$top .= $caption if$pos eq 'top';$html=$top .$html;$html =~ s#(<tr></tr>\n\n)+\z##;$html .= "</table>\n";$html}sub as_boxart {my ($self)=shift;require Graph::Easy::As_ascii;$self->{_ascii_style}=1;$self->_as_ascii(@_)}sub as_boxart_html {my ($self)=shift;"<pre style='line-height: 1em; line-spacing: 0;'>\n" .$self->as_boxart(@_)."\n</pre>\n"}sub as_boxart_html_file {my$self=shift;$self->layout()unless defined$self->{score};$self->html_page_header(' ')."\n" .$self->as_boxart_html().$self->html_page_footer()}sub as_ascii {my$self=shift;$self->{_ascii_style}=0;$self->_as_ascii(@_)}sub _as_ascii {my$self=shift;require Graph::Easy::As_ascii;require Graph::Easy::Layout::Grid;my$opt=ref($_[0])eq 'HASH' ? $_[0]: {@_};$self->{_links}=$opt->{links};$self->layout()unless defined$self->{score};my ($rows,$cols,$max_x,$max_y)=$self->_prepare_layout('ascii');my$cells=$self->{cells};my$y_start=0;my$x_start=0;my$align=$self->attribute('align');my ($label,$aligns)=$self->_aligned_label($align);my$label_pos='top';if (@$label > 0){unshift @$label,'';push @$label,'';unshift @$aligns,'c';push @$aligns,'c';$label_pos=$self->attribute('graph','label-pos')|| 'top';$y_start += scalar @$label if$label_pos eq 'top';$max_y += scalar @$label + 1;print STDERR "# Graph with label, position $label_pos\n" if$self->{debug};my$old_max_x=$max_x;for my$l (@$label){$max_x=length($l)+2 if (length($l)> $max_x+2)}$x_start=int(($max_x - $old_max_x)/ 2)}print STDERR "# Allocating framebuffer $max_x x $max_y\n" if$self->{debug};my$fb=Graph::Easy::Node->_framebuffer($max_x,$max_y);if (@$label > 0){my$y=0;$y=$max_y - scalar @$label if$label_pos eq 'bottom';Graph::Easy::Node->_printfb_aligned($fb,0,$y,$max_x,$max_y,$label,$aligns,'top')}for my$v (ord_values ($cells)){next if$v->isa('Graph::Easy::Node::Cell');my$x=$cols->{$v->{x}}+ $x_start;my$y=$rows->{$v->{y}}+ $y_start;my@lines=split /\n/,$v->as_ascii($x,$y);for my$i (0 .. scalar@lines-1){next if length($lines[$i])==0;$fb->[$y+$i]=' ' x $max_x if!defined$fb->[$y+$i];substr($fb->[$y+$i],$x,length($lines[$i]))=$lines[$i]}}for my$y (0..$max_y){$fb->[$y]='' unless defined$fb->[$y];$fb->[$y]=~ s/\s+\z//}my$out=join("\n",@$fb)."\n";$out =~ s/\n+\z/\n/;for my$v (ord_values$cells){$v->{h}=$v->{minh};$v->{w}=$v->{minw}}$out}sub as_ascii_html {my ($self)=shift;"<pre>\n" .$self->_as_ascii(@_)."\n</pre>\n"}sub as_txt {require Graph::Easy::As_txt;_as_txt(@_)}sub as_graphviz {require Graph::Easy::As_graphviz;_as_graphviz(@_)}sub as_debug {require Graph::Easy::As_txt;eval {require Graph::Easy::As_svg};my$self=shift;my$output='';$output .= '# Using Graph::Easy v' .$Graph::Easy::VERSION ."\n";if ($Graph::Easy::As_svg::VERSION){$output .= '# Using Graph::Easy::As_svg v' .$Graph::Easy::As_svg::VERSION ."\n"}$output .= '# Running Perl v' .$] ." under $^O\n";$output ."\n# Input normalized as_txt:\n\n" .$self->_as_txt(@_)}sub as_vcg {require Graph::Easy::As_vcg;_as_vcg(@_)}sub as_gdl {require Graph::Easy::As_vcg;_as_vcg(@_,{gdl=>1 })}sub as_svg {require Graph::Easy::As_svg;require Graph::Easy::Layout::Grid;_as_svg(@_)}sub as_svg_file {require Graph::Easy::As_svg;require Graph::Easy::Layout::Grid;_as_svg($_[0],{standalone=>1 })}sub svg_information {my ($self)=@_;require Graph::Easy::As_svg;require Graph::Easy::Layout::Grid;_as_svg(@_)unless$self->{svg_info};$self->{svg_info}}sub as_graphml {require Graph::Easy::As_graphml;_as_graphml(@_)}sub add_edge {my ($self,$x,$y,$edge)=@_;my$uc=$self->{use_class};my$ec=$uc->{edge};$edge=$ec->new()unless defined$edge;$edge=$ec->new(label=>$edge)unless ref($edge);$self->_croak("Adding an edge object twice is not possible")if (exists ($self->{edges}->{$edge->{id}}));$self->_croak("Cannot add edge $edge ($edge->{id}), it already belongs to another graph")if ref($edge->{graph})&& $edge->{graph}!=$self;my$nodes=$self->{nodes};my$groups=$self->{groups};$self->_croak("Cannot add edge for undefined node names ($x -> $y)")unless defined$x && defined$y;my$xn=$x;my$yn=$y;$xn=$x->{name}if ref($x);$yn=$y->{name}if ref($y);$x=$nodes->{$xn}if exists$nodes->{$xn};$y=$nodes->{$yn}if exists$nodes->{$yn};$x=$uc->{node}->new($x)unless ref$x;$y=$x if!ref($y)&& $y eq $xn;$y=$uc->{node}->new($y)unless ref$y;print STDERR "# add_edge '$x->{name}' ($x->{id}) -> '$y->{name}' ($y->{id}) (edge $edge->{id}) ($x -> $y)\n" if$self->{debug};for my$n ($x,$y){$self->_croak("Cannot add node $n ($n->{name}), it already belongs to another graph")if ref($n->{graph})&& $n->{graph}!=$self}weaken($x->{graph}=$self)unless ref($x->{graph});weaken($y->{graph}=$self)unless ref($y->{graph});weaken($edge->{graph}=$self)unless ref($edge->{graph});$edge->{from}=$x;$edge->{to}=$y;$x->{edges}->{$edge->{id}}=$edge;$y->{edges}->{$edge->{id}}=$edge;my$store=$nodes;$store=$groups if$x->isa('Graph::Easy::Group');$store->{$x->{name}}=$x;$store=$nodes;$store=$groups if$y->isa('Graph::Easy::Group');$store->{$y->{name}}=$y;$self->{edges}->{$edge->{id}}=$edge;$self->{score}=undef;wantarray ? ($x,$y,$edge): $edge}sub add_anon_node {my ($self)=shift;$self->warn('add_anon_node does not take argumens')if @_ > 0;my$node=Graph::Easy::Node::Anon->new();$self->add_node($node);$node}sub add_node {my ($self,$x)=@_;my$n=$x;if (ref($x)){$n=$x->{name};$n='0' unless defined$n}return$self->_croak("Cannot add node with empty name to graph.")if$n eq '';return$self->_croak("Cannot add node $x ($n), it already belongs to another graph")if ref($x)&& ref($x->{graph})&& $x->{graph}!=$self;my$no=$self->{nodes};return$no->{$n}if exists$no->{$n};my$uc=$self->{use_class};$x=$uc->{node}->new($x)unless ref$x;$no->{$n}=$x;weaken($x->{graph}=$self)unless ref($x->{graph});$self->{score}=undef;$x}sub add_nodes {my$self=shift;my@rc;for my$x (@_){my$n=$x;if (ref($x)){$n=$x->{name};$n='0' unless defined$n}return$self->_croak("Cannot add node with empty name to graph.")if$n eq '';return$self->_croak("Cannot add node $x ($n), it already belongs to another graph")if ref($x)&& ref($x->{graph})&& $x->{graph}!=$self;my$no=$self->{nodes};next if exists$no->{$n};my$uc=$self->{use_class};my$xx=$x;$xx=$uc->{node}->new($x)unless ref$x;$no->{$n}=$xx;weaken($xx->{graph}=$self)unless ref($xx->{graph});push@rc,$xx}$self->{score}=undef;@rc}sub copy {my$self=shift;my$new=Graph::Easy->new();for my$k (sort keys %$self){$new->{$k}=$self->{$k}unless ref($self->{$k})}for my$g (sort keys %{$self->{groups}}){my$ng=$new->add_group($g);$ng->{att}=$self->_clone($self->{groups}->{$g}->{att})}for my$n (ord_values ($self->{nodes})){my$nn=$new->add_node($n->{name});$nn->{att}=$self->_clone($n->{att});$nn->add_to_group($n->{group}->{name})if$n->{group}}for my$e (ord_values ($self->{edges})){my$ne=$new->add_edge($e->{from}->{name},$e->{to}->{name});$ne->{att}=$self->_clone($e->{att})}$new->{att}=$self->_clone($self->{att});$new}sub _clone {my ($self,$in)=@_;my$out={};for my$k (sort keys %$in){if (ref($k)eq 'HASH'){$out->{$k}=$self->_clone($in->{$k})}elsif (ref($k)){$self->error("Can't clone $k")}else {$out->{$k}=$in->{$k}}}$out}sub merge_nodes {my ($self,$A,$B,$joiner)=@_;$A=$self->node($A)unless ref($A);$B=$self->node($B)unless ref($B);$B->{group}->del_node($B)if ref($B->{group});my@edges=ord_values ($A->{edges});for my$edge (@edges){next unless$edge->{to}==$B;$self->del_edge($edge)}for my$edge (ord_values ($B->{edges})){next if$edge->{to}==$A || ($edge->{to}==$B && $edge->{from}==$B);$edge->{from}=$A if$edge->{from}==$B;$edge->{to}=$A if$edge->{to}==$B;delete$B->{edges}->{$edge->{id}};$A->{edges}->{$edge->{id}}=$edge}$A->set_attribute('label',$A->label().$joiner .$B->label())if defined$joiner;$self->del_node($B);$self}sub del_node {my ($self,$node)=@_;$node=$self->{nodes}->{$node}unless ref($node);return unless ref($node);$node->{group}->del_node($node)if ref$node->{group};delete$self->{nodes}->{$node->{name}};for my$edge (ord_values ($node->{edges})){delete$self->{edges}->{$edge->{id}};my$to=$edge->{to};my$from=$edge->{from};delete$from->{edges}->{$edge->{id}}if$from!=$node;delete$to->{edges}->{$edge->{id}}if$to!=$node}$node->{graph}=undef;$node->{w}=undef;$node->{edges}={};delete$node->{origin}->{children}->{$node->{id}}if defined$node->{origin};$self->{score}=undef;$self}sub del_edge {my ($self,$edge)=@_;$self->_croak("del_edge() needs an object")unless ref$edge;$edge->{group}->_del_edge($edge)if ref$edge->{group};my$to=$edge->{to};my$from=$edge->{from};delete$from->{edges}->{$edge->{id}};delete$to->{edges}->{$edge->{id}};delete$self->{edges}->{$edge->{id}};$edge->{from}=undef;$edge->{to}=undef;$self}sub add_group {my ($self,$group)=@_;my$uc=$self->{use_class};my$name=$group;$group=$self->{groups}->{$group }unless ref$group;$group=$uc->{group}->new(name=>$name)unless ref$group;$self->{groups}->{$group->{name}}=$group;$group->{graph}=$self;{no warnings;weaken($group->{graph})}$self->{score}=undef;$group}sub del_group {my ($self,$group)=@_;delete$self->{groups}->{$group->{name}};$self->{score}=undef;$self}sub group {my ($self,$name)=@_;$self->{groups}->{$name }}sub groups {my ($self)=@_;return sort {$a->{name}cmp $b->{name}}values %{$self->{groups}}if wantarray;scalar keys %{$self->{groups}}}sub groups_within {my ($self,$level)=@_;$level=-1 if!defined$level || $level < 0;if ($level==-1){return sort {$a->{name}cmp $b->{name}}values %{$self->{groups}}if wantarray;return scalar keys %{$self->{groups}}}my$are_graph=$self->{graph}? 0 : 1;my$current=0;my@todo;for my$g (ord_values ($self->{groups})){push@todo,$g if (($are_graph &&!defined$g->{group})|| $g->{group}==$self)}if ($level==0){return wantarray ? @todo : scalar@todo}my@cur=@todo;for my$g (@todo){$g->_groups_within(1,$level,\@cur)}wantarray ? @cur : scalar@cur}sub anon_groups {my ($self)=@_;my$n=$self->{groups};if (!wantarray){my$count=0;for my$group (ord_values ($n)){$count++ if$group->is_anon()}return$count}my@anon=();for my$group (ord_values ($n)){push@anon,$group if$group->is_anon()}@anon}sub use_class {my ($self,$object,$class)=@_;$self->_croak("Expected one of node, edge or group, but got $object")unless$object =~ /^(node|group|edge)\z/;$self->{use_class}->{$object}=$class;$self}sub add_vertex {my ($self,$x)=@_;$self->add_node($x);$self}sub add_vertices {my ($self)=shift;$self->add_nodes(@_);$self}sub add_path {my ($self)=shift;my$first=shift;while (@_){my$second=shift;$self->add_edge($first,$second);$first=$second}$self}sub add_cycle {my ($self)=shift;my$first=shift;my$a=$first;while (@_){my$second=shift;$self->add_edge($first,$second);$first=$second}$self->add_edge($first,$a);$self}sub has_edge {my ($self,$x,$y)=@_;$x=$self->{nodes}->{$x}unless ref$x;$y=$self->{nodes}->{$y}unless ref$y;return 0 unless ref($x)&& ref($y);scalar$x->edges_to($y)? 1 : 0}sub set_vertex_attribute {my ($self,$node,$name,$value)=@_;$node=$self->add_node($node);$node->set_attribute($name,$value);$self}sub get_vertex_attribute {my ($self,$node,$name)=@_;$self->node($node)->get_attribute($name)}sub animation_as_graph {my$self=shift;my$graph=Graph::Easy->new();$graph->add_node('onload');$graph}1;
  table.graph##id## td[class|="group"] { padding: 0.2em; }
  CSS
  table.graph##id## td {
    padding: 2px;
    background: inherit;
    white-space: nowrap;
    }
  table.graph##id## span.l { float: left; }
  table.graph##id## span.r { float: right; }
  CSS
  table.graph##id## .va {
    vertical-align: middle;
    line-height: 1em;
    width: 0.4em;
    }
  table.graph##id## .el {
    width: 0.1em;
    max-width: 0.1em;
    min-width: 0.1em;
    }
  table.graph##id## .lh, table.graph##id## .lv {
    font-size: 0.8em;
    padding-left: 0.4em;
    }
  table.graph##id## .sv, table.graph##id## .sh, table.graph##id## .shl, table.graph##id## .sa, table.graph##id## .su {
    max-height: 1em;
    line-height: 1em;
    position: relative;
    top: 0.55em;
    left: -0.3em;
    overflow: visible;
    }
  table.graph##id## .sv, table.graph##id## .su {
    max-height: 0.5em;
    line-height: 0.5em;
    }
  table.graph##id## .shl { left: 0.3em; }
  table.graph##id## .sv { left: -0.5em; top: -0.4em; }
  table.graph##id## .su { left: -0.5em; top: 0.4em; }
  table.graph##id## .sa { left: -0.3em; top: 0; }
  table.graph##id## .eb { max-height: 0; line-height: 0; height: 0; }
  CSS
  table.graph##id## span.c { position: relative; top: 1.5em; }
  table.graph##id## div.c { -moz-border-radius: 100%; border-radius: 100%; }
  table.graph##id## div.r { -moz-border-radius: 1em; border-radius: 1em; }
  CSS
  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
  <html>
   <head>
   <meta http-equiv="Content-Type" content="text/html; charset=##charset##">
   <title>##title##</title>##CSS##
  </head>
  <body bgcolor=white text=black>
  HTML
GRAPH_EASY

$fatpacked{"Graph/Easy/As_ascii.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_AS_ASCII';
  package Graph::Easy::As_ascii;$VERSION='0.76';use utf8;package Graph::Easy::Edge::Cell;use strict;use warnings;my$edge_styles=[{'solid'=>['--',"|",'+','+','+','+','+' ],'double'=>['==',"H","#",'#','#','#','#' ],'double-dash'=>['= ','"',"#",'#','#','#','#' ],'dotted'=>['..',":",':','.','.','.','.' ],'dashed'=>['- ',"'",'+','+','+','+','+' ],'dot-dash'=>['.-',"!",'+','+','+','+','+' ],'dot-dot-dash'=>['..-',"!",'+','+','+','+','+' ],'wave'=>['~~',"}",'+','*','*','*','*' ],'bold'=>['##',"#",'#','#','#','#','#' ],'bold-dash'=>['# ',"#",'#','#','#','#','#' ],'wide'=>['##',"#",'#','#','#','#','#' ],'broad'=>['##',"#",'#','#','#','#','#' ],},{'solid'=>['─','│','┼','┌','┐','└','┘' ],'double'=>['═','║','╬','╔','╗','╚','╝' ],'double-dash'=>['═'.' ','∥','╬','╔','╗','╚','╝' ],'dotted'=>['·',':','┼','┌','┐','└','┘' ],'dashed'=>['╴','╵','┘','┌','┐','╵','┘' ],'dot-dash'=>['·'.'-',"!",'┼','┌','┐','└','┘' ],'dot-dot-dash'=>[('·' x 2).'-',"!",'┼','┌','┐','└','┘' ],'wave'=>['∼','≀','┼','┌','┐','└','┘' ],'bold'=>['━','┃','╋','┏','┓','┗','┛' ],'bold-dash'=>['━'.' ','╻','╋','┏','┓','┗','┛' ],'broad'=>['▬','▮','█','█','█','█','█' ],'wide'=>['█','█','█','█','█','█','█' ],},];sub _edge_style {my ($self,$st)=@_;my$g=$self->{graph}->{_ascii_style}|| 0;$st=$self->{style}unless defined$st;$edge_styles->[$g]->{$st }}my$cross_styles=[[{'boldsolid'=>'┿','solidbold'=>'╂','doublesolid'=>'╪','soliddouble'=>'╫','dashedsolid'=>'┤','soliddashed'=>'┴','doubledashed'=>'╧','dasheddouble'=>'╢',},{'boldsolid'=>'+','dashedsolid'=>'+','dottedsolid'=>'!','dottedwave'=>'+','doublesolid'=>'+','dot-dashsolid'=>'+','dot-dot-dashsolid'=>'+','soliddotted'=>'+','solidwave'=>'+','soliddashed'=>'+','soliddouble'=>'H','wavesolid'=>'+',},],undef,undef,undef,undef,undef,undef,[{'solidsolid'=>'┬','boldbold'=>'┳','doubledouble'=>'╦','dasheddashed'=>'╴','dotteddotted'=>'·',},],[{'solidsolid'=>'┴','boldbold'=>'┻','doubledouble'=>'╩','dotteddotted'=>'·',},],[{'solidsolid'=>'├','boldbold'=>'┣','doubledouble'=>'╠','dotteddotted'=>':',},],[{'solidsolid'=>'┤','boldbold'=>'┫','doubledouble'=>'╣','dotteddotted'=>':',},]];sub _arrow_style {my$self=shift;my$edge=$self->{edge};my$as=$edge->attribute('arrowstyle');$as='none' if$edge->{undirected};$as}sub _arrow_shape {my$self=shift;my$edge=$self->{edge};my$as=$edge->attribute('arrowshape');$as}sub _cross_style {my ($self,$st,$corner_type)=@_;my$g=$self->{graph}->{_ascii_style}|| 0;$g=1 - $g;$corner_type=0 unless defined$corner_type;$corner_type=0 if$g==1;$cross_styles->[$corner_type]->[$g]->{$st }}sub _insert_label {my ($self,$fb,$xs,$ys,$ws,$hs,$align_ver)=@_;my$align=$self->{edge}->attribute('align');my ($lines,$aligns)=$self->_aligned_label($align);$ys=$self->{h}- scalar @$lines + $ys if$ys < 0;$ws ||=0;$hs ||=0;my$w=$self->{w}- $ws - $xs;my$h=$self->{h}- $hs - $ys;$self->_printfb_aligned ($fb,$xs,$ys,$w,$h,$lines,$aligns,$align_ver)}sub _draw_hor {my ($self,$fb)=@_;my$style=$self->_edge_style();my$w=$self->{w};my$len=length($style->[0]);my$line=$style->[0]x (2 + $w / $len);my$ofs=$self->{rx}% $len;my$type=($self->{type}& (~EDGE_MISC_MASK));substr($line,0,$ofs)='' if$ofs!=0 && ($type!=EDGE_SHORT_E && $type!=EDGE_SHORT_W);$line=substr($line,0,$w)if length($line)> $w;my$flags=$self->{type}& EDGE_FLAG_MASK;my$as=$self->_arrow_style();my$ashape;$ashape=$self->_arrow_shape()if$as ne 'none';my$x=0;my$xs=1;my$xr=0;if (($flags & EDGE_START_W)!=0){$x++;chop($line);$xs++}if (($flags & EDGE_START_E)!=0){chop($line)}if (($flags & EDGE_END_E)!=0){chop($line);substr($line,-1,1)=$self->_arrow($as,ARROW_RIGHT,$ashape)if$as ne 'none';$xr++}if (($flags & EDGE_END_W)!=0){substr($line,0,1)=' ' if$as eq 'none';substr($line,0,2)=' ' .$self->_arrow($as,ARROW_LEFT,$ashape)if$as ne 'none';$xs++}$self->_printfb_line ($fb,$x,$self->{h}- 2,$line);$self->_insert_label($fb,$xs,0,$xs+$xr,2,'bottom')if ($self->{type}& EDGE_LABEL_CELL)}sub _draw_ver {my ($self,$fb)=@_;my$style=$self->_edge_style();my$h=$self->{h};my$line=$style->[1]x (1 + $h / length($style->[1]));$line=substr($line,0,$h)if length($line)> $h;my$flags=$self->{type}& EDGE_FLAG_MASK;my$as=$self->_arrow_style();if ($as ne 'none'){my$ashape=$self->_arrow_shape();substr($line,0,1)=$self->_arrow($as,ARROW_UP,$ashape)if (($flags & EDGE_END_N)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_DOWN,$ashape)if (($flags & EDGE_END_S)!=0)}$self->_printfb_ver ($fb,2,0,$line);$self->_insert_label($fb,4,1,4,2,'middle')if ($self->{type}& EDGE_LABEL_CELL)}sub _draw_cross {my ($self,$fb)=@_;my$style=$self->_edge_style($self->{style_ver});my$invisible=0;my$line;my$flags=$self->{type}& EDGE_FLAG_MASK;my$type=$self->{type}& EDGE_TYPE_MASK;my$as=$self->_arrow_style();my$y=$self->{h}- 2;print STDERR "# drawing cross at $self->{x},$self->{y} with flags $flags\n" if$self->{debug};if ($self->{style_ver}ne 'invisible'){my$h=$self->{h};$line=$style->[1]x (2 + $h / length($style->[1]));$line=substr($line,0,$h)if length($line)> $h;if ($as ne 'none'){my$ashape=$self->_arrow_shape();substr($line,0,1)=$self->_arrow($as,ARROW_UP,$ashape)if (($flags & EDGE_END_N)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_DOWN,$ashape)if (($flags & EDGE_END_S)!=0)}substr($line,0,$y)=' ' x $y if$type==EDGE_S_E_W;substr($line,$y,2)='  ' if$type==EDGE_N_E_W;$self->_printfb_ver ($fb,2,0,$line)}else {$invisible++}$style=$self->_edge_style();my$ashape;$ashape=$self->_arrow_style()if$as ne 'none';if ($self->{style}ne 'invisible'){my$w=$self->{w};my$len=length($style->[0]);$line=$style->[0]x (2 + $w / $len);my$ofs=$self->{rx}% $len;substr($line,0,$ofs)='' if$ofs!=0;$line=substr($line,0,$w)if length($line)> $w;my$x=0;if (($flags & EDGE_START_W)!=0){$x++;chop($line)}if (($flags & EDGE_START_E)!=0){chop($line)}if (($flags & EDGE_END_E)!=0){chop($line);substr($line,-1,1)=$self->_arrow($as,ARROW_RIGHT,$ashape)if$as ne 'none'}if (($flags & EDGE_END_W)!=0){substr($line,0,1)=' ' if$as eq 'none';substr($line,0,2)=' ' .$self->_arrow($as,ARROW_LEFT,$ashape)if$as ne 'none'}substr($line,0,2)='  ' if$type==EDGE_E_N_S;substr($line,2,$self->{w}-2)=' ' x ($self->{w}-2)if$type==EDGE_W_N_S;$self->_printfb_line ($fb,$x,$y,$line)}else {$invisible++}if (!$invisible){my$cross=$style->[2];my$s=$self->{style}.$self->{style_ver};$cross=($self->_cross_style($s,$type)|| $cross);$self->_printfb ($fb,2,$y,$cross)}}sub _draw_corner {my ($self,$fb)=@_;my$type=$self->{type}& EDGE_TYPE_MASK;my$flags=$self->{type}& EDGE_FLAG_MASK;my$style=$self->_edge_style();my$h=1;my$y=$self->{h}-1;if ($type==EDGE_N_E || $type==EDGE_N_W){$h=$self->{h}- 2;$y=0}my$line=$style->[1]x (1 + $h / length($style->[1]));$line=substr($line,0,$h)if length($line)> $h;my$as=$self->_arrow_style();my$ashape;if ($as ne 'none'){$ashape=$self->_arrow_shape();substr($line,0,1)=$self->_arrow($as,ARROW_UP,$ashape)if (($flags & EDGE_END_N)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_DOWN,$ashape)if (($flags & EDGE_END_S)!=0)}$self->_printfb_ver ($fb,2,$y,$line);my$w=$self->{w}- 3;$y=$self->{h}- 2;my$x=3;if ($type==EDGE_N_W || $type==EDGE_S_W){$w=2;$x=0}my$len=length($style->[0]);$line=$style->[0]x (2 + $w / $len);my$ofs=($x + $self->{rx})% $len;substr($line,0,$ofs)='' if$ofs!=0;$line=substr($line,0,$w)if length($line)> $w;substr($line,-1,1)=' ' if ($flags & EDGE_START_E)!=0;substr($line,0,1)=' ' if ($flags & EDGE_START_W)!=0;if (($flags & EDGE_END_E)!=0){substr($line,-1,1)=' ' if$as eq 'none';substr($line,-2,2)=$self->_arrow($as,ARROW_RIGHT,$ashape).' ' if$as ne 'none'}if (($flags & EDGE_END_W)!=0){substr($line,0,1)=' ' if$as eq 'none';substr($line,0,2)=' ' .$self->_arrow($as,ARROW_LEFT,$ashape)if$as ne 'none'}$self->_printfb_line ($fb,$x,$y,$line);my$idx=3;$idx=4 if$type==EDGE_S_W;$idx=5 if$type==EDGE_N_E;$idx=6 if$type==EDGE_N_W;$self->_printfb ($fb,2,$y,$style->[$idx])}sub _draw_loop_hor {my ($self,$fb)=@_;my$type=$self->{type}& EDGE_TYPE_MASK;my$flags=$self->{type}& EDGE_FLAG_MASK;my$style=$self->_edge_style();my$h=1;my$y=$self->{h}- 1;if ($type==EDGE_S_W_N){$h=$self->{h}- 2;$y=0}my$line=$style->[1]x (1 + $h / length($style->[1]));$line=substr($line,0,$h)if length($line)> $h;my$as=$self->_arrow_style();my$ashape;$ashape=$self->_arrow_shape()if$as ne 'none';if ($self->{edge}->{bidirectional}&& $as ne 'none'){substr($line,0,1)=$self->_arrow($as,ARROW_UP,$ashape)if (($flags & EDGE_END_N)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_DOWN,$ashape)if (($flags & EDGE_END_S)!=0)}$self->_printfb_ver ($fb,$self->{w}-3,$y,$line);if ($as ne 'none'){substr($line,0,1)=$self->_arrow($as,ARROW_UP,$ashape)if (($flags & EDGE_END_N)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_DOWN,$ashape)if (($flags & EDGE_END_S)!=0)}$self->_printfb_ver ($fb,2,$y,$line);my$w=$self->{w}- 6;$y=$self->{h}- 2;my$x=3;my$len=length($style->[0]);$line=$style->[0]x (2 + $w / $len);my$ofs=($x + $self->{rx})% $len;substr($line,0,$ofs)='' if$ofs!=0;$line=substr($line,0,$w)if length($line)> $w;$self->_printfb_line ($fb,$x,$y,$line);my$corner_idx=3;$corner_idx=5 if$type==EDGE_S_W_N;$self->_printfb ($fb,2,$y,$style->[$corner_idx]);$self->_printfb ($fb,$self->{w}-3,$y,$style->[$corner_idx+1]);my$align='bottom';$align='top' if$type==EDGE_S_W_N;$self->_insert_label($fb,4,0,4,2,$align)if ($self->{type}& EDGE_LABEL_CELL)}sub _draw_loop_ver {my ($self,$fb)=@_;my$type=$self->{type}& EDGE_TYPE_MASK;my$flags=$self->{type}& EDGE_FLAG_MASK;my$style=$self->_edge_style();my$h=1;my$y=$self->{h}- 3;my$line=$style->[1]x (1 + $h / length($style->[1]));$line=substr($line,0,$h)if length($line)> $h;my$x=2;$x=$self->{w}-3 if ($type==EDGE_E_S_W);$self->_printfb_ver ($fb,$x,$y,$line);my$w=$self->{w}- 3;$y=$self->{h}- 4;$x=2;$x=1 if ($type==EDGE_E_S_W);my$len=length($style->[0]);$line=$style->[0]x (2 + $w / $len);my$ofs=($x + $self->{rx})% $len;substr($line,0,$ofs)='' if$ofs!=0;$line=substr($line,0,$w)if length($line)> $w;my$as=$self->_arrow_style();my$ashape;$ashape=$self->_arrow_shape()if$as ne 'none';if ($self->{edge}->{bidirectional}&& $as ne 'none'){substr($line,0,1)=$self->_arrow($as,ARROW_LEFT,$ashape)if (($flags & EDGE_END_W)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_RIGHT,$ashape)if (($flags & EDGE_END_E)!=0)}$self->_printfb_line ($fb,$x,$y,$line);if ($as ne 'none'){substr($line,0,1)=$self->_arrow($as,ARROW_LEFT,$ashape)if (($flags & EDGE_END_W)!=0);substr($line,-1,1)=$self->_arrow($as,ARROW_RIGHT,$ashape)if (($flags & EDGE_END_E)!=0)}$self->_printfb_line ($fb,$x,$self->{h}- 2,$line);$x=2;$x=$self->{w}-3 if ($type==EDGE_E_S_W);my$corner_idx=3;$corner_idx=4 if$type==EDGE_E_S_W;$self->_printfb ($fb,$x,$y,$style->[$corner_idx]);$self->_printfb ($fb,$x,$self->{h}-2,$style->[$corner_idx+2]);$x=4;$x=3 if ($type==EDGE_E_S_W);$self->_insert_label($fb,$x,0,$x,4,'bottom')if ($self->{type}& EDGE_LABEL_CELL)}my$draw_dispatch={EDGE_HOR()=>'_draw_hor',EDGE_VER()=>'_draw_ver',EDGE_S_E()=>'_draw_corner',EDGE_S_W()=>'_draw_corner',EDGE_N_E()=>'_draw_corner',EDGE_N_W()=>'_draw_corner',EDGE_CROSS()=>'_draw_cross',EDGE_W_N_S()=>'_draw_cross',EDGE_E_N_S()=>'_draw_cross',EDGE_N_E_W()=>'_draw_cross',EDGE_S_E_W()=>'_draw_cross',EDGE_N_W_S()=>'_draw_loop_hor',EDGE_S_W_N()=>'_draw_loop_hor',EDGE_E_S_W()=>'_draw_loop_ver',EDGE_W_S_E()=>'_draw_loop_ver',};sub _draw_label {my ($self,$fb,$x,$y)=@_;my$type=$self->{type}& EDGE_TYPE_MASK;return if$self->attribute('style')eq 'invisible' && $type ne EDGE_CROSS;my$m=$draw_dispatch->{$type};$self->_croak("Unknown edge type $type")unless defined$m;$self->{rx}=$x || 0;$self->{ry}=$y || 0;$self->$m($fb);delete$self->{rx};delete$self->{ry}}package Graph::Easy::Node;use strict;sub _framebuffer {my ($self,$w,$h)=@_;print STDERR "# trying to generate framebuffer of undefined width for $self->{name}\n",join (": ",caller(),"\n")if!defined$w;my@fb;my$line=' ' x $w;for my$y (1..$h){push@fb,$line}\@fb}sub _printfb_aligned {my ($self,$fb,$x1,$y1,$w,$h,$lines,$aligns,$align_ver)=@_;$align_ver='middle' unless$align_ver;my$y=$y1 + ($h / 2)- (scalar @$lines / 2);if ($align_ver eq 'top'){$y=$y1;$y1=0}if ($align_ver eq 'bottom'){$y=$h - scalar @$lines;$y1=0}my$xc=($w / 2);my$i=0;while ($i < @$lines){my ($l,$al)=($lines->[$i],$aligns->[$i]);my$x=0;$x=$xc - length($l)/ 2 if$al eq 'c';$x=$w - length($l)if$al eq 'r';substr ($fb->[int($y+$i+$y1)],int($x+$x1),length($l))=$l;$i++}}sub _printfb_line {my ($self,$fb,$x,$y,$l)=@_;substr ($fb->[$y],$x,length($l))=$l}sub _printfb {my ($self,$fb,$x,$y,@lines)=@_;for my$l (@lines){substr ($fb->[$y],$x,length($l))=$l;$y++}}sub _printfb_ver {my ($self,$fb,$x,$y,$line)=@_;my$y1=$y + length($line);substr ($fb->[$y1],$x,1)=chop($line)while ($y1-- > $y)}my$border_styles=[{solid=>['+','+','+','+','-','-',['|' ],['|' ],'+','+','+','+','+' ],dotted=>['.','.',':',':','.','.',[':' ],[':' ],'.','.','.','.','.' ],dashed=>['+','+','+','+','- ','- ',["'" ],["'" ],'+','+','+','+','+' ],'dot-dash'=>['+','+','+','+','.-','.-',['!' ],['!' ],'+','+','+','+','+' ],'dot-dot-dash'=>['+','+','+','+','..-','..-',['|',':' ],['|',':' ],'+','+','+','+','+' ],bold=>['#','#','#','#','#','#',['#' ],['#' ],'#','#','#','#','#' ],'bold-dash'=>['#','#','#','#','# ','# ',['#',' ' ],['#',' ' ],'#','#','#','#','#' ],double=>['#','#','#','#','=','=',['H' ],['H' ],'#','#','#','#','#' ],'double-dash'=>['#','#','#','#','= ','= ',['"' ],['"' ],'#','#','#','#','#' ],wave=>['+','+','+','+','~','~',['{','}' ],['{','}' ],'+','+','+','+','+' ],broad=>['#','#','#','#','#','#',['#' ],['#' ],'#','#','#','#','#' ],wide=>['#','#','#','#','#','#',['#' ],['#' ],'#','#','#','#','#' ],none=>[' ',' ',' ',' ',' ',' ',[' ' ],[' ' ],' ',' ',' ',' ',' ' ],},{solid=>['┌','┐','┘','└','─','─',['│' ],['│' ],'┼','├','┤','┴','┬' ],double=>['╔','╗','╝','╚','═','═',['║' ],['║' ],'┼','├','┤','┴','┬' ],dotted=>['┌','┐','┘','└','⋯','⋯',['⋮' ],['⋮' ],'┼','├','┤','┴','┬' ],dashed=>['┌','┐','┘','└','−','−',['╎' ],['╎' ],'┼','├','┤','┴','┬' ],'dot-dash'=>['┌','┐','┘','└','·'.'-','·'.'-',['!'],['!'],'┼','├','┤','┴','┬' ],'dot-dot-dash'=>['┌','┐','┘','└',('·' x 2).'-',('·' x 2).'-',['│',':' ],['│',':' ],'┼','├','┤','┴','┬' ],bold=>['┏','┓','┛','┗','━','━',['┃' ],['┃' ],'┼','├','┤','┴','┬' ],'bold-dash'=>['┏','┓','┛','┗','━'.' ','━'.' ',['╻' ],['╻' ],'┼','├','┤','┴','┬' ],'double-dash'=>['╔','╗','╝','╚','═'.' ','═'.' ',['∥' ],['∥' ],'┼','├','┤','┴','┬' ],wave=>['┌','┐','┘','└','∼','∼',['≀' ],['≀' ],'┼','├','┤','┴','┬' ],broad=>['▛','▜','▟','▙','▀','▄',['▌' ],['▐' ],'▄','├','┤','┴','┬' ],wide=>['█','█','█','█','█','█',['█' ],['█' ],'█','█','█','█','█' ],none=>[' ',' ',' ',' ',' ',' ',[' ' ],[' ' ],' ',' ',' ',' ',' ',],},];my$rounded_edges=['╭','╮','╯','╰',];my$slants=[{solid=>['/','\\' ],dotted=>['.','.' ],dashed=>['/ ','\\ ' ],'dot-dash'=>['./','.\\' ],'dot-dot-dash'=>['../','..\\' ],bold=>['#','#' ],'bold-dash'=>['# ','# ' ],'double'=>['/','\\' ],'double-dash'=>['/ ','\\ ' ],wave=>['/ ','\\ ' ],broad=>['#','#' ],wide=>['#','#' ],},{solid=>['╱','╲' ],dotted=>['⋰','⋱' ],dashed=>['╱ ','╲ ' ],'dot-dash'=>['.╱','.╲' ],'dot-dot-dash'=>['⋰╱','⋱╲' ],bold=>['#','#' ],'bold-dash'=>['# ','# ' ],'double'=>['╱','╲' ],'double-dash'=>['╱ ','╲ ' ],wave=>['╱ ','╲ ' ],broad=>['#','#' ],wide=>['#','#' ],},];my$point_shapes=[{filled=>{'star'=>'*','square'=>'#','dot'=>'.','circle'=>'o','cross'=>'+','diamond'=>'<>','x'=>'X',},closed=>{'star'=>'*','square'=>'#','dot'=>'.','circle'=>'o','cross'=>'+','diamond'=>'<>','x'=>'X',},},{filled=>{'star'=>'★','square'=>'■','dot'=>'·','circle'=>'●','cross'=>'+','diamond'=>'◆','x'=>'╳',},closed=>{'star'=>'☆','square'=>'□','dot'=>'·','circle'=>'○','cross'=>'+','diamond'=>'◇','x'=>'╳',},}];sub _point_style {my ($self,$shape,$style)=@_;return '' if$shape eq 'invisible';if ($style =~ /^(star|square|dot|circle|cross|diamond)\z/){$shape=$style;$style='filled'}$style='filled' unless defined$style;my$g=$self->{graph}->{_ascii_style}|| 0;$point_shapes->[$g]->{$style}->{$shape}}sub _border_style {my ($self,$style,$type)=@_;my$g=$self->{graph}->{_ascii_style}|| 0;my$s=[@{$border_styles->[$g ]->{$style}}];die ("Unknown $type border style '$style'")if @$s==0;my$shape='rect';$shape=$self->attribute('shape')unless$self->isa_cell();return$s unless$shape eq 'rounded';splice (@$s,0,4,@$rounded_edges)if$style =~ /^(solid|dotted|dashed|dot-dash|dot-dot-dash)\z/;splice (@$s,0,4,(' ',' ',' ',' '))if$g==0 || $style =~ /^(bold|wide|broad|double|double-dash|bold-dash)\z/;$s}my$arrow_form={normal=>0,sleek=>1,};my$arrow_shapes={triangle=>0,diamond=>1,box=>2,dot=>3,inv=>4,line=>5,cross=>6,x=>7,};my$arrow_styles=[[{open=>['>','<','^','v' ],closed=>['>','<','^','v' ],filled=>['>','<','^','v' ],},{open=>['>','<','∧','∨' ],closed=>['▷','◁','△','▽' ],filled=>['▶','◀','▲','▼' ],}],[{open=>['>','<','^','v' ],closed=>['>','<','^','v' ],filled=>['>','<','^','v' ],},{open=>['>','<','∧','∨' ],closed=>['◇','◇','◇','◇' ],filled=>['◆','◆','◆','◆' ],}],[{open=>[']','[','°','u' ],closed=>['D','D','D','D' ],filled=>['#','#','#','#' ],},{open=>['⊐','⊐','⊓','⊔' ],closed=>['◻','◻','◻','◻' ],filled=>['◼','◼','◼','◼' ],}],[{open=>[')','(','^','u' ],closed=>['o','o','o','o' ],filled=>['*','*','*','*' ],},{open=>[')','(','◠','◡' ],closed=>['○','○','○','○' ],filled=>['●','●','●','●' ],}],[{open=>['<','>','v','^' ],closed=>['<','>','v','^' ],filled=>['<','>','v','^' ],},{open=>['<','>','∨','∧' ],closed=>['◁','▷','▽','△' ],filled=>['◀','▶','▼','▲' ],}],[{open=>['|','|','_','-' ],closed=>['|','|','_','-' ],filled=>['|','|','_','-' ],},{open=>['⎥','⎢','_','¯' ],closed=>['⎥','⎢','_','¯' ],filled=>['⎥','⎢','_','¯' ],}],[{open=>['+','+','+','+' ],closed=>['+','+','+','+' ],filled=>['+','+','+','+' ],},{open=>['┼','┼','┼','┼' ],closed=>['┼','┼','┼','┼' ],filled=>['┼','┼','┼','┼' ],}],[{open=>['x','x','x','x' ],closed=>['x','x','x','x' ],filled=>['x','x','x','x' ],},{open=>['x','x','x','x' ],closed=>['x','x','x','x' ],filled=>['⧓','⧓','x','x' ],}]];sub _arrow {my ($self,$style,$dir,$shape)=@_;$shape='' unless defined$shape;$shape=$arrow_shapes->{$shape}|| 0;my$g=$self->{graph}->{_ascii_style}|| 0;$arrow_styles->[$shape]->[$g]->{$style}->[$dir]}my$arrow_dir={'&gt;'=>0,'&lt;'=>1,'^'=>2,'v'=>3,};sub _unicode_arrow {my ($self,$shape,$style,$arrow_text)=@_;$shape='' unless defined$shape;$shape=$arrow_shapes->{$shape}|| 0;my$dir=$arrow_dir->{$arrow_text}|| 0;$arrow_styles->[$shape]->[1]->{$style}->[$dir]}sub _draw_border {my ($self,$fb,$do_right,$do_bottom,$do_left,$do_top,$x,$y)=@_;return if$do_right.$do_left.$do_bottom.$do_top eq 'nonenonenonenone';my$g=$self->{graph};my$w=$self->{w};if ($do_top ne 'none'){my$style=$self->_border_style($do_top,'top');my$tl=$style->[0];$tl='' if$do_left eq 'none';my$top=$style->[4]x (($self->{w})/ length($style->[4])+ 1);my$len=length($style->[4]);if (defined$x){my$ofs=$x % $len;substr($top,0,$ofs)='' if$ofs!=0}substr($top,0,1)=$tl if$tl ne '';$top=substr($top,0,$w)if length($top)> $w;substr($top,-1,1)=$style->[1]if$do_right ne 'none';if ($self->{border_collapse_right}){substr($top,-1,1)=$style->[10]}$self->_printfb($fb,0,0,$top)}if ($do_bottom ne 'none'){my$style=$self->_border_style($do_bottom,'bottom');my$bl=$style->[3];$bl='' if$do_left eq 'none';my$bottom=$style->[5]x (($self->{w})/ length($style->[5])+ 1);my$len=length($style->[5]);if (defined$x){my$ofs=$x % $len;substr($bottom,0,$ofs)='' if$ofs!=0}substr($bottom,0,1)=$bl if$bl ne '';$bottom=substr($bottom,0,$w)if length($bottom)> $w;substr($bottom,-1,1)=$style->[2]if$do_right ne 'none';if ($self->{border_collapse_right}|| $self->{border_collapse_bottom}){if ($self->{rightbelow_count}> 0){my$piece=8;$piece=11 if$self->{rightbelow_count}< 2 &&!$self->{have_below};$piece=10 if$self->{rightbelow_count}< 2 &&!$self->{have_right};substr($bottom,-1,1)=$style->[$piece]}}$self->_printfb($fb,0,$self->{h}-1,$bottom)}return if$do_right.$do_left eq 'nonenone';my$style=$self->_border_style($do_left,'left');my$left=$style->[6];my$lc=scalar @{$style->[6]}- 1;$style=$self->_border_style($do_right,'right');my$right=$style->[7];my$rc=scalar @{$style->[7]}- 1;my (@left,@right);my$l=0;my$r=0;my$s=1;$s=0 if$do_top eq 'none';my$h=$self->{h}- 2;$h ++ if defined$x && $do_bottom eq 'none';for ($s..$h){push@left,$left->[$l];$l ++;$l=0 if$l > $lc;push@right,$right->[$r];$r ++;$r=0 if$r > $rc}$self->_printfb($fb,0,$s,@left)unless$do_left eq 'none';$self->_printfb($fb,$w-1,$s,@right)unless$do_right eq 'none';$self}sub _draw_label {my ($self,$fb,$x,$y,$shape)=@_;if ($shape eq 'point'){my$style=$self->attribute('pointstyle');my$shape=$self->attribute('pointshape');my$l=$self->_point_style($shape,$style);$self->_printfb_line ($fb,2,$self->{h}- 2,$l)if$l;return}my$w=$self->{w}- 4;my$xs=2;my$h=$self->{h}- 2;my$ys=0.5;my$border=$self->attribute('borderstyle');if ($border eq 'none'){$w += 2;$h += 2;$xs=1;$ys=0}my$align=$self->attribute('align');$self->_printfb_aligned ($fb,$xs,$ys,$w,$h,$self->_aligned_label($align))}sub as_ascii {my ($self,$x,$y)=@_;my$shape='rect';$shape=$self->attribute('shape')unless$self->isa_cell();if ($shape eq 'edge'){my$edge=Graph::Easy::Edge->new();my$cell=Graph::Easy::Edge::Cell->new(edge=>$edge,x=>$x,y=>$y);$cell->{w}=$self->{w};$cell->{h}=$self->{h};$cell->{att}->{label}=$self->label();$cell->{type}=Graph::Easy::Edge::Cell->EDGE_HOR + Graph::Easy::Edge::Cell->EDGE_LABEL_CELL;return$cell->as_ascii()}return '' if$shape eq 'invisible' || $self->{w}==0 || $self->{h}==0;my$fb=$self->_framebuffer($self->{w},$self->{h});if ($shape ne 'point'){my$cache=$self->{cache};my$b_top=$cache->{top_border}|| 'none';my$b_left=$cache->{left_border}|| 'none';my$b_right=$cache->{right_border}|| 'none';my$b_bottom=$cache->{bottom_border}|| 'none';$self->_draw_border($fb,$b_right,$b_bottom,$b_left,$b_top)}$self->_draw_label($fb,$x,$y,$shape);join ("\n",@$fb)}1;
GRAPH_EASY_AS_ASCII

$fatpacked{"Graph/Easy/As_graphml.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_AS_GRAPHML';
  package Graph::Easy::As_graphml;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use Graph::Easy::Attributes;my$attr_type_to_name={ATTR_STRING()=>'string',ATTR_COLOR()=>'string',ATTR_ANGLE()=>'double',ATTR_PORT()=>'string',ATTR_UINT()=>'integer',ATTR_URL()=>'string',ATTR_LIST()=>'string',ATTR_LCTEXT()=>'string',ATTR_TEXT()=>'string',};sub _graphml_attr_keys {my ($self,$tpl,$tpl_no_default,$class,$att,$ids,$id)=@_;my$base_class=$class;$base_class =~ s/\..*//;$base_class='graph' if$base_class =~ /group/;$ids->{$base_class}={}unless ref$ids->{$base_class};my$txt='';for my$name (sort keys %$att){my$entry=$self->_attribute_entry($class,$name);my$t=$tpl;$t=$tpl_no_default unless defined$entry->[ATTR_DEFAULT_SLOT ];next if exists$ids->{$base_class}->{$name};$t =~ s/##id##/$$id/;$t =~ s/##class##/$base_class/;$t =~ s/##name##/$name/;$t =~ s/##type##/$attr_type_to_name->{ $entry->[ ATTR_TYPE_SLOT ] || ATTR_COLOR }/eg;if ($t =~ /##default##/){my$def=$entry->[ATTR_DEFAULT_SLOT ];$def=$self->default_attribute($name)if ref$def;$t =~ s/##default##/$def/}$ids->{$base_class}->{$name}=$$id;$$id++;$txt .= $t}$txt}use Graph::Easy::Util qw(ord_values);sub _as_graphml {my$self=shift;my$args=$_[0];$args={name=>$_[0]}if ref($args)ne 'HASH' && @_==1;$args={@_ }if ref($args)ne 'HASH' && @_ > 1;$args->{format}='graph-easy' unless defined$args->{format};if ($args->{format}!~ /^(graph-easy|Graph::Easy|yED)\z/i){return$self->error("Format '$args->{format}' not understood by as_graphml.")}my$format=$args->{format};my$schema="http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd";$schema="http://www.yworks.com/xml/schema/graphml/1.0/ygraphml.xsd" if$format eq 'yED';my$y_schema='';$y_schema="\n    xmlns:y=\"http://www.yworks.com/xml/graphml\"" if$format eq 'yED';my$txt=<<EOF ;$txt =~ s/##DATE##/scalar localtime()/e;$txt =~ s/##VERSION##/$Graph::Easy::VERSION/;$txt =~ s/##SCHEMA##/$schema/;$txt =~ s/##Y##/$y_schema/;my%keys;my$tpl='  <key id="##id##" for="##class##" attr.name="##name##" attr.type="##type##">' ."\n    <default>##default##</default>\n" ."  </key>\n";my$tpl_no_default='  <key id="##id##" for="##class##" attr.name="##name##" attr.type="##type##"/>'."\n";my$ids={};my$id='d0';for my$class (sort keys %{$self->{att}}){my$att=$self->{att}->{$class};$txt .= $self->_graphml_attr_keys($tpl,$tpl_no_default,$class,$att,$ids,\$id)}my@nodes=$self->sorted_nodes('name','id');for my$o (@nodes,ord_values ($self->{edges})){$txt .= $self->_graphml_attr_keys($tpl,$tpl_no_default,$o->class(),$o->raw_attributes(),$ids,\$id)}$txt .= "\n" unless$id eq 'd0';my$indent='  ';$txt .= $indent .'<graph id="G" edgedefault="' .$self->type()."\">\n";$txt .= $self->_attributes_as_graphml($self,'  ',$ids->{graph});my@groups=$self->groups_within(0);for my$g (@groups){$txt .= $g->as_graphml($indent.'  ',$ids)}$indent='    ';for my$n (@nodes){next if$n->{group};$txt .= $n->as_graphml($indent,$ids)}$txt .= "\n";for my$n (@nodes){next if$n->{group};my@out=$n->sorted_successors();for my$other (@out){my@edges=$n->edges_to($other);for my$edge (sort {$a->{id}<=> $b->{id}}@edges){$txt .= $edge->as_graphml($indent,$ids)}}}$txt .= "  </graph>\n</graphml>\n";$txt}sub _safe_xml {my ($self,$txt)=@_;$txt =~ s/&/&amp;/g;$txt =~ s/>/&gt;/g;$txt =~ s/</&lt;/g;$txt =~ s/"/&quot;/g;$txt =~ s/'/&apos;/g;$txt =~ s/\\\\/\\/g;$txt}sub _attributes_as_graphml {my ($graph,$self,$indent,$ids)=@_;my$tpl="$indent  <data key=\"##id##\">##value##</data>\n";my$att=$self->get_attributes();my$txt='';for my$n (sort keys %$att){next unless exists$ids->{$n};my$def=$self->default_attribute($n);next if defined$def && $def eq $att->{$n};my$t=$tpl;$t =~ s/##id##/$ids->{$n}/;$t =~ s/##value##/$graph->_safe_xml($att->{$n})/e;$txt .= $t}$txt}package Graph::Easy::Group;use strict;use Graph::Easy::Util qw(ord_values);sub as_graphml {my ($self,$indent,$ids)=@_;my$txt=$indent .'<graph id="' .$self->_safe_xml($self->{name}).'" edgedefault="' .$self->{graph}->type()."\">\n";$txt .= $self->{graph}->_attributes_as_graphml($self,$indent,$ids->{graph});for my$n (ord_values ($self->{nodes})){my@out=$n->sorted_successors();$txt .= $n->as_graphml($indent.'  ',$ids);for my$other (@out){my@edges=$n->edges_to($other);for my$edge (sort {$a->{id}<=> $b->{id}}@edges){$txt .= $edge->as_graphml($indent.'  ',$ids)}$txt .= "\n" if@edges > 0}}my@groups=$self->groups_within(0);for my$g (@groups){$txt .= $g->_as_graphml($indent.'  ',$ids)}$txt .= $indent ."</graph>";$txt}package Graph::Easy::Node;use strict;sub as_graphml {my ($self,$indent,$ids)=@_;my$g=$self->{graph};my$txt=$indent .'<node id="' .$g->_safe_xml($self->{name})."\">\n";$txt .= $g->_attributes_as_graphml($self,$indent,$ids->{node});$txt .= "$indent</node>\n";return$txt}package Graph::Easy::Edge;use strict;sub as_graphml {my ($self,$indent,$ids)=@_;my$g=$self->{graph};my$txt=$indent .'<edge source="' .$g->_safe_xml($self->{from}->{name}).'" target="' .$g->_safe_xml($self->{to}->{name})."\">\n";$txt .= $g->_attributes_as_graphml($self,$indent,$ids->{edge});$txt .= "$indent</edge>\n";$txt}1;
  <?xml version="1.0" encoding="UTF-8"?>
  <graphml xmlns="http://graphml.graphdrawing.org/xmlns"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"##Y##
      xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
       ##SCHEMA##">
  
    <!-- Created by Graph::Easy v##VERSION## at ##DATE## -->
  
  EOF
GRAPH_EASY_AS_GRAPHML

$fatpacked{"Graph/Easy/As_graphviz.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_AS_GRAPHVIZ';
  package Graph::Easy::As_graphviz;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use Graph::Easy::Util qw(ord_values);my$remap={node=>{'align'=>undef,'background'=>undef,'basename'=>undef,'bordercolor'=>\&_remap_color,'borderstyle'=>\&_graphviz_remap_border_style,'borderwidth'=>undef,'border'=>undef,'color'=>\&_remap_color,'fill'=>\&_remap_color,'label'=>\&_graphviz_remap_label,'pointstyle'=>undef,'pointshape'=>undef,'rotate'=>\&_graphviz_remap_node_rotate,'shape'=>\&_graphviz_remap_node_shape,'title'=>'tooltip','rows'=>undef,'columns'=>undef,},edge=>{'align'=>undef,'arrowstyle'=>\&_graphviz_remap_arrow_style,'background'=>undef,'color'=>\&_graphviz_remap_edge_color,'end'=>\&_graphviz_remap_port,'headtitle'=>'headtooltip','headlink'=>'headURL','labelcolor'=>\&_graphviz_remap_label_color,'start'=>\&_graphviz_remap_port,'style'=>\&_graphviz_remap_edge_style,'tailtitle'=>'tailtooltip','taillink'=>'tailURL','title'=>'tooltip','minlen'=>\&_graphviz_remap_edge_minlen,},graph=>{align=>\&_graphviz_remap_align,background=>undef,bordercolor=>\&_remap_color,borderstyle=>\&_graphviz_remap_border_style,borderwidth=>undef,color=>\&_remap_color,fill=>\&_remap_color,gid=>undef,label=>\&_graphviz_remap_label,labelpos=>'labelloc',output=>undef,type=>undef,},group=>{align=>\&_graphviz_remap_align,background=>undef,bordercolor=>\&_remap_color,borderstyle=>\&_graphviz_remap_border_style,borderwidth=>undef,color=>\&_remap_color,fill=>\&_remap_color,labelpos=>'labelloc',rank=>undef,title=>'tooltip',},all=>{arrowshape=>undef,autolink=>undef,autotitle=>undef,autolabel=>undef,class=>undef,colorscheme=>undef,flow=>undef,fontsize=>\&_graphviz_remap_fontsize,font=>\&_graphviz_remap_font,format=>undef,group=>undef,link=>\&_graphviz_remap_link,linkbase=>undef,textstyle=>undef,textwrap=>undef,},always=>{node=>[qw/borderstyle label link rotate color fill/ ],'node.anon'=>[qw/bordercolor borderstyle label link rotate color/ ],edge=>[qw/labelcolor label link color/ ],graph=>[qw/labelpos borderstyle label link color/ ],},x=>\&_remap_custom_dot_attributes,};sub _remap_custom_dot_attributes {my ($self,$name,$value)=@_;return (undef,undef)unless$name =~ /^x-dot-/;$name =~ s/^x-dot-//;($name,$value)}my$color_remap={bordercolor=>'color',color=>'fontcolor',fill=>'fillcolor',};sub _remap_color {my ($self,$name,$color,$object)=@_;return (undef,undef)unless defined$color;if (!ref($object)&& $object eq 'graph'){$name='bgcolor' if$name eq 'fill'}$name=$color_remap->{$name}|| $name;$color=$self->_color_as_hex_or_hsv($object,$color);($name,$color)}sub _color_as_hex_or_hsv {my ($graph,$self,$color)=@_;if ($color !~ /^#/){if ($color =~ /^hsv\(([0-9\.]+),([0-9\.]+),([0-9\.]+)\)/){$color="$1 $2 $3"}else {my$cs=ref($self)? $self->attribute('colorscheme'): $graph->attribute($self,'colorscheme');$color=$graph->color_as_hex($color,$cs)}}$color}sub _graphviz_remap_align {my ($self,$name,$style)=@_;my$s=lc(substr($style,0,1));('labeljust',$s)}sub _graphviz_remap_edge_minlen {my ($self,$name,$len)=@_;$len=int(($len + 1)/ 2);($name,$len)}sub _graphviz_remap_edge_color {my ($self,$name,$color,$object)=@_;my$style=ref($object)? $object->attribute('style'): $self->attribute('edge','style');if (!defined$color){$color=ref($object)? $object->attribute('color'): $self->attribute('edge','color')}$color='#000000' unless defined$color;$color=$self->_color_as_hex_or_hsv($object,$color);$color=$color .':' .$color if$style =~ /^double/;($name,$color)}sub _graphviz_remap_edge_style {my ($self,$name,$style)=@_;$style='solid' unless defined$style;$style='dotted' if$style =~ /^dot-/;$style='dotted' if$style =~ /^wave/;$style='solid' if$style eq 'double';$style='dashed' if$style =~ /^double-dash/;$style='invis' if$style eq 'invisible';$style='setlinewidth(2), dashed' if$style =~ /^bold-dash/;$style='setlinewidth(5)' if$style =~ /^broad/;$style='setlinewidth(11)' if$style =~ /^wide/;return (undef,undef)if$style eq 'solid';($name,$style)}sub _graphviz_remap_node_rotate {my ($graph,$name,$angle,$self)=@_;return (undef,undef)unless ref($self)&& defined$angle;return (undef,undef)if$angle==0;$angle=360 - $angle;('orientation',$angle)}sub _graphviz_remap_port {my ($graph,$name,$side,$self)=@_;return (undef,undef)unless ref($self)&& defined$side;return (undef,undef)if$side =~ /,/;$side=$graph->_flow_as_side($self->flow(),$side);$side=substr($side,0,1);my$n='tailport';$n='headport' if$name eq 'end';($n,$side)}sub _graphviz_remap_font {my ($self,$name,$style)=@_;('fontname',$style)}sub _graphviz_remap_fontsize {my ($self,$name,$style)=@_;my$fs='11';if ($style =~ /^([\d\.]+)em\z/){$fs=$1 * 11}elsif ($style =~ /^([\d\.]+)%\z/){$fs=($1 / 100)* 11}elsif ($style =~ /^([\d\.]+)px\z/){$fs=$1}else {$self->_croak("Illegal font-size '$style'")}('fontsize',$fs)}sub _graphviz_remap_border_style {my ($self,$name,$style,$node)=@_;my$shape='';$shape=($node->attribute('shape')|| '')if ref($node);return (undef,undef)if$shape =~ /^(none|invisible|img|point)\z/;$style=$node->attribute('borderstyle')unless defined$style;$style='' unless defined$style;$style='dotted' if$style =~ /^dot-/;$style='dashed' if$style =~ /^double-/;$style='dotted' if$style =~ /^wave/;$style='solid' if$style eq 'double';$style='setlinewidth(2)' if$style =~ /^bold/;$style='setlinewidth(5)' if$style =~ /^broad/;$style='setlinewidth(11)' if$style =~ /^wide/;my$w=0;$w=$node->attribute('borderwidth')if (ref($node)&& $style ne 'none');$style='none' if$w==0;my@rc;if ($style eq 'none'){my$fill='white';$fill=$node->color_attribute('fill')if ref($node);$style='filled';@rc=('color',$fill)}return (undef,undef)if$style =~ /^(|solid)\z/ && $shape ne 'rounded';$style='filled' if$style eq 'solid';$style='filled,'.$style unless$style eq 'filled';$style='rounded,'.$style if$shape eq 'rounded' && $style ne 'none';$style =~ s/,\z//;push@rc,'style',$style;@rc}sub _graphviz_remap_link {my ($self,$name,$l,$object)=@_;return (undef,undef)unless ref($object);$l=$object->link()unless defined$l;('URL',$l)}sub _graphviz_remap_label_color {my ($graph,$name,$color,$self)=@_;return (undef,undef)unless ref($self);return (undef,$color)if ($self->label()||'')eq '';$color=$self->raw_attribute('labelcolor')unless defined$color;$color=$self->attribute('color')unless defined$color;$color=$graph->_color_as_hex_or_hsv($self,$color);('fontcolor',$color)}sub _graphviz_remap_node_shape {my ($self,$name,$style,$object)=@_;return (undef,undef)if$style =~ /^(img|rounded)\z/;my$s=$style;$s='plaintext' if$style =~ /^(invisible|none|point)\z/;if (ref($object)){my$border=$object->attribute('borderstyle');$s='plaintext' if$border eq 'none'}($name,$s)}sub _graphviz_remap_arrow_style {my ($self,$name,$style)=@_;my$s='normal';$s=$style if$style =~ /^(none|open)\z/;$s='empty' if$style eq 'closed';my$n='arrowhead';$n='arrowtail' if$self->{_flip_edges};($n,$s)}sub _graphviz_remap_label {my ($self,$name,$label,$node)=@_;my$s=$label;$s=$node->label()if ref($node);if (ref($node)){my$align=$node->attribute('align');my$next_line='\n';$next_line='\l',$s .= '\l' if$align eq 'left';$next_line='\r',$s .= '\r' if$align eq 'right';$s =~ s/(^|[^\\])\\n/$1$next_line/g}$s =~ s/(^|[^\\])\\c/$1\\n/g;my$shape='rect';$shape=($node->attribute('shape')|| '')if ref($node);if ($shape eq 'img'){my$s='<<TABLE BORDER="0"><TR><TD><IMG SRC="##url##" /></TD></TR></TABLE>>';my$url=$node->label();$url =~ s/\s/\+/g;$url =~ s/'/%27/g;$s =~ s/##url##/$url/g}($name,$s)}sub _att_as_graphviz {my ($self,$out)=@_;my$att='';for my$atr (sort keys %$out){my$v=$out->{$atr};$v =~ s/\n/\\n/g;$v='"' .$v .'"' if$v !~ /^[a-z0-9A-Z]+\z/;my$name=$atr;$name =~ s/^x-dot-//;$name='K' if$name eq 'k';$att .= "  $name=$v,\n"}$att =~ s/,\n\z/ /;if ($att ne ''){if ($att !~ /\n.*\n/ && length($att)< 40){$att =~ s/\n/ /;$att =~ s/( )+/ /g}else {$att =~ s/\n/\n  /g;$att="\n  $att"}}$att}use Graph::Easy::Util qw(first_kv);sub _generate_group_edge {my ($self,$e,$indent)=@_;my$edge_att=$e->attributes_as_graphviz();my$a='';my$b='';my$from=$e->{from};my$to=$e->{to};($from,$to)=($to,$from)if$self->{_flip_edges};if ($from->isa('Graph::Easy::Group')){my ($n,$v)=first_kv($from->{nodes});$a='ltail="cluster' .$from->{id}.'"';$from=$v}if ($to->isa('Graph::Easy::Group')){my ($n,$v)=first_kv($to->{nodes});$b='lhead="cluster' .$to->{id}.'"';$to=$v}my$other=$to->_graphviz_point();my$first=$from->_graphviz_point();$e->{_p}=undef;my$att=$a;$att .= ', ' .$b if$b ne '';$att =~ s/^,//;if ($att ne ''){if ($edge_att eq ''){$edge_att=" [ $att ]"}else {$edge_att =~ s/ \]/, $att \]/}}"$indent$first $self->{edge_type} $other$edge_att\n"}sub _insert_edge_attribute {my ($self,$att,$new_att)=@_;return '[ $new_att ]' if$att eq '';my$att_name=$new_att;$att_name =~ s/=.*//;$att =~ s/$att_name=("[^"]+"|[^\s]+)//;$att =~ s/\s?\]/,$new_att ]/;$att}sub _suppress_edge_attribute {my ($self,$att,$sup_att)=@_;$att =~ s/$sup_att=("(\\"|[^"])*"|[^\s\n,;]+)[,;]?//;$att}sub _generate_edge {my ($self,$e,$indent)=@_;return '' if $e->{from}->isa('Graph::Easy::Group')|| $e->{to}->isa('Graph::Easy::Group');my$invis=$self->{_graphviz_invis};my$inv=' [ label="",shape=none,style=filled,height=0,width=0,fillcolor="';my$other=$e->{to}->_graphviz_point();my$first=$e->{from}->_graphviz_point();my$edge_att=$e->attributes_as_graphviz();my$txt='';my$modify_edge=0;my$suppress_start=(!$self->{_flip_edges}? 'arrowtail=none' : 'arrowhead=none');my$suppress_end=($self->{_flip_edges}? 'arrowtail=none' : 'arrowhead=none');my$suppress;if ($e->has_ports()){my@edges=();my ($side,@port)=$e->port('start');@edges=$e->{from}->edges_at_port('start',$side,@port)if defined$side && @port > 0;if (@edges > 1){my$sp=$e->port('start');my$key="$e->{from}->{name},start,$sp";my$invis_id=$invis->{$key};$suppress=$suppress_start;if (!defined$invis_id){$self->{_graphviz_invis_id}++ while (defined$self->node($self->{_graphviz_invis_id}));$invis_id=$self->{_graphviz_invis_id}++;my$e_color=$e->color_attribute('color');$txt .= $indent ."$invis_id$inv$e_color\" ]\n";my$e_att=$self->_insert_edge_attribute($edge_att,$suppress_end);$e_att=$self->_suppress_edge_attribute($e_att,'label');my$before='';my$after='';my$i=$indent;if ($e->{group}){$before=$indent .'subgraph "cluster' .$e->{group}->{id}."\" {\n";$after=$indent ."}\n";$i=$indent .$indent}if ($self->{_flip_edges}){$txt .= $before .$i ."$invis_id $self->{_edge_type} $first$e_att\n" .$after}else {$txt .= $before .$i ."$first $self->{_edge_type} $invis_id$e_att\n" .$after}$invis->{$key}=$invis_id}$first=$invis_id;$modify_edge++}($side,@port)=$e->port('end');@edges=();@edges=$e->{to}->edges_at_port('end',$side,@port)if defined$side && @port > 0;if (@edges > 1){my$ep=$e->port('end');my$key="$e->{to}->{name},end,$ep";my$invis_id=$invis->{$key};$suppress=$suppress_end;if (!defined$invis_id){$self->{_graphviz_invis_id}++ while (defined$self->node($self->{_graphviz_invis_id}));$invis_id=$self->{_graphviz_invis_id}++;my$e_att=$self->_insert_edge_attribute($edge_att,$suppress_start);my$e_color=$e->color_attribute('color');$txt .= $indent ."$invis_id$inv$e_color\" ]\n";my$before='';my$after='';my$i=$indent;if ($e->{group}){$before=$indent .'subgraph "cluster' .$e->{group}->{id}."\" {\n";$after=$indent ."}\n";$i=$indent .$indent}if ($self->{_flip_edges}){$txt .= $before .$i ."$other $self->{_edge_type} $invis_id$e_att\n" .$after}else {$txt .= $before .$i ."$invis_id $self->{_edge_type} $other$e_att\n" .$after}$invis->{$key}=$invis_id}$other=$invis_id;$modify_edge++}}($other,$first)=($first,$other)if$self->{_flip_edges};$e->{_p}=undef;$edge_att=$self->_insert_edge_attribute($edge_att,$suppress)if$modify_edge;$txt ."$indent$first $self->{_edge_type} $other$edge_att\n"}sub _order_group {my ($self,$group)=@_;$group->{_order}++;for my$sg (ord_values($group->{groups})){$self->_order_group($sg)}}sub _as_graphviz_group {my ($self,$group)=@_;my$txt='';my$name=$group->{name};$name =~ s/([\[\]\(\)\{\}\#"])/\\$1/g;return if$group->{_p};my$indent='  ' x ($group->{_order});$txt .= $indent."subgraph \"cluster$group->{id}\" {\n${indent}label=\"$name\";\n";for my$sg (ord_values ($group->{groups})){$txt .= $self->_as_graphviz_group($sg,$indent);$sg->{_p}=1}my$copy={};my$attribs=$group->get_attributes();for my$key (sort keys %$attribs){$copy->{$key}=$attribs->{$key}}$copy->{'borderstyle'}='solid' unless defined$copy->{'borderstyle'};my$out=$self->_remap_attributes($group->class(),$copy,$remap,'noquote');$out->{fillcolor}='#a0d0ff' unless defined$out->{fillcolor};$out->{labeljust}='l' unless defined$out->{labeljust};my$att='';for my$atr (reverse sort keys %$out){my$v=$out->{$atr};$v='"' .$v .'"' if$v !~ /^[a-z0-9A-Z]+\z/;my$name=$atr;$name =~ s/^x-dot-//;$name='K' if$name eq 'k';$att .= $indent."$name=$v;\n"}$txt .= $att ."\n" if$att ne '';for my$n ($group->sorted_nodes()){next if$n->{origin};my$att=$n->attributes_as_graphviz();$n->{_p}=undef;$txt .= $indent .$n->as_graphviz_txt().$att ."\n"}for my$e (ord_values$group->{edges}){next if exists$e->{_p};$txt .= $self->_generate_edge($e,$indent)}$txt .= $indent."}\n";return$txt}sub _as_graphviz {my ($self)=@_;my$name="GRAPH_" .($self->{gid}|| '0');my$type=$self->attribute('type');$type=$type eq 'directed' ? 'digraph' : 'graph';$self->{_edge_type}=$type eq 'digraph' ? '->' : '--';my$txt="$type $name {\n\n" ."  // Generated by Graph::Easy $Graph::Easy::VERSION" ." at " .scalar localtime()."\n\n";my$flow=$self->attribute('graph','flow');$flow='east' unless defined$flow;$flow=Graph::Easy->_direction_as_number($flow);$self->{_flip_edges}=0;$self->{_flip_edges}=1 if$flow==270 || $flow==0;my$groups=$self->groups();$self->{_graphviz_invis}={};$self->{_graphviz_invis_id}='joint0';my$atts=$self->{att};for my$class (qw/edge graph node/){next if$class =~ /\./;my$out=$self->_remap_attributes($class,$atts->{$class},$remap,'noquote');if ($class eq 'node'){$out->{shape}='box' unless$out->{shape};$out->{style}='filled' unless$out->{style};$out->{fontsize}='11' unless$out->{fontsize};$out->{fillcolor}='white' unless$out->{fillcolor}}elsif ($class eq 'graph'){$out->{rankdir}='LR' if$flow==90 || $flow==270;$out->{labelloc}='top' if defined$out->{label}&&!defined$out->{labelloc};$out->{style}='filled' if$groups > 0}elsif ($class eq 'edge'){$out->{dir}='back' if$flow==270 || $flow==0;my ($name,$style)=$self->_graphviz_remap_arrow_style('',$self->attribute('edge','arrowstyle'));$out->{$name}=$style}my$att=$self->_att_as_graphviz($out);$txt .= "  $class [$att];\n" if$att ne ''}$txt .= "\n" if$txt ne '';$self->_edges_into_groups()if$groups > 0;for my$group (ord_values$self->{groups}){$self->_order_group($group)}for my$group (sort {$a->{_order}cmp $b->{_order}}values %{$self->{groups}}){$txt .= $self->_as_graphviz_group($group)|| ''}my$root=$self->attribute('root');$root='' unless defined$root;my$count=0;for my$n (sort {$a->{name}cmp $b->{name}}values %{$self->{nodes}}){next if exists$n->{_p};next if$n->{origin};my$att=$n->attributes_as_graphviz($root);if ($att ne ''){$n->{_p}=undef;$count++;$txt .= "  " .$n->as_graphviz_txt().$att ."\n"}}$txt .= "\n" if$count > 0;my@nodes=$self->sorted_nodes();for my$n (@nodes){my@out=$n->successors();my$first=$n->as_graphviz_txt();if ((@out==0)&& ((scalar$n->predecessors()|| 0)==0)){$txt .= "  " .$first ."\n" unless exists$n->{_p}|| $n->{origin}}for my$other (reverse@out){my@edges=$n->edges_to($other);for my$e (@edges){next if exists$e->{_p};$txt .= $self->_generate_edge($e,'  ')}}}for my$e (ord_values$self->{edges}){$txt .= $self->_generate_group_edge($e,'  ')if$e->{from}->isa('Graph::Easy::Group')|| $e->{to}->isa('Graph::Easy::Group')}for my$n (ord_values($self->{nodes}),ord_values($self->{edges})){delete$n->{_p}}delete$self->{_graphviz_invis};delete$self->{_flip_edges};delete$self->{_edge_type};$txt ."\n}\n"}package Graph::Easy::Node;sub attributes_as_graphviz {my ($self,$root)=@_;$root='' unless defined$root;my$att='';my$class=$self->class();return '' unless ref$self->{graph};my$g=$self->{graph};my$a=$self->raw_attributes();my$attr=$self->{att};my$base_class=$class;$base_class =~ s/\..*//;my$list=$remap->{always}->{$class}|| $remap->{always}->{$base_class};for my$name (@$list){if (ref($remap->{$base_class}->{$name})|| ref($remap->{all}->{$name})){$a->{$name}=$self->raw_attribute($name);if (!defined$a->{$name}){my$b_attr=$g->get_attribute($base_class,$name);my$c_attr=$g->get_attribute($class,$name);if (defined$b_attr && defined$c_attr && $b_attr ne $c_attr){$a->{$name}=$c_attr;$a->{$name}=$b_attr unless defined$a->{$name}}}}else {$a->{$name}=$attr->{$name};$a->{$name}=$self->attribute($name)unless defined$a->{$name}&& $a->{$name}ne 'inherit'}}$a=$g->_remap_attributes($self,$a,$remap,'noquote');delete$a->{label}if!$self->isa('Graph::Easy::Edge')&& exists$a->{label}&& $a->{label}eq $self->{name};if (!$self->{origin}&& $self->{children}&& keys %{$self->{children}}> 0){$a->{label}=$self->_html_like_label();$a->{shape}='none'}if ($self->{bidirectional}){delete$a->{dir};my ($n,$s)=Graph::Easy::_graphviz_remap_arrow_style($self,'',$self->attribute('arrowstyle'));$a->{arrowhead}=$s;$a->{arrowtail}=$s}if ($self->{undirected}){delete$a->{dir};$a->{arrowhead}='none';$a->{arrowtail}='none'}if (!$self->isa_cell()){my$style=$self->attribute('borderstyle');my$w=$self->attribute('borderwidth');$a->{peripheries}=2 if$style =~ /^double/ && $w > 0}my$shape=$a->{shape}|| 'rect';if ($class =~ /node/ && $shape eq 'plaintext'){my$p=$self->parent();$a->{fillcolor}=$p->attribute('fill');$a->{fillcolor}='white' if$a->{fillcolor}eq 'inherit'}$shape=$self->attribute('shape')unless$self->isa_cell();if ($shape eq 'point'){require Graph::Easy::As_ascii;my$style=$self->_point_style($self->attribute('pointshape'),$self->attribute('pointstyle'));$a->{label}=$style;$a->{width}=0,$a->{height}=0 if$style eq ''}if ($shape eq 'invisible'){$a->{label}=' '}$a->{rank}='0' if$root ne '' && $root eq $self->{name};for my$atr (sort keys %$a){my$v=$a->{$atr};$v =~ s/"/\\"/g;if ($atr eq 'label' && $v =~ /^<<TABLE/){my$va=$v;$va =~ s/\\"/"/g;$att .= "$atr=$va, ";next}$v='"' .$v .'"' if$v !~ /^[a-z0-9A-Z]+\z/ || $atr eq 'URL';my$name=$atr;$name =~ s/^x-dot-//;$name='K' if$name eq 'k';$att .= "$name=$v, "}$att =~ s/,\s$//;$att=' [ ' .$att .' ]' if$att ne '';$att}sub _html_like_label {my ($self)=@_;my$cells={};my$rc=$self->_do_place(0,0,{cells=>$cells,cache=>{}});my$label='<<TABLE BORDER="0"><TR>';my$old_y=0;my$old_x=0;my@cells=();for my$cell (sort {my ($ax,$ay)=split /,/,$a;my ($bx,$by)=split /,/,$b;$ay <=> $by or $ax <=> $bx}keys %$cells){my ($x,$y)=split /,/,$cell;if ($y > $old_y){$label .= '</TR><TR>';$old_x=0}my$n=$cells->{$cell};my$l=$n->label();$l =~ s/\\n/<BR\/>/g;my$portname=$n->{autosplit_portname};$portname=$n->label()unless defined$portname;my$name=$self->{name};$portname =~ s/\"/\\"/g;$name =~ s/\"/\\"/g;$n->{_graphviz_portname}='"' .$name .'":"' .$portname .'"';if (($x - $old_x)> 0){$label .= '<TD BORDER="0" COLSPAN="' .($x - $old_x).'"></TD>'}$label .= '<TD BORDER="1" PORT="' .$portname .'">' .$l .'</TD>';$old_y=$y + $n->{cy};$old_x=$x + $n->{cx}}$label .'</TR></TABLE>>'}sub _graphviz_point {my ($n)=@_;return$n->{_graphviz_portname}if exists$n->{_graphviz_portname};$n->as_graphviz_txt()}sub as_graphviz_txt {my$self=shift;my$name=$self->{name};$name =~ s/([\[\]\(\)\{\}"])/\\$1/g;$name='"' .$name .'"' if$name !~ /^([a-zA-Z_]+|\d+)\z/ || $name =~ /^(subgraph|graph|node|edge|strict)\z/i;$name}1;
GRAPH_EASY_AS_GRAPHVIZ

$fatpacked{"Graph/Easy/As_svg.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_AS_SVG';
  package Graph::Easy::As_svg;$Graph::Easy::As_svg::VERSION='0.27';use 5.010;use strict;use warnings;use utf8;sub _text_length {my ($em,$text)=@_;my$count=length($text);my$len=0;my$match;$match=$text =~ tr/'`//;$len += $match * 0.25 * $em;$count -= $match;$match=$text =~ tr/Iijl!.,;:\|//;$len += $match * 0.33 * $em;$count -= $match;$match=$text =~ tr/"Jft\(\)\[\]\{\}//;$len += $match * 0.4 * $em;$count -= $match;$match=$text =~ tr/?//;$len += $match * 0.5 * $em;$count -= $match;$match=$text =~ tr/crs_//;$len += $match * 0.55 * $em;$count -= $match;$match=$text =~ tr/ELPaäevyz\\\/-//;$len += $match * 0.6 * $em;$count -= $match;$match=$text =~ tr/1BZFbdghknopqux~üö//;$len += $match * 0.65 * $em;$count -= $match;$match=$text =~ tr/KCVXY%023456789//;$len += $match * 0.7 * $em;$count -= $match;$match=$text =~ tr/§€//;$len += $match * 0.75 * $em;$count -= $match;$match=$text =~ tr/ÜÖÄßHGDSNQU$&//;$len += $match * 0.8 * $em;$count -= $match;$match=$text =~ tr/AwO=+<>//;$len += $match * 0.85 * $em;$count -= $match;$match=$text =~ tr/W//;$len += $match * 0.90 * $em;$count -= $match;$match=$text =~ tr/M//;$len += $match * 0.95 * $em;$count -= $match;$match=$text =~ tr/m//;$len += $match * 1.03 * $em;$count -= $match;$match=$text =~ tr/@//;$len += $match * 1.15 * $em;$count -= $match;$match=$text =~ tr/æ//;$len += $match * 1.25 * $em;$count -= $match;$len += $count * $em;$len / $em}sub _quote_name {my$name=shift;my$out_name=$name;$out_name =~ s/--/- - /g;$out_name =~ s/&/&amp;/g;$out_name =~ s/</&lt;/g;$out_name =~ s/>/&gt;/g;$out_name}sub _quote {my ($txt)=@_;$txt =~ s/&/&amp;/g;$txt =~ s/</&lt;/g;$txt =~ s/>/&gt;/g;$txt =~ s/"/&quot;/g;$txt =~ s/(^|[^\\])\\[lcnr]/$1 /g;$txt}sub _sprintf {my$form='%0.2f';my@rc;for my$x (@_){push@rc,undef and next unless defined$x;my$y=sprintf($form,$x);$y =~ s/\.0+\z//;$y =~ s/(\.[0-9]+?)0+\z/$1/;push@rc,$y}wantarray ? @rc : $rc[0]}package Graph::Easy;use strict;BEGIN {*_quote=\&Graph::Easy::As_svg::_quote;*_svg_attributes_as_txt=\&Graph::Easy::Node::_svg_attributes_as_txt}sub EM {my$self=shift;$self->_font_size_in_pixels(16)}sub LINE_HEIGHT {my$self=shift;$self->_font_size_in_pixels(16)* 18 / 16}my$devs={'ah'=>" <!-- open arrow -->\n <g id=" .'"ah" stroke-linecap="round" stroke-width="1">' ."\n" .'  <line x1="-8" y1="-4" x2="1" y2="0" />'."\n" .'  <line x1="1" y1="0" x2="-8" y2="4" />'."\n" ." </g>\n",'ahb'=>" <!-- open arrow for bold edges -->\n <g id=" .'"ahb" stroke-linecap="round" stroke-width="1">' ."\n" .'  <line x1="-8" y1="-4" x2="1" y2="0" />'."\n" .'  <line x1="1" y1="0" x2="-8" y2="4" />'."\n" .'  <polygon points="1,0, -4,-2, -4,2" />'."\n" ." </g>\n",'ahc'=>" <!-- closed arrow -->\n <g id=" .'"ahc" stroke-linecap="round" stroke-width="1">' ."\n" .'  <polygon points="-8,-4, 1,0, -8,4"/>'."\n" ." </g>\n",'ahf'=>" <!-- filled arrow -->\n <g id=" .'"ahf" stroke-linecap="round" stroke-width="1">' ."\n" .'  <polygon points="-8,-4, 1,0, -8,4"/>'."\n" ." </g>\n",'diamond'=>" <g id=" .'"diamond">' ."\n" .'  <polygon points="0,-6, 6,0, 0,6, -6,0"/>'."\n" ." </g>\n",'circle'=>" <g id=" .'"circle">' ."\n" .'  <circle r="6" />'."\n" ." </g>\n",'star'=>" <g id=" .'"star">' ."\n" .'  <polygon points="0,-6, 1.5,-2, 6,-2, 2.5,1, 4,6, 0,3, -4,6, -2.5,1, -6,-2, -1.5,-2"/>'."\n" ." </g>\n",'square'=>" <g id=" .'"square">' ."\n" .'  <rect width="10" height="10" />'."\n" ." </g>\n",'dot'=>" <g id=" .'"dot">' ."\n" .'  <circle r="1" />'."\n" ." </g>\n",'cross'=>" <g id=" .'"cross">' ."\n" .'  <line x1="0" y1="-5" x2="0" y2="5" />'."\n" .'  <line x1="-5" y1="0" x2="5" y2="0" />'."\n" ." </g>\n",'d-diamond'=>" <g id=" .'"d-diamond">' ."\n" .'  <polygon points="0,-6, 6,0, 0,6, -6,0"/>'."\n" .'  <polygon points="0,-3, 3,0, 0,3, -3,0"/>'."\n" ." </g>\n",'d-circle'=>" <g id=" .'"d-circle">' ."\n" .'  <circle r="6" />'."\n" .'  <circle r="3" />'."\n" ." </g>\n",'d-square'=>" <g id=" .'"d-square">' ."\n" .'  <rect width="10" height="10" />'."\n" .'  <rect width="6" height="6" transform="translate(2,2)" />'."\n" ." </g>\n",'d-star'=>" <g id=" .'"d-star">' ."\n" .'  <polygon points="0,-6, 1.5,-2, 6,-2, 2.5,1, 4,6, 0,3, -4,6, -2.5,1, -6,-2, -1.5,-2"/>'."\n" .'  <polygon points="0,-4, 1,-1, 4,-1.5, 1.5,0.5, 2.5,3.5, 0,1, -2.5,3.5, -1.5,0.5, -4,-1.5, -1,-1"/>'."\n" ." </g>\n",};my$strokes={'dashed'=>'3, 1','dotted'=>'1, 1','dot-dash'=>'1, 1, 3, 1','dot-dot-dash'=>'1, 1, 1, 1, 3, 1','double-dash'=>'3, 1','bold-dash'=>'3, 1',};sub _svg_use_def {my ($self,$def_name)=@_;$self->{_svg_defs}->{$def_name}=1}sub text_styles_as_svg {my$self=shift;my$style='';my$ts=$self->text_styles();$style .= ' font-style="italic"' if$ts->{italic};$style .= ' font-weight="bold"' if$ts->{bold};if ($ts->{underline}|| $ts->{none}|| $ts->{overline}|| $ts->{'line-through'}){my@s;for my$k (qw/underline overline line-through none/){push@s,$k if$ts->{$k}}my$s=join(' ',@s);$style .= " text-decoration=\"$s\"" if$s}my@styles;my$ff=$self->attribute('font');push@styles,"font-family:$ff" if$ff;my$fs=$self->_font_size_in_pixels(16);$fs='' if$fs eq '16';push@styles,"font-size:${fs}px" if$fs;$style .= ' style="' .(join(";",@styles)).'"' if@styles > 0;$style}my$al_map={'c'=>'middle','l'=>'start','r'=>'end',};sub _svg_text {my ($self,$color,$indent,$x,$y,$style,$xl,$xr)=@_;my$align=$self->attribute('align');my$text_wrap=$self->attribute('textwrap');my ($lines,$aligns)=$self->_aligned_label($align,$text_wrap);my$label='';if (@$lines > 1){my$lh=$self->LINE_HEIGHT();my$em=$self->EM();my$in=$indent .$indent;my$dy=$y - $lh + $em;$label="\n$in<tspan x=\"$x\" y=\"$dy\">";$dy += $lh;my$i=0;for my$line (@$lines){$line=_quote($line);my$all=$aligns->[$i+1]|| substr($align,0,1);my$al=' text-anchor="' .$al_map->{$all}.'"';$al='' if$all eq substr($align,0,1);my$xc=$x;$xc=$xl if ($all eq 'l');$xc=$xr if ($all eq 'r');my$join="</tspan>";$join .= "\n$in<tspan x=\"$xc\" y=\"$dy\"$al>" if$i < @$lines - 1;$dy += $lh;$label .= $line .$join;$i++}$label .= "\n "}else {$label=_quote($lines->[0])if @$lines}my$fs;$fs=$self->text_styles_as_svg()if$label ne '';$fs='' unless defined$fs;my$stroke='';$stroke=' stroke="none"' if ref($self)=~ /Edge/;if (!defined$style){$x=$xl if$align eq 'left';$x=$xr if$align eq 'right';$style='';my$def_align=$self->default_attribute('align');$style=' text-anchor="' .$al_map->{substr($align,0,1)}.'"'}my$svg="$indent<text x=\"$x\" y=\"$y\"$fs fill=\"$color\"$stroke$style>$label</text>\n";$svg ."\n"}sub _remap_align {my ($self,$att,$val)=@_;$val='middle' if$val eq 'center';('text-anchor',$val)}sub _remap_font_size {my ($self,$att,$val)=@_;$val .= 'px' if$val =~ /^\d+\z/;if ($val =~ /em\z/){$val=$self->_font_size_in_pixels(16,$val).'px'}('font-size',$val)}sub _adjust_dasharray {my ($self,$att)=@_;my$s=$att->{'stroke-width'}|| 1;$s =~ s/px//;if ($s =~ /(\d+)em/){my$em=$self->EM();$s=$1 * $em}$att->{'stroke-width'}=$s;delete$att->{'stroke-width'}if$s eq '1';return$att unless exists$att->{'stroke-dasharray'};$s=2 if$s < 2;my@dashes=split /\s*,\s*/,$att->{'stroke-dasharray'};for my$d (@dashes){$d *= $s}$att->{'stroke-dasharray'}=join (',',@dashes);$att}sub _as_svg {my ($self,$options)=@_;$self->{svg_info}={width=>0,height=>0 };$self->layout()unless defined$self->{score};my ($rows,$cols,$max_x,$max_y)=$self->_prepare_layout('svg');my$cells=$self->{cells};my$txt;if ($options->{standalone}){$txt .= <<EOSVG }my$em=$self->EM();my$LINE_HEIGHT=$self->LINE_HEIGHT();my$xl=int($em / 2);my$yl=int($em / 2);my$xr=int($em / 2);my$yr=int($em / 2);my$mx=$max_x + $xl + $xr;my$my=$max_y + $yl + $yr;$txt .= '<svg width="##MX##" height="##MY##" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' ."\n<!-- Generated at " .scalar localtime()." by:\n  " ."Graph::Easy v$Graph::Easy::VERSION\n  Graph::Easy::As_svg v$Graph::Easy::As_svg::VERSION\n-->\n\n";my$title=_quote($self->title());$txt .= "<title>$title</title>\n" if$title ne '';$txt .= "<defs>\n##devs##";$self->{_svg_defs}={};my$mutator={background=>'fill','align'=>\&_remap_align,'color'=>'stroke','fontsize'=>\&_remap_font_size,'font'=>'font-family',};my$skip=qr/^(
  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
  
  EOSVG
     arrow(style|shape)|
     (auto)?(link|title|label)|
     bordercolor|
     borderstyle|
     borderwidth|
     border|
     color|
     colorscheme|
     comment|
     columns|
     flow|
     format|
     gid|
     labelpos|
     labelcolor|
     linkbase|
     line-height|
     letter-spacing|
     margin.*|
     nodeclass|
     padding.*|
     rows|
     root|
     size|
     style|
     shape|
     title|
     type|
     textstyle|
     width|
     rotate|
     )\z/x;my$overlay={edge=>{"stroke"=>'black',"text-align"=>'center',"font-size"=>'13px',},node=>{"font-size"=>'16px',"text-align"=>'center',},};$overlay->{graph}={"font-size"=>'16px',"text-align"=>'center',"border"=>'1px dashed #808080',};my$style=$self->_class_styles($skip,$mutator,'',' ',$overlay);$txt .= "\n <!-- class definitions -->\n" ." <style type=\"text/css\"><![CDATA[\n$style ]]></style>\n" if$style ne '';$txt .="</defs>\n\n";my$lp='top';my ($lw,$lh)=Graph::Easy::Node::_svg_dimensions($self);$lw=int($em*$lw + $em + 0.5);$lh=int($LINE_HEIGHT*$lh+0.5);my$label=$self->label();if ($label ne ''){$lp=$self->attribute('labelpos');if ($mx < ($lw+$em)){$xl += (($lw+$em)- $mx)/ 2;$mx=$em + $lw}$my += $lh}my$em2=$em / 2;{my$bg=$self->color_attribute('fill');$bg='white' if$bg eq 'inherit';my$bs=$self->attribute('borderstyle');my$cl=$self->color_attribute('bordercolor');$cl=$bg if$bs eq 'none';my$bw=$self->attribute('borderwidth')|| 1;$bw =~ s/px//;my$att={'stroke-dasharray'=>$strokes->{$bs}|| '','stroke-width'=>$bw,'stroke'=>$cl,'fill'=>$bg,};delete$att->{'stroke-dasharray'}unless$att->{'stroke-dasharray'}ne '';my$d=$self->_svg_attributes_as_txt($self->_adjust_dasharray($att));my$xr=$mx + $em2;my$yr=$my + $em2;if ($bs ne ''){$xl += $em2 + $bw;$yl += $em2 + $bw;$xr += $em2 + 2 * $bw;$yr += $em2 + 2 * $bw;$mx += $em + 4 * $bw;$my += $em + 4 * $bw}my$bw_2=$bw / 2;$txt .= '<!-- graph background with border (mainly for printing) -->' ."\n<rect x=\"$bw_2\" y=\"$bw_2\" width=\"$xr\" height=\"$yr\"$d />\n\n"}if ($label ne ''){my$y=$yl + $em2;$y=$my - $lh + $em2 if$lp eq 'bottom';my$link=_quote($self->link());my$l=Graph::Easy::Node::_svg_text($self,$self->color_attribute('color')|| 'black','  ',$mx / 2,$y,undef,$em2,$mx - $em2);$l =~ s/<text /<text class="graph" /;$l="  <!-- graph label -->\n" .$l;$l=Graph::Easy::Node::_link($self,$l,'',$title,$link)if$link ne '';$txt .= $l;$yl += $lh if$lp eq 'top'}for my$n ($self->groups(),$self->edges(),$self->sorted_nodes()){my$x=$xl;my$y=$yl;if ((ref($n)eq 'Graph::Easy::Node')|| (ref($n)eq 'Graph::Easy::Node::Anon')){$x += $cols->{$n->{x}};$y += $rows->{$n->{y}}}my$class=$n->class();$class =~ s/\./_/;my$obj_txt=$n->as_svg($x,$y,' ',$rows,$cols);if ($obj_txt ne ''){$obj_txt =~ s/\n\z/<\/g>\n\n/;my$id=$n->attribute('id');$id=$n->{id}if$id eq '';$id =~ s/([\"\\])/\\$1/g;$txt .= "<g id=\"$id\" class=\"$class\">\n" .$obj_txt}}my$d='';for my$key (keys %{$self->{_svg_defs}}){$d .= $devs->{$key}}$txt =~ s/##devs##/$d/;$txt =~ s/##MX##/$mx/;$txt =~ s/##MY##/$my/;$txt .= "</svg>";$txt .= "\n" if$options->{standalone};$self->{svg_info}->{width}=$mx;$self->{svg_info}->{height}=$my;$txt}package Graph::Easy::Node::Cell;sub as_svg {''}sub _correct_size_svg {my$self=shift;$self->{w}=3;$self->{h}=3;$self}package Graph::Easy::Group::Cell;sub as_svg {my ($self,$x,$y,$indent)=@_;my$svg=$self->_svg_background($x,$y,$indent);$svg .= $self->SUPER::as_svg($x,$y,$indent)if$self->{has_label};$svg}my$coords={'gl'=>'x1="XX0" y1="YY0" x2="XX0" y2="YY1"','gt'=>'x1="XX0" y1="YY0" x2="XX1" y2="YY0"','gb'=>'x1="XX0" y1="YY1" x2="XX1" y2="YY1"','gr'=>'x1="XX1" y1="YY0" x2="XX1" y2="YY1"',};sub _svg_background {my ($self,$x,$y,$indent)=@_;my$bg=$self->background();$bg=$self->{group}->default_attribute('fill')if$bg eq '';my$svg='';if ($bg ne ''){$bg=$self->{group}->color_attribute('fill')if$bg eq 'inherit';$bg='' if$bg eq 'inherit';if ($bg ne ''){my$w=$self->{w};my$h=$self->{h};$svg .= "$indent<rect x=\"$x\" y=\"$y\" width=\"$w\" height=\"$h\" fill=\"$bg\"/>\n"}}my$x2=$x + $self->{w}- 0.5;my$y2=$y + $self->{h}- 0.5;my$style=$self->attribute('border-style')||'dashed';my$att={'stroke'=>$self->color_attribute('bordercolor'),'stroke-dasharray'=>$strokes->{$style}||'3, 1','stroke-width'=>$self->attribute('borderwidth')|| 1,};$self->_adjust_dasharray($att);my$stroke=$self->_svg_attributes_as_txt($att,0,0);my$c=$self->{cell_class};$c =~ s/^\s+//;$c =~ s/\s+\z//;$x += 0.5;$y += 0.5;for my$class (split /\s+/,$c){last if$class =~ /^(\s+|gi)\z/;my$l="$indent<line " .$coords->{$class}." $stroke/>\n";$l =~ s/XX0/$x/g;$l =~ s/XX1/$x2/g;$l =~ s/YY0/$y/g;$l =~ s/YY1/$y2/g;$svg .= $l}$svg .= "\n";$svg}package Graph::Easy::Group;sub as_svg {my ($self,$xl,$yl,$indent,$rows,$cols)=@_;my$txt='';for my$cell (values %{$self->{_cells}}){my$x=$cols->{$cell->{x}}+ $xl;my$y=$rows->{$cell->{y}}+ $yl;$txt .= $cell->as_svg($x,$y,$indent)}$txt}package Graph::Easy::Edge;use Graph::Easy::Edge::Cell qw/EDGE_HOLE/;sub as_svg {my ($self,$xl,$yl,$indent,$rows,$cols)=@_;my$cells=$self->{cells};my$from=Graph::Easy::As_svg::_quote_name($self->{from}->{name});my$to=Graph::Easy::As_svg::_quote_name($self->{to}->{name});my$txt=" <!-- from $from to $to -->\n";my$done_cells=0;for my$cell (@$cells){next if$cell->{type}==EDGE_HOLE;$done_cells++;my$x=$cols->{$cell->{x}}+ $xl;my$y=$rows->{$cell->{y}}+ $yl;$txt .= $cell->as_svg($x,$y,$indent)}return '' if$done_cells==0;$txt}package Graph::Easy::Node::Empty;sub as_svg {''}package Graph::Easy::Node;BEGIN {*_sprintf=\&Graph::Easy::As_svg::_sprintf;*_quote=\&Graph::Easy::As_svg::_quote;*LINE_HEIGHT=\&Graph::Easy::LINE_HEIGHT}sub _svg_dimensions {my ($self)=@_;my$align=$self->attribute('align');my$text_wrap=$self->attribute('textwrap');my ($lines,$aligns)=$self->_aligned_label($align,$text_wrap);my$w=0;my$h=scalar @$lines;my$em=$self->EM();for my$line (@$lines){$line =~ s/^\s+//;$line =~ s/\s+$//;my$line_length=Graph::Easy::As_svg::_text_length($em,$line);$w=$line_length if$line_length > $w}($w,$h)}sub _svg_background {my ($self,$x,$y,$indent)=@_;my$bg=$self->background();my$s='';if (ref$self->{edge}){$bg=$self->{edge}->{group}->default_attribute('fill')||'#a0d0ff' if$bg eq '' && ref$self->{edge}->{group};$s=' stroke="none"'}my$svg='';if ($bg ne 'inherit' && $bg ne ''){my$w=$self->{w};my$h=$self->{h};$svg .= "$indent<rect x=\"$x\" y=\"$y\" width=\"$w\" height=\"$h\" fill=\"$bg\"$s />\n"}$svg}BEGIN {*EM=\&Graph::Easy::EM;*text_styles_as_svg=\&Graph::Easy::text_styles_as_svg;*_svg_text=\&Graph::Easy::_svg_text;*_adjust_dasharray=\&Graph::Easy::_adjust_dasharray}sub as_svg {my ($self,$x,$y,$indent)=@_;my$name=$self->{att}->{label};$name=$self->{name}if!defined$name;$name='anon node ' .$self->{name}if$self->{class}eq 'node.anon';my$em=$self->EM();my$att=$self->_svg_attributes($x,$y);my$shape=$att->{shape};delete$att->{shape};return '' if$shape eq 'invisible';my$title=_quote($self->title());$att->{title}=$title if$title ne '';my$s='';$s=$self->attribute('shape')unless$self->isa_cell();my$link=_quote($self->link());my$old_indent=$indent;$indent=$indent x 2 if$link ne '';my$out_name=Graph::Easy::As_svg::_quote_name($name);my$svg="$indent<!-- $out_name, $s -->\n";$svg .= $self->_svg_background($x,$y,$indent)if$s ne 'rect';my$bs=$self->attribute('borderstyle');my$xt=int($x + $self->{w}/ 2);my$yt=int($y + $self->{h}/ 2);if ($shape eq 'point'){my$s=$self->attribute('pointshape');if ($s ne 'invisible'){$s='d-' .$s if$bs =~ /^double/ && $s =~ /^(square|diamond|circle|star)\z/;my$ps=$self->attribute('pointstyle');my$a={};for my$key (keys %$att){$a->{$key}=$att->{$key}}$a->{stroke}=$self->color_attribute('bordercolor');if ($s eq 'dot' || $ps eq 'filled'){$a->{fill}=$a->{stroke}}my$att_txt=$self->_svg_attributes_as_txt($a,$xt,$yt);$yt -= 5 if$s =~ 'square';$xt -= 5 if$s =~ 'square';$self->{graph}->_svg_use_def($s);$svg .= "$indent<use$att_txt xlink:href=\"#$s\" x=\"$xt\" y=\"$yt\"/>\n\n"}else {$svg .= "\n"}}elsif ($shape eq 'img'){require Image::Info;my$label=$self->label();my$info=Image::Info::image_info($label);my$w=$info->{width};my$h=$info->{height};if ($info->{error}){$self->_croak("Couldn't determine image dimensions from '$label': $info->{error}")}my$x1=$xt - $w / 2;my$y1=$yt - $h / 2;$label=_quote($label);$svg .= "<image x=\"$x1\" y=\"$y1\" xlink:href=\"$label\" width=\"$w\" height=\"$h\" />\n"}else {if ($shape ne 'none' &&!$self->isa('Graph::Easy::Group::Cell')){my$group={};if ($bs =~ /^double/){for my$a (qw/fill stroke stroke-dasharray/){$group->{$a}=$att->{$a}if exists$att->{$a};delete$att->{$a}}}my$att_txt=$self->_svg_attributes_as_txt($att,$xt,$yt);my$shape_svg="$indent<$shape$att_txt />\n";if ($bs =~ /^double/){my$group_txt=$self->_svg_attributes_as_txt($group,$xt,$yt);$shape_svg="$indent<g$group_txt>\n$indent" .$shape_svg;my$att=$self->_svg_attributes($x,$y,3);for my$a (qw/fill stroke stroke-dasharray/){delete$att->{$a}}my$shape=$att->{shape};delete$att->{shape};my$att_txt=$self->_svg_attributes_as_txt($att,$xt,$yt);$shape_svg .= "$indent$indent<$shape$att_txt />\n";$shape_svg .= "$indent</g>\n"}$svg .= $shape_svg}my ($w,$h)=$self->_svg_dimensions();my$lh=$self->LINE_HEIGHT();my$yt=int($y + $self->{h}/ 2 + $lh / 3 - ($h -1)* $lh / 2);$yt += $self->{h}* 0.25 if$s =~ /^(triangle|trapezium)\z/;$yt -= $self->{h}* 0.25 if$s =~ /^inv(triangle|trapezium)\z/;$yt += $self->{h}* 0.10 if$s eq 'house';$yt -= $self->{h}* 0.10 if$s eq 'invhouse';my$color=$self->color_attribute('color')|| 'black';$svg .= $self->_svg_text($color,$indent,$xt,$yt,undef,int($x + $em/2),int($x + $self->{w}- $em/2))}$svg=$self->_link($svg,$old_indent,$title,$link)if$link ne '';$svg}sub _link {my ($self,$svg,$indent,$title,$link)=@_;$title=' xlink:title="' .$title .'"' if$title ne '';$svg =~ s/\n\z//;$svg=$indent ."<a xlink:target=\"_top\" xlink:href=\"$link\"$title>\n" .$svg .$indent ."</a>\n\n";$svg}sub _svg_attributes {my ($self,$x,$y,$sub)=@_;$sub ||=0;my$att={};my$shape=$self->shape();my$em=$self->EM();my$border_width=Graph::Easy::_border_width_in_pixels($self,$em);my$bw2=$border_width / 2;$sub += $bw2;my$w2=$self->{w}/ 2;my$h2=$self->{h}/ 2;my$cx=$x + $self->{w}/ 2;my$cy=$y + $self->{h}/ 2;my$double=0;$double=1 if ($self->attribute('border-style')|| '')eq 'double';my$x2=$x + $self->{w}- $sub;my$y2=$y + $self->{h}- $sub;$x += $sub;$y += $sub;my$sub3=$sub / 3;my$sub6=2 * $sub / 3;if ($shape =~ /^(point|none)\z/){}elsif ($shape eq 'circle'){$att->{cx}=$cx;$att->{cy}=$cy;$att->{r}=$self->{minw}> $self->{minh}? $self->{minw}: $self->{minh};$att->{r}/= 2;$att->{r}-= $sub}elsif ($shape eq 'parallelogram'){my$xll=_sprintf($x - $sub3 + $self->{w}* 0.25);my$xrl=_sprintf($x2 + $sub3 - $self->{w}* 0.25);my$xl=_sprintf($x + $sub6);my$xr=_sprintf($x2 - $sub6);$shape="polygon points=\"$xll,$y, $xr,$y, $xrl,$y2, $xl,$y2\""}elsif ($shape eq 'trapezium'){my$xl=_sprintf($x - $sub3 + $self->{w}* 0.25);my$xr=_sprintf($x2 + $sub3 - $self->{w}* 0.25);my$xl1=_sprintf($x + $sub3);my$xr1=_sprintf($x2 - $sub3);$shape="polygon points=\"$xl,$y, $xr,$y, $xr1,$y2, $xl1,$y2\""}elsif ($shape eq 'invtrapezium'){my$xl=_sprintf($x - $sub3 + $self->{w}* 0.25);my$xr=_sprintf($x2 + $sub3 - $self->{w}* 0.25);my$xl1=_sprintf($x + $sub3);my$xr1=_sprintf($x2 - $sub3);$shape="polygon points=\"$xl1,$y, $xr1,$y, $xr,$y2, $xl,$y2\""}elsif ($shape eq 'diamond'){my$x1=$cx;my$y1=$cy;my$xl=_sprintf($x + $sub3);my$xr=_sprintf($x2 - $sub3);$shape="polygon points=\"$xl,$y1, $x1,$y, $xr,$y1, $x1,$y2\""}elsif ($shape eq 'house'){my$x1=$cx;my$y1=_sprintf($y - $sub3 + $self->{h}* 0.333);$shape="polygon points=\"$x1,$y, $x2,$y1, $x2,$y2, $x,$y2, $x,$y1\""}elsif ($shape eq 'pentagon'){my$x1=$cx;my$x11=_sprintf($x - $sub3 + $self->{w}* 0.25);my$x12=_sprintf($x2 + $sub3 - $self->{w}* 0.25);my$y1=_sprintf($y - $sub6 + $self->{h}* 0.333);my$xl=_sprintf($x + $sub3);my$xr=_sprintf($x2 - $sub3);$shape="polygon points=\"$x1,$y, $xr,$y1, $x12,$y2, $x11,$y2, $xl,$y1\""}elsif ($shape eq 'invhouse'){my$x1=$cx;my$y1=_sprintf($y - (1.4 * $sub)+ $self->{h}* 0.666);$shape="polygon points=\"$x,$y, $x2,$y, $x2,$y1, $x1,$y2, $x,$y1\""}elsif ($shape eq 'septagon'){my$x15=$cx;my$x11=_sprintf($x2 + $sub3 - $self->{w}* 0.10);my$x14=_sprintf($x - $sub3 + $self->{w}* 0.10);my$y11=_sprintf($y - $sub3 + $self->{h}* 0.15);my$y13=_sprintf($y2 + 0.85 * $sub - $self->{h}* 0.40);my$x12=_sprintf($x2 + $sub6 - $self->{w}* 0.25);my$x13=_sprintf($x - $sub6 + $self->{w}* 0.25);my$xl=_sprintf($x - 0.15 * $sub);my$xr=_sprintf($x2 + 0.15 * $sub);$shape="polygon points=\"$x15,$y, $x11,$y11, $xr,$y13, $x12,$y2, $x13,$y2, $xl,$y13, $x14, $y11\""}elsif ($shape eq 'octagon'){my$x11=_sprintf($x - $sub3 + $self->{w}* 0.25);my$x12=_sprintf($x2 + $sub3 - $self->{w}* 0.25);my$y11=_sprintf($y - $sub6 + $self->{h}* 0.25);my$y12=_sprintf($y2 + $sub6 - $self->{h}* 0.25);my$xl=_sprintf($x + $sub * 0.133);my$xr=_sprintf($x2 - $sub * 0.133);$shape="polygon points=\"$xl,$y11, $x11,$y, $x12,$y, $xr,$y11, $xr,$y12, $x12,$y2, $x11,$y2, $xl,$y12\""}elsif ($shape eq 'hexagon'){my$y1=$cy;my$x11=_sprintf($x - $sub6 + $self->{w}* 0.25);my$x12=_sprintf($x2 + $sub6 - $self->{w}* 0.25);my$xl=_sprintf($x + $sub3);my$xr=_sprintf($x2 - $sub3);$shape="polygon points=\"$xl,$y1, $x11,$y, $x12,$y, $xr,$y1, $x12,$y2, $x11,$y2\""}elsif ($shape eq 'triangle'){my$x1=$cx;my$xl=_sprintf($x + $sub);my$xr=_sprintf($x2 - $sub);my$yd=_sprintf($y2 + ($sub * 0.2));$shape="polygon points=\"$x1,$y, $xr,$yd, $xl,$yd\""}elsif ($shape eq 'invtriangle'){my$x1=$cx;my$xl=_sprintf($x + $sub);my$xr=_sprintf($x2 - $sub);my$yd=_sprintf($y - ($sub * 0.2));$shape="polygon points=\"$xl,$yd, $xr,$yd, $x1,$y2\""}elsif ($shape eq 'ellipse'){$att->{cx}=$cx;$att->{cy}=$cy;$att->{rx}=$w2 - $sub;$att->{ry}=$h2 - $sub}else {if ($shape eq 'rounded'){$att->{ry}='15';$att->{rx}='15';$shape='rect'}$att->{x}=$x;$att->{y}=$y;$att->{width}=_sprintf($self->{w}- $sub * 2);$att->{height}=_sprintf($self->{h}- $sub * 2)}$att->{shape}=$shape;my$border_style=$self->attribute('border-style')|| 'solid';my$border_color=$self->color_attribute('border-color')|| 'black';$att->{'stroke-width'}=$border_width if$border_width ne '1';$att->{stroke}=$border_color;if ($border_style !~ /^(none|solid)/){$att->{'stroke-dasharray'}=$strokes->{$border_style}if exists$strokes->{$border_style};$self->_adjust_dasharray($att)}if ($border_style eq 'none'){delete$att->{'stroke-width'};delete$att->{stroke}}$att->{fill}=$self->color_attribute('fill')|| 'white';$att->{rotate}=$self->angle();$att}sub _svg_attributes_as_txt {my ($self,$att,$x,$y)=@_;my$att_line='';my$att_txt='';for my$e (sort keys %$att){next if$e =~ /^(arrow-?style|arrow-?shape|text-?style|label-?color|
  	  rows|columns|size|offset|origin|rotate|colorscheme)\z/x;$att_line .= " $e=\"$att->{$e}\"";if (length($att_line)> 75){$att_txt .= "$att_line\n  ";$att_line=''}}my$r=$att->{rotate}|| 0;$att_line .= " transform=\"rotate($r, $x, $y)\"" if$r!=0;if (length($att_line)> 75){$att_txt .= "$att_line\n  ";$att_line=''}$att_txt .= $att_line;$att_txt =~ s/\n  \z//;$att_txt}sub _correct_size_svg {my$self=shift;my$em=$self->EM();return if defined$self->{w};my$shape=$self->shape();if ($shape eq 'point'){$self->{w}=$em * 3;$self->{h}=$em * 3;return}my ($w,$h)=$self->_svg_dimensions();my$lh=$self->LINE_HEIGHT();$self->{w}=int($w * $em + $em);$self->{h}=int($h * $lh + $em);my$border='none';$border=$self->attribute('borderstyle')|| '' if$shape ne 'none';if ($border ne 'none'){my$bw=Graph::Easy::_border_width_in_pixels($self,$em);$self->{w}+= $bw * 2;$self->{h}+= $bw * 2}$self->{w}*= 1.4 if$shape =~ /triangle/;$self->{h}*= 1.8 if$shape =~ /triangle|trapezium/;$self->{w}*= 1.2 if$shape =~ /(parallelogram|trapezium|pentagon)/;if ($shape =~ /^(diamond|circle|octagon|hexagon|triangle)\z/){my$max=$self->{w};$max=$self->{h}if$self->{h}> $max;$self->{h}=$max;$self->{w}=$max}}1;package Graph::Easy::Edge::Cell;BEGIN {*_sprintf=\&Graph::Easy::As_svg::_sprintf;*_quote=\&Graph::Easy::As_svg::_quote}sub LINE_HOR () {0x0}sub LINE_VER () {0x1}sub LINE_PATH() {0x2}sub LINE_MASK () {0x0F}sub LINE_DOUBLE () {0x10}my$draw_lines={EDGE_N_W_S()=>[LINE_PATH,'M',-1,-0.5,'L',-1,-1.5,'L',1,-1.5,'L',1,-0.5 ],EDGE_S_W_N()=>[LINE_PATH,'M',-1,0.5,'L',-1,1.5,'L',1,1.5,'L',1,0.5 ],EDGE_E_S_W()=>[LINE_PATH,'M',0.5,1,'L',1.5,1,'L',1.5,-1,'L',0.5,-1 ],EDGE_W_S_E()=>[LINE_PATH,'M',-0.5,1,'L',-1.5,1,'L',-1.5,-1,'L',-0.5,-1 ],EDGE_VER()=>[LINE_VER,0,0 ],EDGE_HOR()=>[LINE_HOR,0,0 ],EDGE_CROSS()=>[LINE_HOR,0,0,LINE_VER,0,0 ],EDGE_S_E()=>[LINE_VER,0.5,0,LINE_HOR,0.5,0 ],EDGE_N_W()=>[LINE_VER,0,0.5,LINE_HOR,0,0.5 ],EDGE_N_E()=>[LINE_VER,0,0.5,LINE_HOR,0.5,0 ],EDGE_S_W()=>[LINE_VER,0.5,0,LINE_HOR,0,0.5 ],EDGE_S_E_W()=>[LINE_HOR,0,0,LINE_VER,0.5,0 ],EDGE_N_E_W()=>[LINE_HOR,0,0,LINE_VER,0,0.5 ],EDGE_E_N_S()=>[LINE_HOR,0.5,0,LINE_VER,0,0 ],EDGE_W_N_S()=>[LINE_HOR,0,0.5,LINE_VER,0,0 ],};my$dimensions={EDGE_VER()=>[1,2 ],EDGE_HOR()=>[2,1 ],EDGE_CROSS()=>[2,2 ],EDGE_N_E()=>[2,2 ],EDGE_N_W()=>[2,2 ],EDGE_S_E()=>[2,2 ],EDGE_S_W()=>[2,2 ],EDGE_S_E_W=>[2,2 ],EDGE_N_E_W=>[2,2 ],EDGE_E_N_S=>[2,2 ],EDGE_W_N_S=>[2,2 ],EDGE_N_W_S()=>[4,2 ],EDGE_S_W_N()=>[4,2 ],EDGE_E_S_W()=>[2,4 ],EDGE_W_S_E()=>[2,4 ],};my$arrow_pos={EDGE_N_W_S()=>[1,-0.5 ],EDGE_S_W_N()=>[1,0.5 ],EDGE_E_S_W()=>[0.5,-1 ],EDGE_W_S_E()=>[-0.5,-1 ],};my$arrow_correct={EDGE_END_S()=>['h',1.5 ],EDGE_END_N()=>['h',1.5 ],EDGE_START_S()=>['h',1 ],EDGE_START_N()=>['h',1 ],EDGE_END_W()=>['w',1.5 ],EDGE_END_E()=>['w',1.5 ],EDGE_START_W()=>['w',1,],EDGE_START_E()=>['w',1,],};sub _arrow_pos {my ($self,$x,$w,$y,$h,$ddx,$ddy,$dx,$dy)=@_;my$em=$self->EM();my$cell_type=$self->{type}& EDGE_TYPE_MASK;if (exists$arrow_pos->{$cell_type}){$dx=$arrow_pos->{$cell_type}->[0]* $em;$dy=$arrow_pos->{$cell_type}->[1]* $em;$dx=$w + $dx if$dx < 0;$dy=$h + $dy if$dy < 0;$dx += $x;$dy += $y}_sprintf($dx,$dy)}sub _svg_arrow {my ($self,$att,$x,$y,$type,$indent,$s)=@_;my$w=$self->{w};my$h=$self->{h};$s ||=0;my$arrow_style=$self->attribute('arrow-style')|| '';return '' if$arrow_style eq 'none';my$class='ah' .substr($arrow_style,0,1);$class='ah' if$class eq 'aho';$class .= 'b' if$s > 1 && $class eq 'ah';my$DEF={"stroke-linecap"=>'round',};my$a={};for my$key (keys %$att){next if$key =~ /^(stroke-dasharray|arrow-style|stroke-width)\z/;$a->{$key}=$att->{$key}unless exists$DEF->{$key}&& $DEF->{$key}eq $att->{$key}}if ($arrow_style eq 'closed'){$a->{fill}=$self->color_attribute('background')|| 'inherit';$a->{fill}=$self->{graph}->color_attribute('graph','background')|| 'inherit' if$a->{fill}eq 'inherit';$a->{fill}='white' if$a->{fill}eq 'inherit'}elsif ($arrow_style eq 'filled'){my$fill=$self->raw_attribute('fill');if (defined$fill){$a->{fill}=$self->color_attribute('fill')}else {$a->{fill}=$self->color_attribute('color')}}elsif ($class eq 'ahb'){$a->{fill}=$self->color_attribute('color');delete$a->{fill}unless$a->{fill}}my$att_txt=$self->_svg_attributes_as_txt($a);$self->{graph}->_svg_use_def($class)if ref$self->{graph};my$ar="$indent<use$att_txt xlink:href=\"#$class\" ";my$svg='';my$ss=int($s / 4 + 1);my$scale='';$scale="scale($ss)" if$ss > 1;my$dis=0.1;my ($x1,$x2,$y1,$y2);if ($type & EDGE_END_N){my$d=$dis;$d += $ss/150 if$ss > 1;$d *= $h if$d < 1;($x1,$y1)=$self->_arrow_pos($x,$w,$y,$h,0,$d,$x + $w / 2,$y + $d);$svg .= $ar ."transform=\"translate($x1 $y1)rotate(-90)$scale\"/>\n"}if ($type & EDGE_END_S){my$d=$dis;$d += $ss/150 if$ss > 1;$d *= $h if$d < 1;($x1,$y1)=$self->_arrow_pos($x,$w,$y,$h,0,$d,$x + $w / 2,$y + $h - $d);$svg .= $ar ."transform=\"translate($x1 $y1)rotate(90)$scale\"/>\n"}if ($type & EDGE_END_W){my$d=$dis;$d += $ss/50 if$ss > 1;$d *= $w if$d < 1;($x1,$y1)=$self->_arrow_pos($x,$w,$y,$h,$d,0,$x + $d,$y + $h / 2);$svg .= $ar ."transform=\"translate($x1 $y1)rotate(180)$scale\"/>\n"}if ($type & EDGE_END_E){my$d=$dis;$d += $ss/50 if$ss > 1;$d *= $w if$d < 1;($x1,$y1)=$self->_arrow_pos($x,$w,$y,$h,$d,0,$x + $w - $d,$y + $h / 2);my$a=$ar ."x=\"$x1\" y=\"$y1\"/>\n";$a=$ar ."transform=\"translate($x1 $y1)$scale\"/>\n" if$scale;$svg .= $a}$svg}sub _svg_line_straight {my ($self,$x,$y,$type,$l,$r,$s,$e,$add,$lw)=@_;my$w=$self->{w};my$h=$self->{h};$add='' unless defined$add;my ($x1,$x2,$y1,$y2,$x3,$x4,$y3,$y4);$lw ||=1;my$ltype=$type & LINE_MASK;if ($ltype==LINE_HOR){$l += $s if$s;$r += $e if$e;$l *= $w - $lw if$l==0.5;$r *= $w - $lw if$r==0.5;$l *= $w if$l < 1;$r *= $w if$r < 1;$x1=$x + $l;$x2=$x + $w - $r;$y1=$y + $h / 2;$y2=$y1;if (($type & LINE_DOUBLE)!=0){$y1--;$y2--;$y3=$y1 + 2;$y4=$y3;$x1 += 1.5 if$s;$x2 -= 1.5 if$e;$x3=$x1;$x4=$x2}}else {$l += $s if$s;$r += $e if$e;$l *= $h - $lw if$l==0.5;$r *= $h - $lw if$r==0.5;$l *= $h if$l < 1;$r *= $h if$r < 1;$x1=$x + $w / 2;$x2=$x1;$y1=$y + $l;$y2=$y + $h - $r;if (($type & LINE_DOUBLE)!=0){$x1--;$x2--;$x3=$x1 + 2;$x4=$x3;$y1 += 1.5 if$s;$y2 -= 1.5 if$e;$y3=$y1;$y4=$y2}}($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4)=_sprintf($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4);my@r=("<line x1=\"$x1\" y1=\"$y1\" x2=\"$x2\" y2=\"$y2\" $add/>");push@r,"<line x1=\"$x3\" y1=\"$y3\" x2=\"$x4\" y2=\"$y4\" $add/>" if defined$x3;@r}sub _svg_path {my ($self,$x,$y,$s,$e,$add,$lw,@coords)=@_;my$em=$self->EM();my$w=$self->{w};my$h=$self->{h};$add='' unless defined$add;$lw ||=1;my$d='';while (@coords){my ($t,$xa,$ya)=splice (@coords,0,3);$xa *= $em;$xa += $w if$xa < 0;$ya *= $em;$ya += $h if$ya < 0;($xa,$ya)=_sprintf($xa+$x,$ya+$y);$d .= "$t$xa $ya"}"<path d=\"$d\"$add fill=\"none\" />"}sub _correct_size_svg {my ($self,$format)=@_;return if defined$self->{w};my$em=$self->EM();my$type=$self->{type}& EDGE_TYPE_MASK();my$dim=$dimensions->{$type}|| [3,3 ];($self->{w},$self->{h})=($dim->[0],$dim->[1]);if ($self->{type}& EDGE_LABEL_CELL){my ($w,$h)=$self->_svg_dimensions();$w=$w * 2 + 2 if ($type==EDGE_VER);$w=$w + 1 if ($type==EDGE_HOR);$self->{w}+= $w;my$lh=$self->LINE_HEIGHT();$self->{h}+= $h * ($lh - $em)+ 0.5;$self->{h}+= 2 if ($type==EDGE_HOR)}my$style=$self->{style};my$ac=$self->arrow_count();{my$flags=($self->{type}& EDGE_ARROW_MASK);my$start_bit=0x800;while ($start_bit > 0x8){my$a=$flags & $start_bit;$start_bit >>=1;if ($a!=0){my$ac=$arrow_correct->{$a};my$idx=0;while ($idx < @$ac){my ($where,$add)=($ac->[$idx],$ac->[$idx+1]);$idx +=2;$add += 0.5 if$style =~ /^wide/;$self->{$where}+= $add}}}}($self->{w},$self->{h})=($self->{w}* $em,$self->{h}* $em)}sub _svg_attributes {my ($self,$em)=@_;my$att={};$att->{stroke}=$self->color_attribute('color')|| 'black';$att->{'stroke-width'}=1;my$style=$self->{style};if ($style ne 'solid'){$att->{'stroke-dasharray'}=$strokes->{$style}if exists$strokes->{$style}}$att->{'stroke-width'}=3 if$style =~ /^bold/;$att->{'stroke-width'}=$em / 2 if$style =~ /^broad/;$att->{'stroke-width'}=$em if$style =~ /^wide/;$self->_adjust_dasharray($att);$att->{'arrow-style'}=$self->attribute('arrow-style')|| '';$att}sub _draw_edge_line_and_arrows {}sub as_svg {my ($self,$x,$y,$indent)=@_;my$em=$self->EM();my$lh=$self->LINE_HEIGHT();my$att=$self->_svg_attributes($em);my$title=_quote($self->title());$att->{title}=$title if$title ne '';my$att_txt=$self->_svg_attributes_as_txt($att);my$type=$self->{type}& EDGE_TYPE_MASK();my$end=$self->{type}& EDGE_END_MASK();my$start=$self->{type}& EDGE_START_MASK();my$svg="$indent<!-- " .edge_type($type)." -->\n";$svg .= $self->_svg_background($x,$y,$indent);my$style=$self->{style};return$svg if$style eq 'invisible';my$sw=$att->{'stroke-width'}|| 1;my$lines=[@{$draw_lines->{$type}}];my$cross=($self->{type}& EDGE_TYPE_MASK)==EDGE_CROSS;my$add;my@line_tags;while (@$lines > 0){my ($type)=shift @$lines;my@coords;if ($type!=LINE_PATH){@coords=splice (@$lines,0,2)}else {@coords=@$lines;@$lines=()}my ($s,$e)=(undef,undef);if ($cross && $type==LINE_VER){$style=$self->{style_ver};my$sn=1;$sn=3 if$style =~ /^bold/;$sn=$em / 2 if$style =~ /^broad/;$sn=$em if$style =~ /^wide/;$add=' stroke="' .$self->{color_ver}.'"' if$self->{color_ver};$add .= ' stroke-dasharray="' .($strokes->{$style}||'1 0').'"';$add .= ' stroke-width="' .$sn .'"' if$sn ne $sw;$add =~ s/^\s//}my$bw=$self->{w}* 0.1;my$bwe=$self->{w}* 0.1 + $sw;my$bh=$em * 0.5;my$bhe=$self->{h}* 0.1 + $sw * 1;if ($type==LINE_VER){$e=$bhe if ($end & EDGE_END_S);$s=$bhe if ($end & EDGE_END_N);$e=$bh if ($start & EDGE_START_S);$s=$bh if ($start & EDGE_START_N)}else {$e=$bwe if ($end & EDGE_END_E);$s=$bwe if ($end & EDGE_END_W);$e=$bw if ($start & EDGE_START_E);$s=$bw if ($start & EDGE_START_W)}if ($type!=LINE_PATH){$type += LINE_DOUBLE if$style =~ /^double/;push@line_tags,$self->_svg_line_straight($x,$y,$type,$coords[0],$coords[1],$s,$e,$add,$sw)}else {push@line_tags,$self->_svg_path($x,$y,$s,$e,$add,$sw,@coords)}}$lines='';my$p="\n";my$i=$indent;if (@line_tags > 1){$lines="$indent<g$att_txt>\n";$i .= $indent;$p="\n$indent</g>\n"}else {$line_tags[0]=~ s/ \/>/$att_txt \/>/}$lines .= $i .join("\n$i",@line_tags).$p;$svg .= $lines;my$arrow=$end;my$scale=$att->{'stroke-width'}||1;$svg .= $self->_svg_arrow($att,$x,$y,$arrow,$indent,$scale)unless$arrow==0 || $self->{edge}->undirected();if (($self->{type}& EDGE_LABEL_CELL())){my$label=$self->label();$label='' unless defined$label;if ($label ne ''){my ($w,$h)=$self->dimensions();my$em2=$em / 2;my$xt=int($x + $self->{w}/ 2);my$yt=int($y + $self->{h}/ 2 - $lh / 3 - ($h - 1)* $lh);my$style='';my$stype=$self->{type};if ($type==EDGE_HOR){$xt=$x + 2 * $em;my$ac=$self->arrow_count();my$style=$self->{style};if ($ac==1){my$shift=0.2;$shift=0.5 if$style =~ /^broad/;$shift=0.8 if$style =~ /^wide/;$shift=-$shift if ($end & EDGE_END_E)!=0;$xt=int($xt + 2 * $em * $shift)}}elsif ($type==EDGE_VER){$xt=$xt + $em2;my ($w,$h)=$self->dimensions();$yt=int($y + $self->{h}/ 2 - $h * $em2 + $em2);$style=' text-anchor="start"'}else {$yt += $em2 if$stype & EDGE_START_N;$yt -= $em2 if$stype & EDGE_START_S;$yt += $em if ($h > 1)&& ($stype & EDGE_START_S);$yt=int($y + $self->{h}/ 2)if ($stype & EDGE_START_E)|| ($stype & EDGE_START_W);$xt=int($x + $em * 2)if ($stype & EDGE_START_E);$xt=int($x + $self->{w}- 2*$em)if ($stype & EDGE_START_W);$style=' text-anchor="start"';$style=' text-anchor="middle"' if ($stype & EDGE_START_N)|| ($stype & EDGE_START_S);$style=' text-anchor="end"' if ($stype & EDGE_START_W)}my$color=$self->raw_attribute('labelcolor');$color=$self->color_attribute('color')if!defined$color;my$text=$self->_svg_text($color,$indent,$xt,$yt,$style,$xt,$x + $self->{w}- $em);my$link=_quote($self->link());$text=Graph::Easy::Node::_link($self,$indent.$text,$indent,$title,$link)if$link ne '';$svg .= $text}}$svg .= "\n" unless$svg =~ /\n\n\z/;$svg}
GRAPH_EASY_AS_SVG

$fatpacked{"Graph/Easy/As_txt.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_AS_TXT';
  package Graph::Easy::As_txt;$VERSION='0.76';package Graph::Easy;use strict;use warnings;sub _as_txt {my ($self)=@_;$self->_assign_ranks();my$txt='';my$att=$self->{att};for my$class (sort keys %$att){my$out=$self->_remap_attributes($class,$att->{$class},{},'noquote','encode');my$att='';for my$atr (sort keys %$out){next if$atr =~ /^border/;$att .= "  $atr: $out->{$atr};\n"}if ($class !~ /^edge/){my$border=$self->border_attribute($class)|| '';$border='' if$self->default_attribute($class,'border')=~ /^$border/;$att .= "  border: $border;\n" if$border ne ''}if ($att ne ''){if ($att !~ /\n.*\n/ && length($att)< 40){$att =~ s/\n/ /;$att =~ s/^  / /}else {$att="\n$att"}$txt .= "$class {$att}\n"}}$txt .= "\n" if$txt ne '';my@nodes=$self->sorted_nodes('name','id');my$count=0;for my$n (@nodes){$n->{_p}=undef;my$att=$n->attributes_as_txt();if ($att ne ''){$n->{_p}=1;$count++;$txt .= $n->as_pure_txt().$att ."\n"}}$txt .= "\n" if$count > 0;for my$gn (sort keys %{$self->{groups}}){my$group=$self->{groups}->{$gn};$txt .= $group->as_txt();$count++}@nodes=$self->sorted_nodes('rank','name');for my$n (@nodes){my@out=$n->sorted_successors();my$first=$n->as_pure_txt();if (defined$n->{autosplit}|| ((@out==0)&& ((scalar$n->predecessors()|| 0)==0))){next if exists$n->{autosplit}&&!defined$n->{autosplit};$txt .= $first ."\n" unless defined$n->{_p}}$first=$n->_as_part_txt();for my$other (@out){my@edges=$n->edges_to($other);for my$edge (sort {$a->{id}<=> $b->{id}}@edges){$txt .= $first .$edge->as_txt().$other->_as_part_txt()."\n"}}}for my$n (@nodes){delete$n->{_p}}$txt}package Graph::Easy::Group;use strict;sub as_txt {my$self=shift;my$n='';if (!$self->isa('Graph::Easy::Group::Anon')){$n=$self->{name};$n =~ s/([\[\]\(\)\{\}\#])/\\$1/g;$n=' ' .$n}my$txt="($n";$n=$self->{nodes};$txt .= (keys %$n > 0 ? "\n" : ' ');for my$name (sort keys %$n){$n->{$name}->{_p}=1;$txt .= '  ' .$n->{$name}->as_pure_txt()."\n"}$txt .= ")" .$self->attributes_as_txt()."\n\n";$txt}package Graph::Easy::Node;use strict;sub attributes_as_txt {my ($self,$remap)=@_;if (exists$self->{autosplit}){return '' unless defined$self->{autosplit}}my$att='';my$class=$self->class();my$g=$self->{graph};my$attributes=$self->{att};if (exists$self->{autosplit}){my$basename=$self->{autosplit_basename};$attributes={};my$parts=$self->{autosplit_parts};my$names={};for my$child ($self,@$parts){for my$k (sort keys %{$child->{att}}){$names->{$k}=undef}}for my$k (sort keys %$names){next if$k eq 'basename';my$val=$self->{att}->{$k};$val='' unless defined$val;my$first=$val;my$not_equal=0;$val .= '|';for my$child (@$parts){my$v=$child->{att}->{$k};$v='' if!defined$v;$not_equal ++ if$v ne $first;$val .= $v .'|'}$val=$first if$not_equal==0;$val =~ s/\|+\z/\|/;$val =~ s/\|\z// if$val =~ /\|.*\|/;$attributes->{$k}=$val unless$val eq '|'}$attributes->{basename}=$self->{att}->{basename}if defined$self->{att}->{basename}}my$new=$g->_remap_attributes($self,$attributes,$remap,'noquote','encode');delete$new->{group};$new->{group}=$self->{group}->{name}if$self->isa('Graph::Easy::Group')&& exists$self->{group};if (defined$self->{origin}){$new->{origin}=$self->{origin}->{name};$new->{offset}=join(',',$self->offset())}if (exists$new->{columns}){$new->{size}=($new->{columns}||1).',' .($new->{rows}||1);delete$new->{rows};delete$new->{columns};delete$new->{size}if$new->{size}eq '1,1'}for my$atr (sort keys %$new){next if$atr =~ /^border/;$att .= "$atr: $new->{$atr}; "}if (!$self->isa_cell()){my$border;if (!exists$self->{autosplit}){$border=$self->border_attribute()}else {$border=Graph::Easy::_border_attribute($attributes->{borderstyle}||'',$attributes->{borderwidth}||'',$attributes->{bordercolor}||'')}$border='' if ref$g && $g->attribute($class,'border')eq $border;$att .= "border: $border; " if$border ne ''}my$c='';$c=$1 if$class =~ /\.(\w+)/;$c='' if ref($self->{group})&& $self->{group}->attribute('nodeclass')eq $c;$att .= "class: $c; " if$c ne '' && $c ne 'anon';$att=' { ' .$att .'}' if$att ne '';$att}sub _as_part_txt {my$self=shift;my$name=$self->{name};$name =~ s/([\[\]\|\{\}\#])/\\$1/g;'[ ' .$name .' ]'}sub as_pure_txt {my$self=shift;if (exists$self->{autosplit}&& defined$self->{autosplit}){my$name=$self->{autosplit};$name =~ s/([\[\]\{\}\#])/\\$1/g;return '[ '.$name .' ]'}my$name=$self->{name};$name =~ s/([\[\]\|\{\}\#])/\\$1/g;'[ ' .$name .' ]'}sub as_txt {my$self=shift;if (exists$self->{autosplit}){return '' unless defined$self->{autosplit};my$name=$self->{autosplit};$name =~ s/([\[\]\{\}\#])/\\$1/g;return '[ ' .$name .' ]'}my$name=$self->{name};$name =~ s/([\[\]\|\{\}\#])/\\$1/g;'[ ' .$name .' ]' .$self->attributes_as_txt()}package Graph::Easy::Edge;my$styles={solid=>'--',dotted=>'..',double=>'==','double-dash'=>'= ',dashed=>'- ','dot-dash'=>'.-','dot-dot-dash'=>'..-',wave=>'~~',};sub _as_txt {my$self=shift;my$n=$self->{att}->{label};$n='' unless defined$n;my$left=' ';$left=' <' if$self->{bidirectional};my$right='> ';$right=' ' if$self->{undirected};my$s=$self->style()|| 'solid';my$style='--';my$suppress={all=>{label=>undef }};if ($s =~ /^(bold|bold-dash|broad|wide|invisible)\z/){$style='--'}else {$suppress->{all}->{style}=undef;$style=$styles->{$s };if (!defined$style){require Carp;Carp::confess ("Unknown edge style '$s'\n")}}$n=$style ." $n " if$n ne '';$style=$style .$style if$self->{undirected}&& substr($style,1,1)eq ' ';my$a=$self->attributes_as_txt($suppress).' ';$a =~ s/^\s//;$left .$n .$style .$right .$a}1;
GRAPH_EASY_AS_TXT

$fatpacked{"Graph/Easy/As_vcg.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_AS_VCG';
  package Graph::Easy::As_vcg;$VERSION='0.76';package Graph::Easy;use strict;use warnings;my$vcg_remap={node=>{align=>\&_vcg_remap_align,autolabel=>undef,autolink=>undef,autotitle=>undef,background=>undef,basename=>undef,class=>undef,colorscheme=>undef,columns=>undef,flow=>undef,fontsize=>undef,format=>undef,group=>undef,id=>undef,link=>undef,linkbase=>undef,offset=>undef,origin=>undef,pointstyle=>undef,rank=>'level',rotate=>undef,rows=>undef,shape=>\&_vcg_remap_shape,size=>undef,textstyle=>undef,textwrap=>undef,title=>undef,},edge=>{color=>'color',align=>undef,arrowshape=>undef,arrowstyle=>undef,autojoin=>undef,autolabel=>undef,autolink=>undef,autosplit=>undef,autotitle=>undef,border=>undef,bordercolor=>undef,borderstyle=>undef,borderwidth=>undef,colorscheme=>undef,end=>undef,fontsize=>undef,format=>undef,id=>undef,labelcolor=>'textcolor',link=>undef,linkbase=>undef,minlen=>undef,start=>undef,style=>'linestyle',textstyle=>undef,textwrap=>undef,title=>undef,},graph=>{align=>\&_vcg_remap_align,flow=>\&_vcg_remap_flow,label=>'title',type=>undef,},group=>{},all=>{background=>undef,color=>'textcolor',comment=>undef,fill=>'color',font=>'fontname',},always=>{},x=>\&_remap_custom_vcg_attributes,};sub _remap_custom_vcg_attributes {my ($self,$name,$value)=@_;return (undef,undef)unless$name =~ /^x-vcg-/;$name =~ s/^x-vcg-//;($name,$value)}my$vcg_shapes={rect=>'box',diamond=>'rhomb',triangle=>'triangle',invtriangle=>'triangle',ellipse=>'ellipse',circle=>'circle',hexagon=>'hexagon',trapezium=>'trapeze',invtrapezium=>'uptrapeze',invparallelogram=>'lparallelogram',parallelogram=>'rparallelogram',};sub _vcg_remap_shape {my ($self,$name,$shape)=@_;return ('invisible','yes')if$shape eq 'invisible';('shape',$vcg_shapes->{$shape}|| 'box')}sub _vcg_remap_align {my ($self,$name,$style)=@_;$style .= '_justify' unless$style eq 'center';('textmode',$style)}my$vcg_flow={'south'=>'top_to_bottom','north'=>'bottom_to_top','down'=>'top_to_bottom','up'=>'bottom_to_top','east'=>'left_to_right','west'=>'right_to_left','right'=>'left_to_right','left'=>'right_to_left',};sub _vcg_remap_flow {my ($self,$name,$style)=@_;('orientation',$vcg_flow->{$style}|| 'top_to_bottom')}sub _class_attributes_as_vcg {my ($self,$a,$class)=@_;my$att='';$class='' if$class eq 'graph';$class .= '.' if$class ne '';for my$atr (sort keys %$a){my$v=$a->{$atr};$v =~ s/"/\\"/g;$v='"' .$v .'"' unless$v =~ /^[0-9]+\z/;$att .= "  $class$atr: $v\n"}$att =~ s/,\s$//;$att="\n$att" unless$att eq '';$att}sub _generate_vcg_edge {my ($self,$e,$indent)=@_;return '' if $e->{from}->isa('Graph::Easy::Group')|| $e->{to}->isa('Graph::Easy::Group');my$edge_att=$e->attributes_as_vcg();$e->{_p}=undef;"  edge:$edge_att\n"}use Graph::Easy::Util qw(ord_values);sub _as_vcg {my ($self)=@_;$self->{_vcg_edge_classes}={};for my$e (ord_values ($self->{edges})){my$class=$e->sub_class();$self->{_vcg_edge_classes}->{$class}=undef if defined$class && $class ne ''}my$class_names='';if (keys %{$self->{_vcg_edge_classes}}> 0){my$i=1;$class_names="\n";for my$ec (sort keys %{$self->{_vcg_edge_classes}}){$self->{_vcg_edge_classes}->{$ec}=$i;$class_names .= "  classname $i: \"$ec\"\n";$i++}}my$label=$self->label();my$t='';$t="\n  title: \"$label\"" if$label ne '';my$txt="graph: {$t\n\n" ."  // Generated by Graph::Easy $Graph::Easy::VERSION" ." at " .scalar localtime()."\n" .$class_names;my$groups=$self->groups();$self->{_vcg_invis}={};$self->{_vcg_invis_id}='joint0';my$atts=$self->{att};for my$class (qw/edge graph node/){next if$class =~ /\./;my$out=$self->_remap_attributes($class,$atts->{$class},$vcg_remap,'noquote');$txt .= $self->_class_attributes_as_vcg($out,$class)}$txt .= "\n" if$txt ne '';$self->_edges_into_groups()if$groups > 0;my$indent='    ';for my$group (sort {$a->{name}cmp $b->{name}}values %{$self->{groups}}){my$name=$group->{name};$name =~ s/([\[\]\(\)\{\}\#"])/\\$1/g;my$copy={};my$attribs=$group->get_attributes();for my$a (keys %$attribs){$copy->{$a}=$attribs->{$a}}my$out={};$out->{fillcolor}='#a0d0ff' unless defined$out->{fillcolor};my$att='';for my$atr (reverse sort keys %$out){my$v=$out->{$atr};$v='"' .$v .'"';$att .= "    $atr: $v\n"}$txt .= $att ."\n" if$att ne '';$txt .= "  }\n"}my$root=$self->attribute('root');$root='' unless defined$root;my$count=0;for my$n (sort {$a->{name}cmp $b->{name}}values %{$self->{nodes}}){next if exists$n->{_p};my$att=$n->attributes_as_vcg($root);if ($att ne ''){$n->{_p}=undef;$count++;$txt .= "  node:" .$att ."\n"}}$txt .= "\n" if$count > 0;my@nodes=$self->sorted_nodes();for my$n (@nodes){my@out=$n->successors();my$first=$n->as_vcg_txt();if ((@out==0)&& ((scalar$n->predecessors()|| 0)==0)){$txt .= "  node: { title: " .$first ." }\n" unless exists$n->{_p}}for my$other (reverse@out){my@edges=$n->edges_to($other);for my$e (@edges){next if exists$e->{_p};$txt .= $self->_generate_vcg_edge($e,'  ')}}}for my$n (ord_values ($self->{nodes}),ord_values ($self->{edges})){delete$n->{_p}}delete$self->{_vcg_invis};delete$self->{_vcg_invis_id};delete$self->{_vcg_edge_classes};$txt ."\n}\n"}package Graph::Easy::Node;sub attributes_as_vcg {my ($self,$root)=@_;$root='' unless defined$root;my$att='';my$class=$self->class();return '' unless ref$self->{graph};my$g=$self->{graph};my$a=$self->raw_attributes();my$attr=$self->{att};my$base_class=$class;$base_class =~ s/\..*//;my$list=$vcg_remap->{always}->{$class}|| $vcg_remap->{always}->{$base_class};for my$name (@$list){if (ref($vcg_remap->{$base_class}->{$name})|| ref($vcg_remap->{all}->{$name})){$a->{$name}=$attr->{$name}}else {$a->{$name}=$attr->{$name};$a->{$name}=$self->attribute($name)unless defined$a->{$name}&& $a->{$name}ne 'inherit'}}$a=$g->_remap_attributes($self,$a,$vcg_remap,'noquote');if ($self->isa('Graph::Easy::Edge')){$a->{sourcename}=$self->{from}->{name};$a->{targetname}=$self->{to}->{name};my$class=$self->sub_class();$a->{class}=$self->{graph}->{_vcg_edge_classes}->{$class }if defined$class && $class ne ''}else {$a->{title}=$self->{name}}delete$a->{label}if!$self->isa('Graph::Easy::Edge')&& exists$a->{label}&& $a->{label}eq $self->{name};if ($self->{bidirectional}){delete$a->{dir};my ($n,$s)=Graph::Easy::_graphviz_remap_arrow_style($self,'',$self->attribute('arrowstyle'));$a->{arrowhead}=$s;$a->{arrowtail}=$s}if ($self->{undirected}){delete$a->{dir};$a->{arrowhead}='none';$a->{arrowtail}='none'}if (!$self->isa('Graph::Easy::Edge')){my$style=$self->attribute('borderstyle');$a->{peripheries}=2 if$style =~ /^double/}my$shape=$a->{shape}|| 'rect';if ($class =~ /node/ && $shape eq 'plaintext'){my$p=$self->parent();$a->{fillcolor}=$p->attribute('fill');$a->{fillcolor}='white' if$a->{fillcolor}eq 'inherit'}$shape=$self->attribute('shape')unless$self->isa_cell();if ($shape eq 'point'){require Graph::Easy::As_ascii;my$style=$self->_point_style($self->attribute('pointstyle'));$a->{label}=$style;$a->{width}=0,$a->{height}=0 if$style eq ''}if ($shape eq 'invisible'){$a->{label}=' '}$a->{rank}='0' if$root ne '' && $root eq $self->{name};for my$atr (sort keys %$a){my$v=$a->{$atr};$v =~ s/"/\\"/g;$v='"' .$v .'"' unless$v =~ /^[0-9]+\z/;$att .= "$atr: $v "}$att =~ s/,\s$//;$att=' { ' .$att .'}' if$att ne '';$att}sub as_vcg_txt {my$self=shift;my$name=$self->{name};$name =~ s/([\[\]\(\)\{\}"])/\\$1/g;'"' .$name .'"'}1;
GRAPH_EASY_AS_VCG

$fatpacked{"Graph/Easy/Attributes.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_ATTRIBUTES';
  package Graph::Easy::Attributes;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use utf8;my$att_aliases={'auto-label'=>'autolabel','auto-link'=>'autolink','auto-title'=>'autotitle','arrow-style'=>'arrowstyle','arrow-shape'=>'arrowshape','border-color'=>'bordercolor','border-style'=>'borderstyle','border-width'=>'borderwidth','font-size'=>'fontsize','label-color'=>'labelcolor','label-pos'=>'labelpos','text-style'=>'textstyle','text-wrap'=>'textwrap','point-style'=>'pointstyle','point-shape'=>'pointshape',};sub _att_aliases {$att_aliases}my$color_names={w3c=>{inherit=>'inherit',aliceblue=>'#f0f8ff',antiquewhite=>'#faebd7',aquamarine=>'#7fffd4',aqua=>'#00ffff',azure=>'#f0ffff',beige=>'#f5f5dc',bisque=>'#ffe4c4',black=>'#000000',blanchedalmond=>'#ffebcd',blue=>'#0000ff',blueviolet=>'#8a2be2',brown=>'#a52a2a',burlywood=>'#deb887',cadetblue=>'#5f9ea0',chartreuse=>'#7fff00',chocolate=>'#d2691e',coral=>'#ff7f50',cornflowerblue=>'#6495ed',cornsilk=>'#fff8dc',crimson=>'#dc143c',cyan=>'#00ffff',darkblue=>'#00008b',darkcyan=>'#008b8b',darkgoldenrod=>'#b8860b',darkgray=>'#a9a9a9',darkgreen=>'#006400',darkgrey=>'#a9a9a9',darkkhaki=>'#bdb76b',darkmagenta=>'#8b008b',darkolivegreen=>'#556b2f',darkorange=>'#ff8c00',darkorchid=>'#9932cc',darkred=>'#8b0000',darksalmon=>'#e9967a',darkseagreen=>'#8fbc8f',darkslateblue=>'#483d8b',darkslategray=>'#2f4f4f',darkslategrey=>'#2f4f4f',darkturquoise=>'#00ced1',darkviolet=>'#9400d3',deeppink=>'#ff1493',deepskyblue=>'#00bfff',dimgray=>'#696969',dodgerblue=>'#1e90ff',firebrick=>'#b22222',floralwhite=>'#fffaf0',forestgreen=>'#228b22',fuchsia=>'#ff00ff',gainsboro=>'#dcdcdc',ghostwhite=>'#f8f8ff',goldenrod=>'#daa520',gold=>'#ffd700',gray=>'#808080',green=>'#008000',greenyellow=>'#adff2f',grey=>'#808080',honeydew=>'#f0fff0',hotpink=>'#ff69b4',indianred=>'#cd5c5c',indigo=>'#4b0082',ivory=>'#fffff0',khaki=>'#f0e68c',lavenderblush=>'#fff0f5',lavender=>'#e6e6fa',lawngreen=>'#7cfc00',lemonchiffon=>'#fffacd',lightblue=>'#add8e6',lightcoral=>'#f08080',lightcyan=>'#e0ffff',lightgoldenrodyellow=>'#fafad2',lightgray=>'#d3d3d3',lightgreen=>'#90ee90',lightgrey=>'#d3d3d3',lightpink=>'#ffb6c1',lightsalmon=>'#ffa07a',lightseagreen=>'#20b2aa',lightskyblue=>'#87cefa',lightslategray=>'#778899',lightslategrey=>'#778899',lightsteelblue=>'#b0c4de',lightyellow=>'#ffffe0',limegreen=>'#32cd32',lime=>'#00ff00',linen=>'#faf0e6',magenta=>'#ff00ff',maroon=>'#800000',mediumaquamarine=>'#66cdaa',mediumblue=>'#0000cd',mediumorchid=>'#ba55d3',mediumpurple=>'#9370db',mediumseagreen=>'#3cb371',mediumslateblue=>'#7b68ee',mediumspringgreen=>'#00fa9a',mediumturquoise=>'#48d1cc',mediumvioletred=>'#c71585',midnightblue=>'#191970',mintcream=>'#f5fffa',mistyrose=>'#ffe4e1',moccasin=>'#ffe4b5',navajowhite=>'#ffdead',navy=>'#000080',oldlace=>'#fdf5e6',olivedrab=>'#6b8e23',olive=>'#808000',orangered=>'#ff4500',orange=>'#ffa500',orchid=>'#da70d6',palegoldenrod=>'#eee8aa',palegreen=>'#98fb98',paleturquoise=>'#afeeee',palevioletred=>'#db7093',papayawhip=>'#ffefd5',peachpuff=>'#ffdab9',peru=>'#cd853f',pink=>'#ffc0cb',plum=>'#dda0dd',powderblue=>'#b0e0e6',purple=>'#800080',red=>'#ff0000',rosybrown=>'#bc8f8f',royalblue=>'#4169e1',saddlebrown=>'#8b4513',salmon=>'#fa8072',sandybrown=>'#f4a460',seagreen=>'#2e8b57',seashell=>'#fff5ee',sienna=>'#a0522d',silver=>'#c0c0c0',skyblue=>'#87ceeb',slateblue=>'#6a5acd',slategray=>'#708090',slategrey=>'#708090',snow=>'#fffafa',springgreen=>'#00ff7f',steelblue=>'#4682b4',tan=>'#d2b48c',teal=>'#008080',thistle=>'#d8bfd8',tomato=>'#ff6347',turquoise=>'#40e0d0',violet=>'#ee82ee',wheat=>'#f5deb3',white=>'#ffffff',whitesmoke=>'#f5f5f5',yellowgreen=>'#9acd32',yellow=>'#ffff00',},x11=>{inherit=>'inherit',aliceblue=>'#f0f8ff',antiquewhite=>'#faebd7',antiquewhite1=>'#ffefdb',antiquewhite2=>'#eedfcc',antiquewhite3=>'#cdc0b0',antiquewhite4=>'#8b8378',aquamarine=>'#7fffd4',aquamarine1=>'#7fffd4',aquamarine2=>'#76eec6',aquamarine3=>'#66cdaa',aquamarine4=>'#458b74',azure=>'#f0ffff',azure1=>'#f0ffff',azure2=>'#e0eeee',azure3=>'#c1cdcd',azure4=>'#838b8b',beige=>'#f5f5dc',bisque=>'#ffe4c4',bisque1=>'#ffe4c4',bisque2=>'#eed5b7',bisque3=>'#cdb79e',bisque4=>'#8b7d6b',black=>'#000000',blanchedalmond=>'#ffebcd',blue=>'#0000ff',blue1=>'#0000ff',blue2=>'#0000ee',blue3=>'#0000cd',blue4=>'#00008b',blueviolet=>'#8a2be2',brown=>'#a52a2a',brown1=>'#ff4040',brown2=>'#ee3b3b',brown3=>'#cd3333',brown4=>'#8b2323',burlywood=>'#deb887',burlywood1=>'#ffd39b',burlywood2=>'#eec591',burlywood3=>'#cdaa7d',burlywood4=>'#8b7355',cadetblue=>'#5f9ea0',cadetblue1=>'#98f5ff',cadetblue2=>'#8ee5ee',cadetblue3=>'#7ac5cd',cadetblue4=>'#53868b',chartreuse=>'#7fff00',chartreuse1=>'#7fff00',chartreuse2=>'#76ee00',chartreuse3=>'#66cd00',chartreuse4=>'#458b00',chocolate=>'#d2691e',chocolate1=>'#ff7f24',chocolate2=>'#ee7621',chocolate3=>'#cd661d',chocolate4=>'#8b4513',coral=>'#ff7f50',coral1=>'#ff7256',coral2=>'#ee6a50',coral3=>'#cd5b45',coral4=>'#8b3e2f',cornflowerblue=>'#6495ed',cornsilk=>'#fff8dc',cornsilk1=>'#fff8dc',cornsilk2=>'#eee8cd',cornsilk3=>'#cdc8b1',cornsilk4=>'#8b8878',crimson=>'#dc143c',cyan=>'#00ffff',cyan1=>'#00ffff',cyan2=>'#00eeee',cyan3=>'#00cdcd',cyan4=>'#008b8b',darkgoldenrod=>'#b8860b',darkgoldenrod1=>'#ffb90f',darkgoldenrod2=>'#eead0e',darkgoldenrod3=>'#cd950c',darkgoldenrod4=>'#8b6508',darkgreen=>'#006400',darkkhaki=>'#bdb76b',darkolivegreen=>'#556b2f',darkolivegreen1=>'#caff70',darkolivegreen2=>'#bcee68',darkolivegreen3=>'#a2cd5a',darkolivegreen4=>'#6e8b3d',darkorange=>'#ff8c00',darkorange1=>'#ff7f00',darkorange2=>'#ee7600',darkorange3=>'#cd6600',darkorange4=>'#8b4500',darkorchid=>'#9932cc',darkorchid1=>'#bf3eff',darkorchid2=>'#b23aee',darkorchid3=>'#9a32cd',darkorchid4=>'#68228b',darksalmon=>'#e9967a',darkseagreen=>'#8fbc8f',darkseagreen1=>'#c1ffc1',darkseagreen2=>'#b4eeb4',darkseagreen3=>'#9bcd9b',darkseagreen4=>'#698b69',darkslateblue=>'#483d8b',darkslategray=>'#2f4f4f',darkslategray1=>'#97ffff',darkslategray2=>'#8deeee',darkslategray3=>'#79cdcd',darkslategray4=>'#528b8b',darkslategrey=>'#2f4f4f',darkturquoise=>'#00ced1',darkviolet=>'#9400d3',deeppink=>'#ff1493',deeppink1=>'#ff1493',deeppink2=>'#ee1289',deeppink3=>'#cd1076',deeppink4=>'#8b0a50',deepskyblue=>'#00bfff',deepskyblue1=>'#00bfff',deepskyblue2=>'#00b2ee',deepskyblue3=>'#009acd',deepskyblue4=>'#00688b',dimgray=>'#696969',dimgrey=>'#696969',dodgerblue=>'#1e90ff',dodgerblue1=>'#1e90ff',dodgerblue2=>'#1c86ee',dodgerblue3=>'#1874cd',dodgerblue4=>'#104e8b',firebrick=>'#b22222',firebrick1=>'#ff3030',firebrick2=>'#ee2c2c',firebrick3=>'#cd2626',firebrick4=>'#8b1a1a',floralwhite=>'#fffaf0',forestgreen=>'#228b22',gainsboro=>'#dcdcdc',ghostwhite=>'#f8f8ff',gold=>'#ffd700',gold1=>'#ffd700',gold2=>'#eec900',gold3=>'#cdad00',gold4=>'#8b7500',goldenrod=>'#daa520',goldenrod1=>'#ffc125',goldenrod2=>'#eeb422',goldenrod3=>'#cd9b1d',goldenrod4=>'#8b6914',gray=>'#c0c0c0',gray0=>'#000000',gray1=>'#030303',gray2=>'#050505',gray3=>'#080808',gray4=>'#0a0a0a',gray5=>'#0d0d0d',gray6=>'#0f0f0f',gray7=>'#121212',gray8=>'#141414',gray9=>'#171717',gray10=>'#1a1a1a',gray11=>'#1c1c1c',gray12=>'#1f1f1f',gray13=>'#212121',gray14=>'#242424',gray15=>'#262626',gray16=>'#292929',gray17=>'#2b2b2b',gray18=>'#2e2e2e',gray19=>'#303030',gray20=>'#333333',gray21=>'#363636',gray22=>'#383838',gray23=>'#3b3b3b',gray24=>'#3d3d3d',gray25=>'#404040',gray26=>'#424242',gray27=>'#454545',gray28=>'#474747',gray29=>'#4a4a4a',gray30=>'#4d4d4d',gray31=>'#4f4f4f',gray32=>'#525252',gray33=>'#545454',gray34=>'#575757',gray35=>'#595959',gray36=>'#5c5c5c',gray37=>'#5e5e5e',gray38=>'#616161',gray39=>'#636363',gray40=>'#666666',gray41=>'#696969',gray42=>'#6b6b6b',gray43=>'#6e6e6e',gray44=>'#707070',gray45=>'#737373',gray46=>'#757575',gray47=>'#787878',gray48=>'#7a7a7a',gray49=>'#7d7d7d',gray50=>'#7f7f7f',gray51=>'#828282',gray52=>'#858585',gray53=>'#878787',gray54=>'#8a8a8a',gray55=>'#8c8c8c',gray56=>'#8f8f8f',gray57=>'#919191',gray58=>'#949494',gray59=>'#969696',gray60=>'#999999',gray61=>'#9c9c9c',gray62=>'#9e9e9e',gray63=>'#a1a1a1',gray64=>'#a3a3a3',gray65=>'#a6a6a6',gray66=>'#a8a8a8',gray67=>'#ababab',gray68=>'#adadad',gray69=>'#b0b0b0',gray70=>'#b3b3b3',gray71=>'#b5b5b5',gray72=>'#b8b8b8',gray73=>'#bababa',gray74=>'#bdbdbd',gray75=>'#bfbfbf',gray76=>'#c2c2c2',gray77=>'#c4c4c4',gray78=>'#c7c7c7',gray79=>'#c9c9c9',gray80=>'#cccccc',gray81=>'#cfcfcf',gray82=>'#d1d1d1',gray83=>'#d4d4d4',gray84=>'#d6d6d6',gray85=>'#d9d9d9',gray86=>'#dbdbdb',gray87=>'#dedede',gray88=>'#e0e0e0',gray89=>'#e3e3e3',gray90=>'#e5e5e5',gray91=>'#e8e8e8',gray92=>'#ebebeb',gray93=>'#ededed',gray94=>'#f0f0f0',gray95=>'#f2f2f2',gray96=>'#f5f5f5',gray97=>'#f7f7f7',gray98=>'#fafafa',gray99=>'#fcfcfc',gray100=>'#ffffff',green=>'#00ff00',green1=>'#00ff00',green2=>'#00ee00',green3=>'#00cd00',green4=>'#008b00',greenyellow=>'#adff2f',grey=>'#c0c0c0',grey0=>'#000000',grey1=>'#030303',grey2=>'#050505',grey3=>'#080808',grey4=>'#0a0a0a',grey5=>'#0d0d0d',grey6=>'#0f0f0f',grey7=>'#121212',grey8=>'#141414',grey9=>'#171717',grey10=>'#1a1a1a',grey11=>'#1c1c1c',grey12=>'#1f1f1f',grey13=>'#212121',grey14=>'#242424',grey15=>'#262626',grey16=>'#292929',grey17=>'#2b2b2b',grey18=>'#2e2e2e',grey19=>'#303030',grey20=>'#333333',grey21=>'#363636',grey22=>'#383838',grey23=>'#3b3b3b',grey24=>'#3d3d3d',grey25=>'#404040',grey26=>'#424242',grey27=>'#454545',grey28=>'#474747',grey29=>'#4a4a4a',grey30=>'#4d4d4d',grey31=>'#4f4f4f',grey32=>'#525252',grey33=>'#545454',grey34=>'#575757',grey35=>'#595959',grey36=>'#5c5c5c',grey37=>'#5e5e5e',grey38=>'#616161',grey39=>'#636363',grey40=>'#666666',grey41=>'#696969',grey42=>'#6b6b6b',grey43=>'#6e6e6e',grey44=>'#707070',grey45=>'#737373',grey46=>'#757575',grey47=>'#787878',grey48=>'#7a7a7a',grey49=>'#7d7d7d',grey50=>'#7f7f7f',grey51=>'#828282',grey52=>'#858585',grey53=>'#878787',grey54=>'#8a8a8a',grey55=>'#8c8c8c',grey56=>'#8f8f8f',grey57=>'#919191',grey58=>'#949494',grey59=>'#969696',grey60=>'#999999',grey61=>'#9c9c9c',grey62=>'#9e9e9e',grey63=>'#a1a1a1',grey64=>'#a3a3a3',grey65=>'#a6a6a6',grey66=>'#a8a8a8',grey67=>'#ababab',grey68=>'#adadad',grey69=>'#b0b0b0',grey70=>'#b3b3b3',grey71=>'#b5b5b5',grey72=>'#b8b8b8',grey73=>'#bababa',grey74=>'#bdbdbd',grey75=>'#bfbfbf',grey76=>'#c2c2c2',grey77=>'#c4c4c4',grey78=>'#c7c7c7',grey79=>'#c9c9c9',grey80=>'#cccccc',grey81=>'#cfcfcf',grey82=>'#d1d1d1',grey83=>'#d4d4d4',grey84=>'#d6d6d6',grey85=>'#d9d9d9',grey86=>'#dbdbdb',grey87=>'#dedede',grey88=>'#e0e0e0',grey89=>'#e3e3e3',grey90=>'#e5e5e5',grey91=>'#e8e8e8',grey92=>'#ebebeb',grey93=>'#ededed',grey94=>'#f0f0f0',grey95=>'#f2f2f2',grey96=>'#f5f5f5',grey97=>'#f7f7f7',grey98=>'#fafafa',grey99=>'#fcfcfc',grey100=>'#ffffff',honeydew=>'#f0fff0',honeydew1=>'#f0fff0',honeydew2=>'#e0eee0',honeydew3=>'#c1cdc1',honeydew4=>'#838b83',hotpink=>'#ff69b4',hotpink1=>'#ff6eb4',hotpink2=>'#ee6aa7',hotpink3=>'#cd6090',hotpink4=>'#8b3a62',indianred=>'#cd5c5c',indianred1=>'#ff6a6a',indianred2=>'#ee6363',indianred3=>'#cd5555',indianred4=>'#8b3a3a',indigo=>'#4b0082',ivory=>'#fffff0',ivory1=>'#fffff0',ivory2=>'#eeeee0',ivory3=>'#cdcdc1',ivory4=>'#8b8b83',khaki=>'#f0e68c',khaki1=>'#fff68f',khaki2=>'#eee685',khaki3=>'#cdc673',khaki4=>'#8b864e',lavender=>'#e6e6fa',lavenderblush=>'#fff0f5',lavenderblush1=>'#fff0f5',lavenderblush2=>'#eee0e5',lavenderblush3=>'#cdc1c5',lavenderblush4=>'#8b8386',lawngreen=>'#7cfc00',lemonchiffon=>'#fffacd',lemonchiffon1=>'#fffacd',lemonchiffon2=>'#eee9bf',lemonchiffon3=>'#cdc9a5',lemonchiffon4=>'#8b8970',lightblue=>'#add8e6',lightblue1=>'#bfefff',lightblue2=>'#b2dfee',lightblue3=>'#9ac0cd',lightblue4=>'#68838b',lightcoral=>'#f08080',lightcyan=>'#e0ffff',lightcyan1=>'#e0ffff',lightcyan2=>'#d1eeee',lightcyan3=>'#b4cdcd',lightcyan4=>'#7a8b8b',lightgoldenrod=>'#eedd82',lightgoldenrod1=>'#ffec8b',lightgoldenrod2=>'#eedc82',lightgoldenrod3=>'#cdbe70',lightgoldenrod4=>'#8b814c',lightgoldenrodyellow=>'#fafad2',lightgray=>'#d3d3d3',lightgrey=>'#d3d3d3',lightpink=>'#ffb6c1',lightpink1=>'#ffaeb9',lightpink2=>'#eea2ad',lightpink3=>'#cd8c95',lightpink4=>'#8b5f65',lightsalmon=>'#ffa07a',lightsalmon1=>'#ffa07a',lightsalmon2=>'#ee9572',lightsalmon3=>'#cd8162',lightsalmon4=>'#8b5742',lightseagreen=>'#20b2aa',lightskyblue=>'#87cefa',lightskyblue1=>'#b0e2ff',lightskyblue2=>'#a4d3ee',lightskyblue3=>'#8db6cd',lightskyblue4=>'#607b8b',lightslateblue=>'#8470ff',lightslategray=>'#778899',lightslategrey=>'#778899',lightsteelblue=>'#b0c4de',lightsteelblue1=>'#cae1ff',lightsteelblue2=>'#bcd2ee',lightsteelblue3=>'#a2b5cd',lightsteelblue4=>'#6e7b8b',lightyellow=>'#ffffe0',lightyellow1=>'#ffffe0',lightyellow2=>'#eeeed1',lightyellow3=>'#cdcdb4',lightyellow4=>'#8b8b7a',limegreen=>'#32cd32',linen=>'#faf0e6',magenta=>'#ff00ff',magenta1=>'#ff00ff',magenta2=>'#ee00ee',magenta3=>'#cd00cd',magenta4=>'#8b008b',maroon=>'#b03060',maroon1=>'#ff34b3',maroon2=>'#ee30a7',maroon3=>'#cd2990',maroon4=>'#8b1c62',mediumaquamarine=>'#66cdaa',mediumblue=>'#0000cd',mediumorchid=>'#ba55d3',mediumorchid1=>'#e066ff',mediumorchid2=>'#d15fee',mediumorchid3=>'#b452cd',mediumorchid4=>'#7a378b',mediumpurple=>'#9370db',mediumpurple1=>'#ab82ff',mediumpurple2=>'#9f79ee',mediumpurple3=>'#8968cd',mediumpurple4=>'#5d478b',mediumseagreen=>'#3cb371',mediumslateblue=>'#7b68ee',mediumspringgreen=>'#00fa9a',mediumturquoise=>'#48d1cc',mediumvioletred=>'#c71585',midnightblue=>'#191970',mintcream=>'#f5fffa',mistyrose=>'#ffe4e1',mistyrose1=>'#ffe4e1',mistyrose2=>'#eed5d2',mistyrose3=>'#cdb7b5',mistyrose4=>'#8b7d7b',moccasin=>'#ffe4b5',navajowhite=>'#ffdead',navajowhite1=>'#ffdead',navajowhite2=>'#eecfa1',navajowhite3=>'#cdb38b',navajowhite4=>'#8b795e',navy=>'#000080',navyblue=>'#000080',oldlace=>'#fdf5e6',olivedrab=>'#6b8e23',olivedrab1=>'#c0ff3e',olivedrab2=>'#b3ee3a',olivedrab3=>'#9acd32',olivedrab4=>'#698b22',orange=>'#ffa500',orange1=>'#ffa500',orange2=>'#ee9a00',orange3=>'#cd8500',orange4=>'#8b5a00',orangered=>'#ff4500',orangered1=>'#ff4500',orangered2=>'#ee4000',orangered3=>'#cd3700',orangered4=>'#8b2500',orchid=>'#da70d6',orchid1=>'#ff83fa',orchid2=>'#ee7ae9',orchid3=>'#cd69c9',orchid4=>'#8b4789',palegoldenrod=>'#eee8aa',palegreen=>'#98fb98',palegreen1=>'#9aff9a',palegreen2=>'#90ee90',palegreen3=>'#7ccd7c',palegreen4=>'#548b54',paleturquoise=>'#afeeee',paleturquoise1=>'#bbffff',paleturquoise2=>'#aeeeee',paleturquoise3=>'#96cdcd',paleturquoise4=>'#668b8b',palevioletred=>'#db7093',palevioletred1=>'#ff82ab',palevioletred2=>'#ee799f',palevioletred3=>'#cd6889',palevioletred4=>'#8b475d',papayawhip=>'#ffefd5',peachpuff=>'#ffdab9',peachpuff1=>'#ffdab9',peachpuff2=>'#eecbad',peachpuff3=>'#cdaf95',peachpuff4=>'#8b7765',peru=>'#cd853f',pink=>'#ffc0cb',pink1=>'#ffb5c5',pink2=>'#eea9b8',pink3=>'#cd919e',pink4=>'#8b636c',plum=>'#dda0dd',plum1=>'#ffbbff',plum2=>'#eeaeee',plum3=>'#cd96cd',plum4=>'#8b668b',powderblue=>'#b0e0e6',purple=>'#a020f0',purple1=>'#9b30ff',purple2=>'#912cee',purple3=>'#7d26cd',purple4=>'#551a8b',red=>'#ff0000',red1=>'#ff0000',red2=>'#ee0000',red3=>'#cd0000',red4=>'#8b0000',rosybrown=>'#bc8f8f',rosybrown1=>'#ffc1c1',rosybrown2=>'#eeb4b4',rosybrown3=>'#cd9b9b',rosybrown4=>'#8b6969',royalblue=>'#4169e1',royalblue1=>'#4876ff',royalblue2=>'#436eee',royalblue3=>'#3a5fcd',royalblue4=>'#27408b',saddlebrown=>'#8b4513',salmon=>'#fa8072',salmon1=>'#ff8c69',salmon2=>'#ee8262',salmon3=>'#cd7054',salmon4=>'#8b4c39',sandybrown=>'#f4a460',seagreen=>'#2e8b57',seagreen1=>'#54ff9f',seagreen2=>'#4eee94',seagreen3=>'#43cd80',seagreen4=>'#2e8b57',seashell=>'#fff5ee',seashell1=>'#fff5ee',seashell2=>'#eee5de',seashell3=>'#cdc5bf',seashell4=>'#8b8682',sienna=>'#a0522d',sienna1=>'#ff8247',sienna2=>'#ee7942',sienna3=>'#cd6839',sienna4=>'#8b4726',skyblue=>'#87ceeb',skyblue1=>'#87ceff',skyblue2=>'#7ec0ee',skyblue3=>'#6ca6cd',skyblue4=>'#4a708b',slateblue=>'#6a5acd',slateblue1=>'#836fff',slateblue2=>'#7a67ee',slateblue3=>'#6959cd',slateblue4=>'#473c8b',slategray=>'#708090',slategray1=>'#c6e2ff',slategray2=>'#b9d3ee',slategray3=>'#9fb6cd',slategray4=>'#6c7b8b',slategrey=>'#708090',snow=>'#fffafa',snow1=>'#fffafa',snow2=>'#eee9e9',snow3=>'#cdc9c9',snow4=>'#8b8989',springgreen=>'#00ff7f',springgreen1=>'#00ff7f',springgreen2=>'#00ee76',springgreen3=>'#00cd66',springgreen4=>'#008b45',steelblue=>'#4682b4',steelblue1=>'#63b8ff',steelblue2=>'#5cacee',steelblue3=>'#4f94cd',steelblue4=>'#36648b',tan=>'#d2b48c',tan1=>'#ffa54f',tan2=>'#ee9a49',tan3=>'#cd853f',tan4=>'#8b5a2b',thistle=>'#d8bfd8',thistle1=>'#ffe1ff',thistle2=>'#eed2ee',thistle3=>'#cdb5cd',thistle4=>'#8b7b8b',tomato=>'#ff6347',tomato1=>'#ff6347',tomato2=>'#ee5c42',tomato3=>'#cd4f39',tomato4=>'#8b3626',transparent=>'#fffffe',turquoise=>'#40e0d0',turquoise1=>'#00f5ff',turquoise2=>'#00e5ee',turquoise3=>'#00c5cd',turquoise4=>'#00868b',violet=>'#ee82ee',violetred=>'#d02090',violetred1=>'#ff3e96',violetred2=>'#ee3a8c',violetred3=>'#cd3278',violetred4=>'#8b2252',wheat=>'#f5deb3',wheat1=>'#ffe7ba',wheat2=>'#eed8ae',wheat3=>'#cdba96',wheat4=>'#8b7e66',white=>'#ffffff',whitesmoke=>'#f5f5f5',yellow=>'#ffff00',yellow1=>'#ffff00',yellow2=>'#eeee00',yellow3=>'#cdcd00',yellow4=>'#8b8b00',yellowgreen=>'#9acd32',1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',8=>'#ff7f00',9=>'#cab2d6',10=>'#6a3d9a',11=>'#ffff99',12=>'#b15928',},accent3=>{1=>'#7fc97f',2=>'#beaed4',3=>'#fdc086',},accent4=>{1=>'#7fc97f',2=>'#beaed4',3=>'#fdc086',4=>'#ffff99',},accent5=>{1=>'#7fc97f',2=>'#beaed4',3=>'#fdc086',4=>'#ffff99',5=>'#386cb0',},accent6=>{1=>'#7fc97f',2=>'#beaed4',3=>'#fdc086',4=>'#ffff99',5=>'#386cb0',6=>'#f0027f',},accent7=>{1=>'#7fc97f',2=>'#beaed4',3=>'#fdc086',4=>'#ffff99',5=>'#386cb0',6=>'#f0027f',7=>'#bf5b17',},accent8=>{1=>'#7fc97f',2=>'#beaed4',3=>'#fdc086',4=>'#ffff99',5=>'#386cb0',6=>'#f0027f',7=>'#bf5b17',8=>'#666666',},blues3=>{1=>'#deebf7',2=>'#9ecae1',3=>'#3182bd',},blues4=>{1=>'#eff3ff',2=>'#bdd7e7',3=>'#6baed6',4=>'#2171b5',},blues5=>{1=>'#eff3ff',2=>'#bdd7e7',3=>'#6baed6',4=>'#3182bd',5=>'#08519c',},blues6=>{1=>'#eff3ff',2=>'#c6dbef',3=>'#9ecae1',4=>'#6baed6',5=>'#3182bd',6=>'#08519c',},blues7=>{1=>'#eff3ff',2=>'#c6dbef',3=>'#9ecae1',4=>'#6baed6',5=>'#4292c6',6=>'#2171b5',7=>'#084594',},blues8=>{1=>'#f7fbff',2=>'#deebf7',3=>'#c6dbef',4=>'#9ecae1',5=>'#6baed6',6=>'#4292c6',7=>'#2171b5',8=>'#084594',},blues9=>{1=>'#f7fbff',2=>'#deebf7',3=>'#c6dbef',4=>'#9ecae1',5=>'#6baed6',6=>'#4292c6',7=>'#2171b5',8=>'#08519c',9=>'#08306b',},brbg3=>{1=>'#d8b365',2=>'#f5f5f5',3=>'#5ab4ac',},brbg4=>{1=>'#a6611a',2=>'#dfc27d',3=>'#80cdc1',4=>'#018571',},brbg5=>{1=>'#a6611a',2=>'#dfc27d',3=>'#f5f5f5',4=>'#80cdc1',5=>'#018571',},brbg6=>{1=>'#8c510a',2=>'#d8b365',3=>'#f6e8c3',4=>'#c7eae5',5=>'#5ab4ac',6=>'#01665e',},brbg7=>{1=>'#8c510a',2=>'#d8b365',3=>'#f6e8c3',4=>'#f5f5f5',5=>'#c7eae5',6=>'#5ab4ac',7=>'#01665e',},brbg8=>{1=>'#8c510a',2=>'#bf812d',3=>'#dfc27d',4=>'#f6e8c3',5=>'#c7eae5',6=>'#80cdc1',7=>'#35978f',8=>'#01665e',},brbg9=>{1=>'#8c510a',2=>'#bf812d',3=>'#dfc27d',4=>'#f6e8c3',5=>'#f5f5f5',6=>'#c7eae5',7=>'#80cdc1',8=>'#35978f',9=>'#01665e',},brbg10=>{1=>'#543005',2=>'#8c510a',3=>'#bf812d',4=>'#dfc27d',5=>'#f6e8c3',6=>'#c7eae5',7=>'#80cdc1',8=>'#35978f',9=>'#01665e',10=>'#003c30',},brbg11=>{1=>'#543005',2=>'#8c510a',3=>'#bf812d',4=>'#dfc27d',5=>'#f6e8c3',6=>'#f5f5f5',7=>'#c7eae5',8=>'#80cdc1',9=>'#35978f',10=>'#01665e',11=>'#003c30',},bugn3=>{1=>'#e5f5f9',2=>'#99d8c9',3=>'#2ca25f',},bugn4=>{1=>'#edf8fb',2=>'#b2e2e2',3=>'#66c2a4',4=>'#238b45',},bugn5=>{1=>'#edf8fb',2=>'#b2e2e2',3=>'#66c2a4',4=>'#2ca25f',5=>'#006d2c',},bugn6=>{1=>'#edf8fb',2=>'#ccece6',3=>'#99d8c9',4=>'#66c2a4',5=>'#2ca25f',6=>'#006d2c',},bugn7=>{1=>'#edf8fb',2=>'#ccece6',3=>'#99d8c9',4=>'#66c2a4',5=>'#41ae76',6=>'#238b45',7=>'#005824',},bugn8=>{1=>'#f7fcfd',2=>'#e5f5f9',3=>'#ccece6',4=>'#99d8c9',5=>'#66c2a4',6=>'#41ae76',7=>'#238b45',8=>'#005824',},bugn9=>{1=>'#f7fcfd',2=>'#e5f5f9',3=>'#ccece6',4=>'#99d8c9',5=>'#66c2a4',6=>'#41ae76',7=>'#238b45',8=>'#006d2c',9=>'#00441b',},bupu3=>{1=>'#e0ecf4',2=>'#9ebcda',3=>'#8856a7',},bupu4=>{1=>'#edf8fb',2=>'#b3cde3',3=>'#8c96c6',4=>'#88419d',},bupu5=>{1=>'#edf8fb',2=>'#b3cde3',3=>'#8c96c6',4=>'#8856a7',5=>'#810f7c',},bupu6=>{1=>'#edf8fb',2=>'#bfd3e6',3=>'#9ebcda',4=>'#8c96c6',5=>'#8856a7',6=>'#810f7c',},bupu7=>{1=>'#edf8fb',2=>'#bfd3e6',3=>'#9ebcda',4=>'#8c96c6',5=>'#8c6bb1',6=>'#88419d',7=>'#6e016b',},bupu8=>{1=>'#f7fcfd',2=>'#e0ecf4',3=>'#bfd3e6',4=>'#9ebcda',5=>'#8c96c6',6=>'#8c6bb1',7=>'#88419d',8=>'#6e016b',},bupu9=>{1=>'#f7fcfd',2=>'#e0ecf4',3=>'#bfd3e6',4=>'#9ebcda',5=>'#8c96c6',6=>'#8c6bb1',7=>'#88419d',8=>'#810f7c',9=>'#4d004b',},dark23=>{1=>'#1b9e77',2=>'#d95f02',3=>'#7570b3',},dark24=>{1=>'#1b9e77',2=>'#d95f02',3=>'#7570b3',4=>'#e7298a',},dark25=>{1=>'#1b9e77',2=>'#d95f02',3=>'#7570b3',4=>'#e7298a',5=>'#66a61e',},dark26=>{1=>'#1b9e77',2=>'#d95f02',3=>'#7570b3',4=>'#e7298a',5=>'#66a61e',6=>'#e6ab02',},dark27=>{1=>'#1b9e77',2=>'#d95f02',3=>'#7570b3',4=>'#e7298a',5=>'#66a61e',6=>'#e6ab02',7=>'#a6761d',},dark28=>{1=>'#1b9e77',2=>'#d95f02',3=>'#7570b3',4=>'#e7298a',5=>'#66a61e',6=>'#e6ab02',7=>'#a6761d',8=>'#666666',},gnbu3=>{1=>'#e0f3db',2=>'#a8ddb5',3=>'#43a2ca',},gnbu4=>{1=>'#f0f9e8',2=>'#bae4bc',3=>'#7bccc4',4=>'#2b8cbe',},gnbu5=>{1=>'#f0f9e8',2=>'#bae4bc',3=>'#7bccc4',4=>'#43a2ca',5=>'#0868ac',},gnbu6=>{1=>'#f0f9e8',2=>'#ccebc5',3=>'#a8ddb5',4=>'#7bccc4',5=>'#43a2ca',6=>'#0868ac',},gnbu7=>{1=>'#f0f9e8',2=>'#ccebc5',3=>'#a8ddb5',4=>'#7bccc4',5=>'#4eb3d3',6=>'#2b8cbe',7=>'#08589e',},gnbu8=>{1=>'#f7fcf0',2=>'#e0f3db',3=>'#ccebc5',4=>'#a8ddb5',5=>'#7bccc4',6=>'#4eb3d3',7=>'#2b8cbe',8=>'#08589e',},gnbu9=>{1=>'#f7fcf0',2=>'#e0f3db',3=>'#ccebc5',4=>'#a8ddb5',5=>'#7bccc4',6=>'#4eb3d3',7=>'#2b8cbe',8=>'#0868ac',9=>'#084081',},greens3=>{1=>'#e5f5e0',2=>'#a1d99b',3=>'#31a354',},greens4=>{1=>'#edf8e9',2=>'#bae4b3',3=>'#74c476',4=>'#238b45',},greens5=>{1=>'#edf8e9',2=>'#bae4b3',3=>'#74c476',4=>'#31a354',5=>'#006d2c',},greens6=>{1=>'#edf8e9',2=>'#c7e9c0',3=>'#a1d99b',4=>'#74c476',5=>'#31a354',6=>'#006d2c',},greens7=>{1=>'#edf8e9',2=>'#c7e9c0',3=>'#a1d99b',4=>'#74c476',5=>'#41ab5d',6=>'#238b45',7=>'#005a32',},greens8=>{1=>'#f7fcf5',2=>'#e5f5e0',3=>'#c7e9c0',4=>'#a1d99b',5=>'#74c476',6=>'#41ab5d',7=>'#238b45',8=>'#005a32',},greens9=>{1=>'#f7fcf5',2=>'#e5f5e0',3=>'#c7e9c0',4=>'#a1d99b',5=>'#74c476',6=>'#41ab5d',7=>'#238b45',8=>'#006d2c',9=>'#00441b',},greys3=>{1=>'#f0f0f0',2=>'#bdbdbd',3=>'#636363',},greys4=>{1=>'#f7f7f7',2=>'#cccccc',3=>'#969696',4=>'#525252',},greys5=>{1=>'#f7f7f7',2=>'#cccccc',3=>'#969696',4=>'#636363',5=>'#252525',},greys6=>{1=>'#f7f7f7',2=>'#d9d9d9',3=>'#bdbdbd',4=>'#969696',5=>'#636363',6=>'#252525',},greys7=>{1=>'#f7f7f7',2=>'#d9d9d9',3=>'#bdbdbd',4=>'#969696',5=>'#737373',6=>'#525252',7=>'#252525',},greys8=>{1=>'#ffffff',2=>'#f0f0f0',3=>'#d9d9d9',4=>'#bdbdbd',5=>'#969696',6=>'#737373',7=>'#525252',8=>'#252525',},greys9=>{1=>'#ffffff',2=>'#f0f0f0',3=>'#d9d9d9',4=>'#bdbdbd',5=>'#969696',6=>'#737373',7=>'#525252',8=>'#252525',9=>'#000000',},oranges3=>{1=>'#fee6ce',2=>'#fdae6b',3=>'#e6550d',},oranges4=>{1=>'#feedde',2=>'#fdbe85',3=>'#fd8d3c',4=>'#d94701',},oranges5=>{1=>'#feedde',2=>'#fdbe85',3=>'#fd8d3c',4=>'#e6550d',5=>'#a63603',},oranges6=>{1=>'#feedde',2=>'#fdd0a2',3=>'#fdae6b',4=>'#fd8d3c',5=>'#e6550d',6=>'#a63603',},oranges7=>{1=>'#feedde',2=>'#fdd0a2',3=>'#fdae6b',4=>'#fd8d3c',5=>'#f16913',6=>'#d94801',7=>'#8c2d04',},oranges8=>{1=>'#fff5eb',2=>'#fee6ce',3=>'#fdd0a2',4=>'#fdae6b',5=>'#fd8d3c',6=>'#f16913',7=>'#d94801',8=>'#8c2d04',},oranges9=>{1=>'#fff5eb',2=>'#fee6ce',3=>'#fdd0a2',4=>'#fdae6b',5=>'#fd8d3c',6=>'#f16913',7=>'#d94801',8=>'#a63603',9=>'#7f2704',},orrd3=>{1=>'#fee8c8',2=>'#fdbb84',3=>'#e34a33',},orrd4=>{1=>'#fef0d9',2=>'#fdcc8a',3=>'#fc8d59',4=>'#d7301f',},orrd5=>{1=>'#fef0d9',2=>'#fdcc8a',3=>'#fc8d59',4=>'#e34a33',5=>'#b30000',},orrd6=>{1=>'#fef0d9',2=>'#fdd49e',3=>'#fdbb84',4=>'#fc8d59',5=>'#e34a33',6=>'#b30000',},orrd7=>{1=>'#fef0d9',2=>'#fdd49e',3=>'#fdbb84',4=>'#fc8d59',5=>'#ef6548',6=>'#d7301f',7=>'#990000',},orrd8=>{1=>'#fff7ec',2=>'#fee8c8',3=>'#fdd49e',4=>'#fdbb84',5=>'#fc8d59',6=>'#ef6548',7=>'#d7301f',8=>'#990000',},orrd9=>{1=>'#fff7ec',2=>'#fee8c8',3=>'#fdd49e',4=>'#fdbb84',5=>'#fc8d59',6=>'#ef6548',7=>'#d7301f',8=>'#b30000',9=>'#7f0000',},paired3=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',},paired4=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',},paired5=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',},paired6=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',},paired7=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',},paired8=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',8=>'#ff7f00',},paired9=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',8=>'#ff7f00',9=>'#cab2d6',},paired10=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',8=>'#ff7f00',9=>'#cab2d6',10=>'#6a3d9a',},paired11=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',8=>'#ff7f00',9=>'#cab2d6',10=>'#6a3d9a',11=>'#ffff99',},paired12=>{1=>'#a6cee3',2=>'#1f78b4',3=>'#b2df8a',4=>'#33a02c',5=>'#fb9a99',6=>'#e31a1c',7=>'#fdbf6f',8=>'#ff7f00',9=>'#cab2d6',10=>'#6a3d9a',11=>'#ffff99',12=>'#b15928',},pastel13=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',},pastel14=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',4=>'#decbe4',},pastel15=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',4=>'#decbe4',5=>'#fed9a6',},pastel16=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',4=>'#decbe4',5=>'#fed9a6',6=>'#ffffcc',},pastel17=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',4=>'#decbe4',5=>'#fed9a6',6=>'#ffffcc',7=>'#e5d8bd',},pastel18=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',4=>'#decbe4',5=>'#fed9a6',6=>'#ffffcc',7=>'#e5d8bd',8=>'#fddaec',},pastel19=>{1=>'#fbb4ae',2=>'#b3cde3',3=>'#ccebc5',4=>'#decbe4',5=>'#fed9a6',6=>'#ffffcc',7=>'#e5d8bd',8=>'#fddaec',9=>'#f2f2f2',},pastel23=>{1=>'#b3e2cd',2=>'#fdcdac',3=>'#cbd5e8',},pastel24=>{1=>'#b3e2cd',2=>'#fdcdac',3=>'#cbd5e8',4=>'#f4cae4',},pastel25=>{1=>'#b3e2cd',2=>'#fdcdac',3=>'#cbd5e8',4=>'#f4cae4',5=>'#e6f5c9',},pastel26=>{1=>'#b3e2cd',2=>'#fdcdac',3=>'#cbd5e8',4=>'#f4cae4',5=>'#e6f5c9',6=>'#fff2ae',},pastel27=>{1=>'#b3e2cd',2=>'#fdcdac',3=>'#cbd5e8',4=>'#f4cae4',5=>'#e6f5c9',6=>'#fff2ae',7=>'#f1e2cc',},pastel28=>{1=>'#b3e2cd',2=>'#fdcdac',3=>'#cbd5e8',4=>'#f4cae4',5=>'#e6f5c9',6=>'#fff2ae',7=>'#f1e2cc',8=>'#cccccc',},piyg3=>{1=>'#e9a3c9',2=>'#f7f7f7',3=>'#a1d76a',},piyg4=>{1=>'#d01c8b',2=>'#f1b6da',3=>'#b8e186',4=>'#4dac26',},piyg5=>{1=>'#d01c8b',2=>'#f1b6da',3=>'#f7f7f7',4=>'#b8e186',5=>'#4dac26',},piyg6=>{1=>'#c51b7d',2=>'#e9a3c9',3=>'#fde0ef',4=>'#e6f5d0',5=>'#a1d76a',6=>'#4d9221',},piyg7=>{1=>'#c51b7d',2=>'#e9a3c9',3=>'#fde0ef',4=>'#f7f7f7',5=>'#e6f5d0',6=>'#a1d76a',7=>'#4d9221',},piyg8=>{1=>'#c51b7d',2=>'#de77ae',3=>'#f1b6da',4=>'#fde0ef',5=>'#e6f5d0',6=>'#b8e186',7=>'#7fbc41',8=>'#4d9221',},piyg9=>{1=>'#c51b7d',2=>'#de77ae',3=>'#f1b6da',4=>'#fde0ef',5=>'#f7f7f7',6=>'#e6f5d0',7=>'#b8e186',8=>'#7fbc41',9=>'#4d9221',},piyg10=>{1=>'#8e0152',2=>'#c51b7d',3=>'#de77ae',4=>'#f1b6da',5=>'#fde0ef',6=>'#e6f5d0',7=>'#b8e186',8=>'#7fbc41',9=>'#4d9221',10=>'#276419',},piyg11=>{1=>'#8e0152',2=>'#c51b7d',3=>'#de77ae',4=>'#f1b6da',5=>'#fde0ef',6=>'#f7f7f7',7=>'#e6f5d0',8=>'#b8e186',9=>'#7fbc41',10=>'#4d9221',11=>'#276419',},prgn3=>{1=>'#af8dc3',2=>'#f7f7f7',3=>'#7fbf7b',},prgn4=>{1=>'#7b3294',2=>'#c2a5cf',3=>'#a6dba0',4=>'#008837',},prgn5=>{1=>'#7b3294',2=>'#c2a5cf',3=>'#f7f7f7',4=>'#a6dba0',5=>'#008837',},prgn6=>{1=>'#762a83',2=>'#af8dc3',3=>'#e7d4e8',4=>'#d9f0d3',5=>'#7fbf7b',6=>'#1b7837',},prgn7=>{1=>'#762a83',2=>'#af8dc3',3=>'#e7d4e8',4=>'#f7f7f7',5=>'#d9f0d3',6=>'#7fbf7b',7=>'#1b7837',},prgn8=>{1=>'#762a83',2=>'#9970ab',3=>'#c2a5cf',4=>'#e7d4e8',5=>'#d9f0d3',6=>'#a6dba0',7=>'#5aae61',8=>'#1b7837',},prgn9=>{1=>'#762a83',2=>'#9970ab',3=>'#c2a5cf',4=>'#e7d4e8',5=>'#f7f7f7',6=>'#d9f0d3',7=>'#a6dba0',8=>'#5aae61',9=>'#1b7837',},prgn10=>{1=>'#40004b',2=>'#762a83',3=>'#9970ab',4=>'#c2a5cf',5=>'#e7d4e8',6=>'#d9f0d3',7=>'#a6dba0',8=>'#5aae61',9=>'#1b7837',10=>'#00441b',},prgn11=>{1=>'#40004b',2=>'#762a83',3=>'#9970ab',4=>'#c2a5cf',5=>'#e7d4e8',6=>'#f7f7f7',7=>'#d9f0d3',8=>'#a6dba0',9=>'#5aae61',10=>'#1b7837',11=>'#00441b',},pubu3=>{1=>'#ece7f2',2=>'#a6bddb',3=>'#2b8cbe',},pubu4=>{1=>'#f1eef6',2=>'#bdc9e1',3=>'#74a9cf',4=>'#0570b0',},pubu5=>{1=>'#f1eef6',2=>'#bdc9e1',3=>'#74a9cf',4=>'#2b8cbe',5=>'#045a8d',},pubu6=>{1=>'#f1eef6',2=>'#d0d1e6',3=>'#a6bddb',4=>'#74a9cf',5=>'#2b8cbe',6=>'#045a8d',},pubu7=>{1=>'#f1eef6',2=>'#d0d1e6',3=>'#a6bddb',4=>'#74a9cf',5=>'#3690c0',6=>'#0570b0',7=>'#034e7b',},pubu8=>{1=>'#fff7fb',2=>'#ece7f2',3=>'#d0d1e6',4=>'#a6bddb',5=>'#74a9cf',6=>'#3690c0',7=>'#0570b0',8=>'#034e7b',},pubu9=>{1=>'#fff7fb',2=>'#ece7f2',3=>'#d0d1e6',4=>'#a6bddb',5=>'#74a9cf',6=>'#3690c0',7=>'#0570b0',8=>'#045a8d',9=>'#023858',},pubugn3=>{1=>'#ece2f0',2=>'#a6bddb',3=>'#1c9099',},pubugn4=>{1=>'#f6eff7',2=>'#bdc9e1',3=>'#67a9cf',4=>'#02818a',},pubugn5=>{1=>'#f6eff7',2=>'#bdc9e1',3=>'#67a9cf',4=>'#1c9099',5=>'#016c59',},pubugn6=>{1=>'#f6eff7',2=>'#d0d1e6',3=>'#a6bddb',4=>'#67a9cf',5=>'#1c9099',6=>'#016c59',},pubugn7=>{1=>'#f6eff7',2=>'#d0d1e6',3=>'#a6bddb',4=>'#67a9cf',5=>'#3690c0',6=>'#02818a',7=>'#016450',},pubugn8=>{1=>'#fff7fb',2=>'#ece2f0',3=>'#d0d1e6',4=>'#a6bddb',5=>'#67a9cf',6=>'#3690c0',7=>'#02818a',8=>'#016450',},pubugn9=>{1=>'#fff7fb',2=>'#ece2f0',3=>'#d0d1e6',4=>'#a6bddb',5=>'#67a9cf',6=>'#3690c0',7=>'#02818a',8=>'#016c59',9=>'#014636',},puor3=>{1=>'#f1a340',2=>'#f7f7f7',3=>'#998ec3',},puor4=>{1=>'#e66101',2=>'#fdb863',3=>'#b2abd2',4=>'#5e3c99',},puor5=>{1=>'#e66101',2=>'#fdb863',3=>'#f7f7f7',4=>'#b2abd2',5=>'#5e3c99',},puor6=>{1=>'#b35806',2=>'#f1a340',3=>'#fee0b6',4=>'#d8daeb',5=>'#998ec3',6=>'#542788',},puor7=>{1=>'#b35806',2=>'#f1a340',3=>'#fee0b6',4=>'#f7f7f7',5=>'#d8daeb',6=>'#998ec3',7=>'#542788',},puor8=>{1=>'#b35806',2=>'#e08214',3=>'#fdb863',4=>'#fee0b6',5=>'#d8daeb',6=>'#b2abd2',7=>'#8073ac',8=>'#542788',},puor9=>{1=>'#b35806',2=>'#e08214',3=>'#fdb863',4=>'#fee0b6',5=>'#f7f7f7',6=>'#d8daeb',7=>'#b2abd2',8=>'#8073ac',9=>'#542788',},purd3=>{1=>'#e7e1ef',2=>'#c994c7',3=>'#dd1c77',},purd4=>{1=>'#f1eef6',2=>'#d7b5d8',3=>'#df65b0',4=>'#ce1256',},purd5=>{1=>'#f1eef6',2=>'#d7b5d8',3=>'#df65b0',4=>'#dd1c77',5=>'#980043',},purd6=>{1=>'#f1eef6',2=>'#d4b9da',3=>'#c994c7',4=>'#df65b0',5=>'#dd1c77',6=>'#980043',},purd7=>{1=>'#f1eef6',2=>'#d4b9da',3=>'#c994c7',4=>'#df65b0',5=>'#e7298a',6=>'#ce1256',7=>'#91003f',},purd8=>{1=>'#f7f4f9',2=>'#e7e1ef',3=>'#d4b9da',4=>'#c994c7',5=>'#df65b0',6=>'#e7298a',7=>'#ce1256',8=>'#91003f',},purd9=>{1=>'#f7f4f9',2=>'#e7e1ef',3=>'#d4b9da',4=>'#c994c7',5=>'#df65b0',6=>'#e7298a',7=>'#ce1256',8=>'#980043',9=>'#67001f',},puor10=>{1=>'#7f3b08',2=>'#b35806',3=>'#e08214',4=>'#fdb863',5=>'#fee0b6',6=>'#d8daeb',7=>'#b2abd2',8=>'#8073ac',9=>'#542788',10=>'#2d004b',},puor11=>{1=>'#7f3b08',2=>'#b35806',3=>'#e08214',4=>'#fdb863',5=>'#fee0b6',6=>'#f7f7f7',7=>'#d8daeb',8=>'#b2abd2',9=>'#8073ac',10=>'#542788',11=>'#2d004b',},purples3=>{1=>'#efedf5',2=>'#bcbddc',3=>'#756bb1',},purples4=>{1=>'#f2f0f7',2=>'#cbc9e2',3=>'#9e9ac8',4=>'#6a51a3',},purples5=>{1=>'#f2f0f7',2=>'#cbc9e2',3=>'#9e9ac8',4=>'#756bb1',5=>'#54278f',},purples6=>{1=>'#f2f0f7',2=>'#dadaeb',3=>'#bcbddc',4=>'#9e9ac8',5=>'#756bb1',6=>'#54278f',},purples7=>{1=>'#f2f0f7',2=>'#dadaeb',3=>'#bcbddc',4=>'#9e9ac8',5=>'#807dba',6=>'#6a51a3',7=>'#4a1486',},purples8=>{1=>'#fcfbfd',2=>'#efedf5',3=>'#dadaeb',4=>'#bcbddc',5=>'#9e9ac8',6=>'#807dba',7=>'#6a51a3',8=>'#4a1486',},purples9=>{1=>'#fcfbfd',2=>'#efedf5',3=>'#dadaeb',4=>'#bcbddc',5=>'#9e9ac8',6=>'#807dba',7=>'#6a51a3',8=>'#54278f',9=>'#3f007d',},rdbu10=>{1=>'#67001f',2=>'#b2182b',3=>'#d6604d',4=>'#f4a582',5=>'#fddbc7',6=>'#d1e5f0',7=>'#92c5de',8=>'#4393c3',9=>'#2166ac',10=>'#053061',},rdbu11=>{1=>'#67001f',2=>'#b2182b',3=>'#d6604d',4=>'#f4a582',5=>'#fddbc7',6=>'#f7f7f7',7=>'#d1e5f0',8=>'#92c5de',9=>'#4393c3',10=>'#2166ac',11=>'#053061',},rdbu3=>{1=>'#ef8a62',2=>'#f7f7f7',3=>'#67a9cf',},rdbu4=>{1=>'#ca0020',2=>'#f4a582',3=>'#92c5de',4=>'#0571b0',},rdbu5=>{1=>'#ca0020',2=>'#f4a582',3=>'#f7f7f7',4=>'#92c5de',5=>'#0571b0',},rdbu6=>{1=>'#b2182b',2=>'#ef8a62',3=>'#fddbc7',4=>'#d1e5f0',5=>'#67a9cf',6=>'#2166ac',},rdbu7=>{1=>'#b2182b',2=>'#ef8a62',3=>'#fddbc7',4=>'#f7f7f7',5=>'#d1e5f0',6=>'#67a9cf',7=>'#2166ac',},rdbu8=>{1=>'#b2182b',2=>'#d6604d',3=>'#f4a582',4=>'#fddbc7',5=>'#d1e5f0',6=>'#92c5de',7=>'#4393c3',8=>'#2166ac',},rdbu9=>{1=>'#b2182b',2=>'#d6604d',3=>'#f4a582',4=>'#fddbc7',5=>'#f7f7f7',6=>'#d1e5f0',7=>'#92c5de',8=>'#4393c3',9=>'#2166ac',},rdgy3=>{1=>'#ef8a62',2=>'#ffffff',3=>'#999999',},rdgy4=>{1=>'#ca0020',2=>'#f4a582',3=>'#bababa',4=>'#404040',},rdgy5=>{1=>'#ca0020',2=>'#f4a582',3=>'#ffffff',4=>'#bababa',5=>'#404040',},rdgy6=>{1=>'#b2182b',2=>'#ef8a62',3=>'#fddbc7',4=>'#e0e0e0',5=>'#999999',6=>'#4d4d4d',},rdgy7=>{1=>'#b2182b',2=>'#ef8a62',3=>'#fddbc7',4=>'#ffffff',5=>'#e0e0e0',6=>'#999999',7=>'#4d4d4d',},rdgy8=>{1=>'#b2182b',2=>'#d6604d',3=>'#f4a582',4=>'#fddbc7',5=>'#e0e0e0',6=>'#bababa',7=>'#878787',8=>'#4d4d4d',},rdgy9=>{1=>'#b2182b',2=>'#d6604d',3=>'#f4a582',4=>'#fddbc7',5=>'#ffffff',6=>'#e0e0e0',7=>'#bababa',8=>'#878787',9=>'#4d4d4d',},rdpu3=>{1=>'#fde0dd',2=>'#fa9fb5',3=>'#c51b8a',},rdpu4=>{1=>'#feebe2',2=>'#fbb4b9',3=>'#f768a1',4=>'#ae017e',},rdpu5=>{1=>'#feebe2',2=>'#fbb4b9',3=>'#f768a1',4=>'#c51b8a',5=>'#7a0177',},rdpu6=>{1=>'#feebe2',2=>'#fcc5c0',3=>'#fa9fb5',4=>'#f768a1',5=>'#c51b8a',6=>'#7a0177',},rdpu7=>{1=>'#feebe2',2=>'#fcc5c0',3=>'#fa9fb5',4=>'#f768a1',5=>'#dd3497',6=>'#ae017e',7=>'#7a0177',},rdpu8=>{1=>'#fff7f3',2=>'#fde0dd',3=>'#fcc5c0',4=>'#fa9fb5',5=>'#f768a1',6=>'#dd3497',7=>'#ae017e',8=>'#7a0177',},rdpu9=>{1=>'#fff7f3',2=>'#fde0dd',3=>'#fcc5c0',4=>'#fa9fb5',5=>'#f768a1',6=>'#dd3497',7=>'#ae017e',8=>'#7a0177',9=>'#49006a',},rdgy10=>{1=>'#67001f',2=>'#b2182b',3=>'#d6604d',4=>'#f4a582',5=>'#fddbc7',6=>'#e0e0e0',7=>'#bababa',8=>'#878787',9=>'#4d4d4d',10=>'#1a1a1a',},rdgy11=>{1=>'#67001f',2=>'#b2182b',3=>'#d6604d',4=>'#f4a582',5=>'#fddbc7',6=>'#ffffff',7=>'#e0e0e0',8=>'#bababa',9=>'#878787',10=>'#4d4d4d',11=>'#1a1a1a',},rdylbu3=>{1=>'#fc8d59',2=>'#ffffbf',3=>'#91bfdb',},rdylbu4=>{1=>'#d7191c',2=>'#fdae61',3=>'#abd9e9',4=>'#2c7bb6',},rdylbu5=>{1=>'#d7191c',2=>'#fdae61',3=>'#ffffbf',4=>'#abd9e9',5=>'#2c7bb6',},rdylbu6=>{1=>'#d73027',2=>'#fc8d59',3=>'#fee090',4=>'#e0f3f8',5=>'#91bfdb',6=>'#4575b4',},rdylbu7=>{1=>'#d73027',2=>'#fc8d59',3=>'#fee090',4=>'#ffffbf',5=>'#e0f3f8',6=>'#91bfdb',7=>'#4575b4',},rdylbu8=>{1=>'#d73027',2=>'#f46d43',3=>'#fdae61',4=>'#fee090',5=>'#e0f3f8',6=>'#abd9e9',7=>'#74add1',8=>'#4575b4',},rdylbu9=>{1=>'#d73027',2=>'#f46d43',3=>'#fdae61',4=>'#fee090',5=>'#ffffbf',6=>'#e0f3f8',7=>'#abd9e9',8=>'#74add1',9=>'#4575b4',},rdylbu10=>{1=>'#a50026',2=>'#d73027',3=>'#f46d43',4=>'#fdae61',5=>'#fee090',6=>'#e0f3f8',7=>'#abd9e9',8=>'#74add1',9=>'#4575b4',10=>'#313695',},rdylbu11=>{1=>'#a50026',2=>'#d73027',3=>'#f46d43',4=>'#fdae61',5=>'#fee090',6=>'#ffffbf',7=>'#e0f3f8',8=>'#abd9e9',9=>'#74add1',10=>'#4575b4',11=>'#313695',},rdylgn3=>{1=>'#fc8d59',2=>'#ffffbf',3=>'#91cf60',},rdylgn4=>{1=>'#d7191c',2=>'#fdae61',3=>'#a6d96a',4=>'#1a9641',},rdylgn5=>{1=>'#d7191c',2=>'#fdae61',3=>'#ffffbf',4=>'#a6d96a',5=>'#1a9641',},rdylgn6=>{1=>'#d73027',2=>'#fc8d59',3=>'#fee08b',4=>'#d9ef8b',5=>'#91cf60',6=>'#1a9850',},rdylgn7=>{1=>'#d73027',2=>'#fc8d59',3=>'#fee08b',4=>'#ffffbf',5=>'#d9ef8b',6=>'#91cf60',7=>'#1a9850',},rdylgn8=>{1=>'#d73027',2=>'#f46d43',3=>'#fdae61',4=>'#fee08b',5=>'#d9ef8b',6=>'#a6d96a',7=>'#66bd63',8=>'#1a9850',},rdylgn9=>{1=>'#d73027',2=>'#f46d43',3=>'#fdae61',4=>'#fee08b',5=>'#ffffbf',6=>'#d9ef8b',7=>'#a6d96a',8=>'#66bd63',9=>'#1a9850',},rdylgn10=>{1=>'#a50026',2=>'#d73027',3=>'#f46d43',4=>'#fdae61',5=>'#fee08b',6=>'#d9ef8b',7=>'#a6d96a',8=>'#66bd63',9=>'#1a9850',10=>'#006837',},rdylgn11=>{1=>'#a50026',2=>'#d73027',3=>'#f46d43',4=>'#fdae61',5=>'#fee08b',6=>'#ffffbf',7=>'#d9ef8b',8=>'#a6d96a',9=>'#66bd63',10=>'#1a9850',11=>'#006837',},reds3=>{1=>'#fee0d2',2=>'#fc9272',3=>'#de2d26',},reds4=>{1=>'#fee5d9',2=>'#fcae91',3=>'#fb6a4a',4=>'#cb181d',},reds5=>{1=>'#fee5d9',2=>'#fcae91',3=>'#fb6a4a',4=>'#de2d26',5=>'#a50f15',},reds6=>{1=>'#fee5d9',2=>'#fcbba1',3=>'#fc9272',4=>'#fb6a4a',5=>'#de2d26',6=>'#a50f15',},reds7=>{1=>'#fee5d9',2=>'#fcbba1',3=>'#fc9272',4=>'#fb6a4a',5=>'#ef3b2c',6=>'#cb181d',7=>'#99000d',},reds8=>{1=>'#fff5f0',2=>'#fee0d2',3=>'#fcbba1',4=>'#fc9272',5=>'#fb6a4a',6=>'#ef3b2c',7=>'#cb181d',8=>'#99000d',},reds9=>{1=>'#fff5f0',2=>'#fee0d2',3=>'#fcbba1',4=>'#fc9272',5=>'#fb6a4a',6=>'#ef3b2c',7=>'#cb181d',8=>'#a50f15',9=>'#67000d',},set13=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',},set14=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',4=>'#984ea3',},set15=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',4=>'#984ea3',5=>'#ff7f00',},set16=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',4=>'#984ea3',5=>'#ff7f00',6=>'#ffff33',},set17=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',4=>'#984ea3',5=>'#ff7f00',6=>'#ffff33',7=>'#a65628',},set18=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',4=>'#984ea3',5=>'#ff7f00',6=>'#ffff33',7=>'#a65628',8=>'#f781bf',},set19=>{1=>'#e41a1c',2=>'#377eb8',3=>'#4daf4a',4=>'#984ea3',5=>'#ff7f00',6=>'#ffff33',7=>'#a65628',8=>'#f781bf',9=>'#999999',},set23=>{1=>'#66c2a5',2=>'#fc8d62',3=>'#8da0cb',},set24=>{1=>'#66c2a5',2=>'#fc8d62',3=>'#8da0cb',4=>'#e78ac3',},set25=>{1=>'#66c2a5',2=>'#fc8d62',3=>'#8da0cb',4=>'#e78ac3',5=>'#a6d854',},set26=>{1=>'#66c2a5',2=>'#fc8d62',3=>'#8da0cb',4=>'#e78ac3',5=>'#a6d854',6=>'#ffd92f',},set27=>{1=>'#66c2a5',2=>'#fc8d62',3=>'#8da0cb',4=>'#e78ac3',5=>'#a6d854',6=>'#ffd92f',7=>'#e5c494',},set28=>{1=>'#66c2a5',2=>'#fc8d62',3=>'#8da0cb',4=>'#e78ac3',5=>'#a6d854',6=>'#ffd92f',7=>'#e5c494',8=>'#b3b3b3',},set33=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',},set34=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',},set35=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',},set36=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',},set37=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',7=>'#b3de69',},set38=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',7=>'#b3de69',8=>'#fccde5',},set39=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',7=>'#b3de69',8=>'#fccde5',9=>'#d9d9d9',},set310=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',7=>'#b3de69',8=>'#fccde5',9=>'#d9d9d9',10=>'#bc80bd',},set311=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',7=>'#b3de69',8=>'#fccde5',9=>'#d9d9d9',10=>'#bc80bd',11=>'#ccebc5',},set312=>{1=>'#8dd3c7',2=>'#ffffb3',3=>'#bebada',4=>'#fb8072',5=>'#80b1d3',6=>'#fdb462',7=>'#b3de69',8=>'#fccde5',9=>'#d9d9d9',10=>'#bc80bd',11=>'#ccebc5',12=>'#ffed6f',},spectral3=>{1=>'#fc8d59',2=>'#ffffbf',3=>'#99d594',},spectral4=>{1=>'#d7191c',2=>'#fdae61',3=>'#abdda4',4=>'#2b83ba',},spectral5=>{1=>'#d7191c',2=>'#fdae61',3=>'#ffffbf',4=>'#abdda4',5=>'#2b83ba',},spectral6=>{1=>'#d53e4f',2=>'#fc8d59',3=>'#fee08b',4=>'#e6f598',5=>'#99d594',6=>'#3288bd',},spectral7=>{1=>'#d53e4f',2=>'#fc8d59',3=>'#fee08b',4=>'#ffffbf',5=>'#e6f598',6=>'#99d594',7=>'#3288bd',},spectral8=>{1=>'#d53e4f',2=>'#f46d43',3=>'#fdae61',4=>'#fee08b',5=>'#e6f598',6=>'#abdda4',7=>'#66c2a5',8=>'#3288bd',},spectral9=>{1=>'#d53e4f',2=>'#f46d43',3=>'#fdae61',4=>'#fee08b',5=>'#ffffbf',6=>'#e6f598',7=>'#abdda4',8=>'#66c2a5',9=>'#3288bd',},spectral10=>{1=>'#9e0142',2=>'#d53e4f',3=>'#f46d43',4=>'#fdae61',5=>'#fee08b',6=>'#e6f598',7=>'#abdda4',8=>'#66c2a5',9=>'#3288bd',10=>'#5e4fa2',},spectral11=>{1=>'#9e0142',2=>'#d53e4f',3=>'#f46d43',4=>'#fdae61',5=>'#fee08b',6=>'#ffffbf',7=>'#e6f598',8=>'#abdda4',9=>'#66c2a5',10=>'#3288bd',11=>'#5e4fa2',},ylgn3=>{1=>'#f7fcb9',2=>'#addd8e',3=>'#31a354',},ylgn4=>{1=>'#ffffcc',2=>'#c2e699',3=>'#78c679',4=>'#238443',},ylgn5=>{1=>'#ffffcc',2=>'#c2e699',3=>'#78c679',4=>'#31a354',5=>'#006837',},ylgn6=>{1=>'#ffffcc',2=>'#d9f0a3',3=>'#addd8e',4=>'#78c679',5=>'#31a354',6=>'#006837',},ylgn7=>{1=>'#ffffcc',2=>'#d9f0a3',3=>'#addd8e',4=>'#78c679',5=>'#41ab5d',6=>'#238443',7=>'#005a32',},ylgn8=>{1=>'#ffffe5',2=>'#f7fcb9',3=>'#d9f0a3',4=>'#addd8e',5=>'#78c679',6=>'#41ab5d',7=>'#238443',8=>'#005a32',},ylgn9=>{1=>'#ffffe5',2=>'#f7fcb9',3=>'#d9f0a3',4=>'#addd8e',5=>'#78c679',6=>'#41ab5d',7=>'#238443',8=>'#006837',9=>'#004529',},ylgnbu3=>{1=>'#edf8b1',2=>'#7fcdbb',3=>'#2c7fb8',},ylgnbu4=>{1=>'#ffffcc',2=>'#a1dab4',3=>'#41b6c4',4=>'#225ea8',},ylgnbu5=>{1=>'#ffffcc',2=>'#a1dab4',3=>'#41b6c4',4=>'#2c7fb8',5=>'#253494',},ylgnbu6=>{1=>'#ffffcc',2=>'#c7e9b4',3=>'#7fcdbb',4=>'#41b6c4',5=>'#2c7fb8',6=>'#253494',},ylgnbu7=>{1=>'#ffffcc',2=>'#c7e9b4',3=>'#7fcdbb',4=>'#41b6c4',5=>'#1d91c0',6=>'#225ea8',7=>'#0c2c84',},ylgnbu8=>{1=>'#ffffd9',2=>'#edf8b1',3=>'#c7e9b4',4=>'#7fcdbb',5=>'#41b6c4',6=>'#1d91c0',7=>'#225ea8',8=>'#0c2c84',},ylgnbu9=>{1=>'#ffffd9',2=>'#edf8b1',3=>'#c7e9b4',4=>'#7fcdbb',5=>'#41b6c4',6=>'#1d91c0',7=>'#225ea8',8=>'#253494',9=>'#081d58',},ylorbr3=>{1=>'#fff7bc',2=>'#fec44f',3=>'#d95f0e',},ylorbr4=>{1=>'#ffffd4',2=>'#fed98e',3=>'#fe9929',4=>'#cc4c02',},ylorbr5=>{1=>'#ffffd4',2=>'#fed98e',3=>'#fe9929',4=>'#d95f0e',5=>'#993404',},ylorbr6=>{1=>'#ffffd4',2=>'#fee391',3=>'#fec44f',4=>'#fe9929',5=>'#d95f0e',6=>'#993404',},ylorbr7=>{1=>'#ffffd4',2=>'#fee391',3=>'#fec44f',4=>'#fe9929',5=>'#ec7014',6=>'#cc4c02',7=>'#8c2d04',},ylorbr8=>{1=>'#ffffe5',2=>'#fff7bc',3=>'#fee391',4=>'#fec44f',5=>'#fe9929',6=>'#ec7014',7=>'#cc4c02',8=>'#8c2d04',},ylorbr9=>{1=>'#ffffe5',2=>'#fff7bc',3=>'#fee391',4=>'#fec44f',5=>'#fe9929',6=>'#ec7014',7=>'#cc4c02',8=>'#993404',9=>'#662506',},ylorrd3=>{1=>'#ffeda0',2=>'#feb24c',3=>'#f03b20',},ylorrd4=>{1=>'#ffffb2',2=>'#fecc5c',3=>'#fd8d3c',4=>'#e31a1c',},ylorrd5=>{1=>'#ffffb2',2=>'#fecc5c',3=>'#fd8d3c',4=>'#f03b20',5=>'#bd0026',},ylorrd6=>{1=>'#ffffb2',2=>'#fed976',3=>'#feb24c',4=>'#fd8d3c',5=>'#f03b20',6=>'#bd0026',},ylorrd7=>{1=>'#ffffb2',2=>'#fed976',3=>'#feb24c',4=>'#fd8d3c',5=>'#fc4e2a',6=>'#e31a1c',7=>'#b10026',},ylorrd8=>{1=>'#ffffcc',2=>'#ffeda0',3=>'#fed976',4=>'#feb24c',5=>'#fd8d3c',6=>'#fc4e2a',7=>'#e31a1c',8=>'#b10026',},ylorrd9=>{1=>'#ffffcc',2=>'#ffeda0',3=>'#fed976',4=>'#feb24c',5=>'#fd8d3c',6=>'#fc4e2a',7=>'#e31a1c',8=>'#bd0026',9=>'#800026',},};my$color_values={};my$all_color_names={};{for my$n (sort keys %$color_names){my$s=$color_names->{$n};$color_values->{$n }={};my$t=$color_values->{$n};for my$c (sort {length($a)<=> length($b)|| $a cmp $b}keys %$s){$t->{$s->{$c}}=$c unless exists$t->{$s->{$c}};$all_color_names->{$c }=undef}}}our$qr_custom_attribute=qr/^x-([a-z_0-9]+-)*[a-z_0-9]+\z/;sub color_names {$color_names}sub color_name {my ($self,$color,$scheme)=@_;$scheme ||='w3c';$color_values->{$scheme}->{$color}|| $color}sub color_value {my ($self,$color,$scheme)=@_;$scheme ||='w3c';$scheme=$1 if$color =~ s/^([a-z0-9])\///;$color_names->{$scheme}->{$color}|| $color}sub _color_scheme {my ($self,$scheme)=@_;return$scheme if$scheme eq 'inherit';exists$color_names->{$scheme }? $scheme : undef}sub _color {my ($self,$org_color)=@_;$org_color=lc($org_color);$org_color =~ s/\s//g;my$color=$org_color;if ($color =~ s/^(w3c|[a-z]+\d{0,2})\///){my$scheme=$1;return$org_color if exists$color_names->{$scheme}->{$color};$scheme='x11';return (exists$color_names->{$scheme}->{$color}? $org_color : undef)}return$org_color if exists$all_color_names->{$color};defined$self->color_as_hex($color)? $org_color : undef}sub _hsv_to_rgb {my ($h,$s,$v)=@_;my$e=0.0001;if ($s < $e){$v=abs(int(256 * $v));$v=255 if$v > 255;return ($v,$v,$v)}my ($r,$g,$b);$h *= 360;my$h1=int($h / 60);my$f=$h / 60 - $h1;my$p=$v * (1 - $s);my$q=$v * (1 - ($s * $f));my$t=$v * (1 - ($s * (1-$f)));if ($h1==0 || $h1==6){$r=$v;$g=$t;$b=$p}elsif ($h1==1){$r=$q;$g=$v;$b=$p}elsif ($h1==2){$r=$p;$g=$v;$b=$t}elsif ($h1==3){$r=$p;$g=$q;$b=$v}elsif ($h1==4){$r=$t;$g=$p;$b=$v}else {$r=$v;$g=$p;$b=$q}$r=abs(int($r*256));$g=abs(int($g*256));$b=abs(int($b*256));$r=255 if$r > 255;$g=255 if$g > 255;$b=255 if$b > 255;($r,$g,$b)}sub _hsl_to_rgb {my ($h,$s,$l)=@_;my$e=0.0001;if ($s < $e){$l=abs(int(256 * $l));$l=255 if$l > 255;return ($l,$l,$l)}my$t2;if ($l < 0.5){$t2=$l * ($s + 1)}else {$t2=$l + $s - ($l * $s)}my$t1=$l * 2 - $t2;my ($r,$g,$b);$h %=360 if$h >= 360;$h /= 360;my$tr=$h + 1/3;my$tg=$h;my$tb=$h - 1/3;$tr += 1 if$tr < 0;$tr -= 1 if$tr > 1;$tg += 1 if$tg < 0;$tg -= 1 if$tg > 1;$tb += 1 if$tb < 0;$tb -= 1 if$tb > 1;my$i=0;my@temp3=($tr,$tg,$tb);my@rc;for my$c ($r,$g,$b){my$t3=$temp3[$i++];if ($t3 < 1/6){$c=$t1 + ($t2 - $t1)* 6 * $t3}elsif ($t3 < 1/2){$c=$t2}elsif ($t3 < 2/3){$c=$t1 + ($t2 - $t1)* 6 * (2/3 - $t3)}else {$c=$t1}$c=int($c * 256);$c=255 if$c > 255;push@rc,$c}@rc}my$factors={'rgb'=>[255,255,255,255 ],'hsv'=>[1,1,1,255 ],'hsl'=>[360,1,1,255 ],};sub color_as_hex {my ($self,$color,$scheme)=@_;$scheme ||='w3c';$color=lc($color);$scheme=$1 if$color =~ s/^([a-z0-9])\///;return$color_names->{$scheme}->{$color}if exists$color_names->{$scheme}->{$color};return$color_names->{x11}->{$color}if exists$color_names->{x11}->{$color};my$qr_num=qr/\s*
  	((?:[0-9]{1,3}%?) |		# 12%, 10, 2 etc
  	 (?:[0-9]?\.[0-9]{1,5}) )	# .1, 0.1, 2.5 etc
      /x;if ($color =~ /^(rgb|hsv|hsl)\($qr_num,$qr_num,$qr_num(?:,$qr_num)?\s*\)\z/){my$r=$2;my$g=$3;my$b=$4;my$a=$5;$a=255 unless defined$a;my$format=$1;my$i=0;for my$c ($r,$g,$b,$a){my$factor=$factors->{$format}->[$i++];if ($c =~ /^([0-9]+)%\z/){$c=$1 * $factor / 100}else {$c=$1 * $factor if$c =~ /^([0-9]+\.[0-9]+)\z/}}($r,$g,$b)=Graph::Easy::_hsv_to_rgb($r,$g,$b)if$format eq 'hsv';($r,$g,$b)=Graph::Easy::_hsl_to_rgb($r,$g,$b)if$format eq 'hsl';$a=int($a);$a=255 if$a > 255;$color=sprintf("#%02x%02x%02x%02x",$r,$g,$b,$a)}$color="#$1$1$2$2$3$3" if$color =~ /^#([a-f0-9])([a-f0-9])([a-f[0-9])\z/;$color =~ s/^(#......)ff\z/$1/i;return undef unless$color =~ /^#([a-f0-9]{6}|[a-f0-9]{8})\z/i;$color}sub text_style {my ($self,$style)=@_;return$style if$style =~ /^(normal|none|)\z/;my@styles=split /\s+/,$style;return undef if grep(!/^(underline|overline|line-through|italic|bold)\z/,@styles);$style}sub text_styles {my ($self)=@_;my$style=$self->attribute('textstyle');return {none=>1 }if$style =~ /^(normal|none)\z/;return {}if$style eq '';my$styles={};for my$key (split /\s+/,$style){$styles->{$key}=1}$styles}sub text_styles_as_css {my ($self,$align,$fontsize)=@_;my$style='';my$ts=$self->text_styles();$style .= " font-style: italic;" if$ts->{italic};$style .= " font-weight: bold;" if$ts->{bold};if ($ts->{underline}|| $ts->{none}|| $ts->{overline}|| $ts->{'line-through'}){my@s;for my$k (qw/underline overline line-through none/){push@s,$k if$ts->{$k}}my$s=join(' ',@s);$style .= " text-decoration: $s;" if$s}my$fs=$self->raw_attribute('fontsize');$style .= " font-size: $fs;" if$fs;if (!$align){my$al=$self->attribute('align');$style .= " text-align: $al;" if$al}$style}sub _font_size_in_pixels {my ($self,$em,$val)=@_;my$fs=$val;$fs=$self->attribute('fontsize')|| '' if!defined$val;return$em if$fs eq '';if ($fs =~ /^([\d.]+)em\z/){$fs=$1 * $em}elsif ($fs =~ /^([\d.]+)%\z/){$fs=($1 / 100)* $em}elsif ($fs =~ /^([\d.]+)px\z/){$fs=int($1 || 5)}else {$self->error("Illegal fontsize '$fs'")}$fs}my$modifier={forward=>0,front=>0,left=>-90,right=>+90,back=>+180,};my$dirs={up=>0,north=>0,down=>180,south=>180,west=>270,east=>90,0=>0,180=>180,90=>90,270=>270,};my$sides={north=>'north',south=>'south',east=>'east',west=>'west',up=>'north',down=>'south',0=>'north',180=>'south',90=>'east',270=>'west',};sub _direction_as_number {my ($self,$dir)=@_;my$d=$dirs->{$dir};$self->_croak("$dir is not an absolut direction")unless defined$d;$d}sub _direction_as_side {my ($self,$dir)=@_;return unless exists$sides->{$dir};$sides->{$dir}}sub _flow_as_direction {my ($self,$inflow,$dir)=@_;if ($dir =~ /^(south|north|west|east|up|down|0|90|180|270)\z/){return$dirs->{$dir}}my$in=$dirs->{$inflow};my$modifier=$modifier->{$dir};$self->_croak("$inflow,$dir results in undefined inflow")unless defined$in;$self->_croak("$inflow,$dir results in undefined modifier")unless defined$modifier;my$out=$in + $modifier;$out -= 360 while$out >= 360;$out += 360 while$out < 0;$out}sub _flow_as_side {my ($self,$inflow,$dir)=@_;if ($dir =~ /^(south|north|west|east|up|down|0|90|180|270)\z/){return$sides->{$dir}}my$in=$dirs->{$inflow};my$modifier=$modifier->{$dir};$self->_croak("$inflow,$dir results in undefined inflow")unless defined$in;$self->_croak("$inflow,$dir results in undefined modifier")unless defined$modifier;my$out=$in + $modifier;$out -= 360 if$out >= 360;$sides->{$out}}sub _direction {my ($self,$dir)=@_;$dir =~ /^(south|east|west|north|down|up|0|90|180|270|front|forward|back|left|right)\z/ ? $dir : undef}sub _border_attribute_as_html {my ($style,$width,$color,$scheme)=@_;$style ||='';$width='' unless defined$width;$color='' unless defined$color;$color=Graph::Easy->color_as_hex($color,$scheme)||'' if$color !~ /^#/;return$style if$style =~ /^(none|)\z/;$width='' if$style =~ /^double/;$width='0.5em' if$style eq 'broad';$width='4px' if$style =~ /^bold/;$width='1em' if$style eq 'wide';$style='solid' if$style =~ /(broad|wide|bold)\z/;$style='dashed' if$style eq 'bold-dash';$style='double' if$style eq 'double-dash';$width=$width.'px' if$width =~ /^\s*\d+\s*\z/;return '' if$width eq '' && $style ne 'double';my$val=join(" ",$style,$width,$color);$val =~ s/^\s+//;$val =~ s/\s+\z//;$val}sub _border_attribute {my ($style,$width,$color)=@_;$style ||='';$width='' unless defined$width;$color='' unless defined$color;return$style if$style =~ /^(none|)\z/;$width=$width.'px' if$width =~ /^\s*\d+\s*\z/;my$val=join(" ",$style,$width,$color);$val =~ s/^\s+//;$val =~ s/\s+\z//;$val}sub _border_width_in_pixels {my ($self,$em)=@_;my$bw=$self->attribute('borderwidth')|| '0';return 0 if$bw eq '0';my$bs=$self->attribute('borderstyle')|| 'none';return 0 if$bs eq 'none';return 3 if$bs =~ /^bold/;return$em / 2 if$bs =~ /^broad/;return$em if$bs =~ /^wide/;return$bw if$bw =~ /^([\d.]+)\z/;if ($bw =~ /^([\d.]+)em\z/){$bw=$1 * $em}elsif ($bw =~ /^([\d.]+)%\z/){$bw=($1 / 100)* $em}elsif ($bw =~ /^([\d.]+)px\z/){$bw=$1}else {$self->error("Illegal borderwidth '$bw'")}$bw}sub _angle {my ($self,$angle)=@_;return undef unless$angle =~ /^([+-]?\d{1,3}|south|west|east|north|up|down|left|right|front|back|forward)\z/;$angle}sub _uint {my ($self,$val)=@_;return undef unless$val =~ /^\d+\z/;$val=abs(int($val));$val=4 * 1024 if$val > 4 * 1024;$val}sub _font {my ($self,$font)=@_;$font}sub split_border_attributes {my ($self,$border)=@_;return ('none',undef,undef)if$border eq '0';my$style;$border =~ s/(solid|dotted|dot-dot-dash|dot-dash|dashed|double-dash|double|bold-dash|bold|broad|wide|wave|none)/$style=$1;''/eg;$style ||='solid';$border =~ s/(\d+(px|em|%))//g;my$width=$1 || '';$width =~ s/[^0-9]+//g;$border =~ s/\s+//g;my$color=$border;$color=Graph::Easy->_color($border)if$border ne '';$self->error("$border is not a valid bordercolor")unless defined$color;$width=undef if$width eq '';$color=undef if$color eq '';$style=undef if$style eq '';($style,$width,$color)}use constant {ATTR_STRING=>0,ATTR_COLOR=>1,ATTR_ANGLE=>2,ATTR_PORT=>3,ATTR_UINT=>4,ATTR_URL=>5,ATTR_LIST=>6,ATTR_LCTEXT=>7,ATTR_TEXT=>8,ATTR_NO_INHERIT=>6,ATTR_DESC_SLOT=>0,ATTR_MATCH_SLOT=>1,ATTR_DEFAULT_SLOT=>2,ATTR_EXAMPLE_SLOT=>3,ATTR_TYPE_SLOT=>4,};my$attributes={all=>{align=>["The alignment of the label text.",[qw/center left right/ ],{default=>'center',group=>'left',edge=>'left' },'right',undef,"graph { align: left; label: My Graph; }\nnode {align: left;}\n ( Nodes:\n [ Right\\nAligned ] { align: right; } -- label\\n text -->\n { align: left; }\n [ Left\\naligned ] )",],autolink=>["If set to something else than 'none', will use the appropriate attribute to automatically generate the L<link>, unless L<link> is already set. See the section about labels, titles, names and links for reference.",[qw/label title name none inherit/ ],{default=>'inherit',graph=>'none' },'title',],autotitle=>["If set to something else than 'none', will use the appropriate attribute to automatically generate the L<title>, unless L<title> is already set. See the section about labels, titles, names and links for reference.",[qw/label name none link inherit/ ],{default=>'inherit',graph=>'none' },'label',],autolabel=>["Will restrict the L<label> text to N characters. N must be greater than 10. See the section about labels, titles, names and links for reference.",qr/^(name\s*,\s*)?[\d]{2,5}\z/,{default=>'inherit',graph=>'' },'20',undef,"graph { autolabel: 20; autotitle: name; }\n\n[ Bonn ]\n -- Acme Travels Incorporated -->\n  [ Frankfurt (Main) / Flughafen ]",],background=>["The background color, e.g. the color B<outside> the shape. Do not confuse with L<fill>. If set to inherit, the object will inherit the L<fill> color (B<not> the background color!) of the parent e.g. the enclosing group or graph. See the section about color names and values for reference.",undef,'inherit','rgb(255,0,0)',ATTR_COLOR,"[ Crimson ] { shape: circle; background: crimson; }\n -- Aqua Marine --> { background: #7fffd4; }\n [ Misty Rose ]\n  { background: white; fill: rgb(255,228,221); shape: ellipse; }",],class=>['The subclass of the object. See the section about class names for reference.',qr/^(|[a-zA-Z][a-zA-Z0-9_]*)\z/,'','mynodeclass',ATTR_LCTEXT,],color=>['The foreground/text/label color. See the section about color names and values for reference.',undef,'black','rgb(255,255,0)',ATTR_COLOR,"[ Lime ] { color: limegreen; }\n -- label --> { color: blue; labelcolor: red; }\n [ Dark Orange ] { color: rgb(255,50%,0.01); }",],colorscheme=>["The colorscheme to use for all color values. See the section about color names and values for reference and a list of possible values.",'_color_scheme',{default=>'inherit',graph=>'w3c',},'x11',ATTR_STRING,"graph { colorscheme: accent8; } [ 1 ] { fill: 1; }\n" ." -> \n [ 3 ] { fill: 3; }\n" ." -> \n [ 4 ] { fill: 4; }\n" ." -> \n [ 5 ] { fill: 5; }\n" ." -> \n [ 6 ] { fill: 6; }\n" ." -> \n [ 7 ] { fill: 7; }\n" ." -> \n [ 8 ] { fill: 8; }\n",],comment=>["A free-form text field containing a comment on this object. This will be embedded into output formats if possible, e.g. in HTML, SVG and Graphviz, but not ASCII or Boxart.",undef,'','(C) by Tels 2007. All rights reserved.',ATTR_STRING,"graph { comment: German capitals; }\n [ Bonn ] --> [ Berlin ]",],fill=>["The fill color, e.g. the color inside the shape. For the graph, this is the background color for the label. For edges, defines the color inside the arrow shape. See also L<background>. See the section about color names and values for reference.",undef,{default=>'white',graph=>'inherit',edge=>'inherit',group=>'#a0d0ff','group.anon'=>'white','node.anon'=>'inherit' },'rgb(255,0,0)',ATTR_COLOR,"[ Crimson ]\n  {\n  shape: circle;\n  background: yellow;\n  fill: red;\n  border: 3px solid blue;\n  }\n-- Aqua Marine -->\n  {\n  arrowstyle: filled;\n  fill: red;\n  }\n[ Two ]",],'fontsize'=>["The size of the label text, best expressed in I<em> (1.0em, 0.5em etc) or percent (100%, 50% etc)",qr/^\d+(\.\d+)?(em|px|%)?\z/,{default=>'0.8em',graph=>'1em',node=>'1em',},'50%',undef,"graph { fontsize: 200%; label: Sample; }\n\n ( Nodes:\n [ Big ] { fontsize: 1.5em; color: white; fill: darkred; }\n  -- Small -->\n { fontsize: 0.2em; }\n  [ Normal ] )",],flow=>["The general direction in which edges will leave nodes first. On edges, influeces where the target node is place. Please see the section about <a href='hinting.html#flow'>flow control</a> for reference.",'_direction',{graph=>'east',default=>'inherit' },'south',undef,"graph { flow: up; }\n [ Enschede ] { flow: left; } -> [ Bielefeld ] -> [ Wolfsburg ]",],font=>['A prioritized list of lower-case, unquoted values, separated by a comma. Values are either font family names (like "times", "arial" etc) or generic family names (like "serif", "cursive", "monospace"), the first recognized value will be used. Always offer a generic name as the last possibility.','_font',{default=>'serif',edge=>'sans-serif' },'arial, helvetica, sans-serif',undef,"graph { font: vinque, georgia, utopia, serif; label: Sample; }" ."\n\n ( Nodes:\n [ Webdings ] { font: Dingbats, webdings; }\n"." -- FlatLine -->\n { font: flatline; }\n  [ Normal ] )",],id=>["A unique identifier for this object, consisting only of letters, digits, or underscores.",qr/^[a-zA-Z0-9_]+\z/,'','Bonn123',undef,"[ Bonn ] --> { id: 123; } [ Berlin ]",],label=>["The text displayed as label. If not set, equals the name (for nodes) or no label (for edges, groups and the graph itself).",undef,undef,'My label',ATTR_TEXT,],linkbase=>['The base URL prepended to all generated links. See the section about links for reference.',undef,{default=>'inherit',graph=>'/wiki/index.php/',},'http://en.wikipedia.org/wiki/',ATTR_URL,],link=>['The link part, appended onto L<linkbase>. See the section about links for reference.',undef,'','Graph',ATTR_TEXT,<<LINK_EOF ],title=>["The text displayed as mouse-over for nodes/edges, or as the title for the graph. If empty, no title will be generated unless L<autotitle> is set.",undef,'','My title',ATTR_TEXT,],format=>["The formatting language of the label. The default, C<none> means nothing special will be done. When set to C<pod>, formatting codes like <code>B&lt;bold&gt;</code> will change the formatting of the label. See the section about label text formatting for reference.",['none','pod' ],'none','pod',undef,<<EOF ],textstyle=>["The style of the label text. Either 'none', or any combination (separated with spaces) of 'underline', 'overline', 'bold', 'italic', 'line-through'. 'none' disables underlines on links.",'text_style','','underline italic bold',undef,<<EOF ],textwrap=>["The default C<none> makes the label text appear exactly as it was written, with <a href='syntax.html'>manual line breaks</a> applied. When set to a positive number, the label text will be wrapped after this number of characters. When set to C<auto>, the label text will be wrapped to make the node size as small as possible, depending on output format this may even be dynamic. When not C<none>, manual line breaks and alignments on them are ignored.",qr/^(auto|none|\d{1,4})/,{default=>'inherit',graph=>'none' },'auto',undef,"node { textwrap: auto; }\n ( Nodes:\n [ Frankfurt (Oder) liegt an der\n   ostdeutschen Grenze und an der Oder ] -->\n [ Städte innerhalb der\n   Ost-Westfahlen Region mit sehr langen Namen] )",],},node=>{bordercolor=>['The color of the L<border>. See the section about color names and values for reference.',undef,{default=>'#000000' },'rgb(255,255,0)',ATTR_COLOR,"node { border: black bold; }\n[ Black ]\n --> [ Red ]      { bordercolor: red; }\n --> [ Green ]    { bordercolor: green; }",],borderstyle=>['The style of the L<border>. The special styles "bold", "broad", "wide", "double-dash" and "bold-dash" will set and override the L<borderwidth>.',[qw/none solid dotted dashed dot-dash dot-dot-dash double wave bold bold-dash broad double-dash wide/ ],{default=>'none','node.anon'=>'none','group.anon'=>'none',node=>'solid',group=>'dashed' },'dotted',undef,"node { border: dotted; }\n[ Dotted ]\n --> [ Dashed ]      { borderstyle: dashed; }\n --> [ broad ]    { borderstyle: broad; }",],borderwidth=>['The width of the L<border>. Certain L<border>-styles will override the width.',qr/^\d+(px|em)?\z/,'1','2px',],border=>['The border. Can be any combination of L<borderstyle>, L<bordercolor> and L<borderwidth>.',undef,{default=>'none','node.anon'=>'none','group.anon'=>'none',node=>'solid 1px #000000',group=>'dashed 1px #000000' },'dotted red',undef,"[ Normal ]\n --> [ Bold ]      { border: bold; }\n --> [ Broad ]     { border: broad; }\n --> [ Wide ]      { border: wide; }\n --> [ Bold-Dash ] { border: bold-dash; }",],basename=>["Controls the base name of an autosplit node. Ignored for all other nodes. Unless set, it is generated automatically from the node parts. Please see the section about <a href='hinting.html#autosplit'>autosplit</a> for reference.",undef,'','123',undef,"[ A|B|C ] { basename: A } [ 1 ] -> [ A.2 ]\n [ A|B|C ] [ 2 ] -> [ ABC.2 ]",],group=>["Puts the node into this group.",undef,'','Cities',undef,"[ A ] { group: Cities:; } ( Cities: [ B ] ) [ A ] --> [ B ]",],size=>['The size of the node in columns and rows. Must be greater than 1 in each direction.',qr/^\d+\s*,\s*\d+\z/,'1,1','3,2',],rows=>['The size of the node in rows. See also L<size>.',qr/^\d+\z/,'1','3',],columns=>['The size of the node in columns. See also L<size>.',qr/^\d+\z/,'1','2',],offset=>['The offset of this node from the L<origin> node, in columns and rows. Only used if you also set the L<origin> node.',qr/^[+-]?\d+\s*,\s*[+-]?\d+\z/,'0,0','3,2',undef,"[ A ] -> [ B ] { origin: A; offset: 2,2; }",],origin=>['The name of the node, that this node is relativ to. See also L<offset>.',undef,'','Cluster A',],pointshape=>["Controls the style of a node that has a L<shape> of 'point'.",[qw/star square dot circle cross diamond invisible x/ ],'star','square',undef,"node { shape: point; }\n\n [ A ]"."\n -> [ B ] { pointshape: circle; }" ."\n -> [ C ] { pointshape: cross; }" ."\n -> [ D ] { pointshape: diamond; }" ."\n -> [ E ] { pointshape: dot; }" ."\n -> [ F ] { pointshape: invisible; }" ."\n -> [ G ] { pointshape: square; }" ."\n -> [ H ] { pointshape: star; }" ."\n -> [ I ] { pointshape: x; }" ."\n -> [ ☯ ] { shape: none; }" ],pointstyle=>["Controls the style of the L<pointshape> of a node that has a L<shape> of 'point'. " ."Note for backwards compatibility reasons, the shape names 'star', 'square', 'dot', 'circle', 'cross', 'diamond' and 'invisible' "."are also supported, but should not be used here, instead set them via L<pointshape>.",[qw/closed filled star square dot circle cross diamond invisible x/ ],'filled','open',undef,"node { shape: point; pointstyle: closed; pointshape: diamond; }\n\n [ A ] --> [ B ] { pointstyle: filled; }",],rank=>["The rank of the node, used by the layouter to find the order and placement of nodes. " ."Set to C<auto> (the default), C<same> (useful for node lists) or a positive number. " ."See the section about ranks for reference and more examples.",qr/^(auto|same|\d{1,6})\z/,'auto','same',undef,"[ Bonn ], [ Berlin ] { rank: same; }\n [ Bonn ] -> [ Cottbus ] -> [ Berlin ]",],rotate=>["The rotation of the node shape, either an absolute value (like C<south>, C<up>, C<down> or C<123>), or a relative value (like C<+12>, C<-90>, C<left>, C<right>). For relative angles, the rotation will be based on the node's L<flow>. Rotation is clockwise.",undef,'0','180',ATTR_ANGLE,"[ Bonn ] { rotate: 45; } -- ICE --> \n [ Berlin ] { shape: triangle; rotate: -90; }",],shape=>["The shape of the node. Nodes with shape 'point' (see L<pointshape>) have a fixed size and do not display their label. The border of such a node is the outline of the C<pointshape>, and the fill is the inside of the C<pointshape>. When the C<shape> is set to the value 'img', the L<label> will be interpreted as an external image resource to display. In this case attributes like L<color>, L<fontsize> etc. are ignored.",[qw/circle diamond edge ellipse hexagon house invisible invhouse invtrapezium invtriangle octagon parallelogram pentagon point triangle trapezium septagon rect rounded none img/ ],'rect','circle',undef,"[ Bonn ] -> \n [ Berlin ] { shape: circle; }\n -> [ Regensburg ] { shape: rounded; }\n -> [ Ulm ] { shape: point; }\n -> [ Wasserburg ] { shape: invisible; }\n -> [ Augsburg ] { shape: triangle; }\n -> [ House ] { shape: img; label: img/house.png;\n          border: none; title: My House; fill: inherit; }",],},graph=>{bordercolor=>['The color of the L<border>. See the section about color names and values for reference.',undef,{default=>'#000000' },'rgb(255,255,0)',ATTR_COLOR,"node { border: black bold; }\n[ Black ]\n --> [ Red ]      { bordercolor: red; }\n --> [ Green ]    { bordercolor: green; }",],borderstyle=>['The style of the L<border>. The special styles "bold", "broad", "wide", "double-dash" and "bold-dash" will set and override the L<borderwidth>.',[qw/none solid dotted dashed dot-dash dot-dot-dash double wave bold bold-dash broad double-dash wide/ ],{default=>'none','node.anon'=>'none','group.anon'=>'none',node=>'solid',group=>'dashed' },'dotted',undef,"node { border: dotted; }\n[ Dotted ]\n --> [ Dashed ]      { borderstyle: dashed; }\n --> [ broad ]    { borderstyle: broad; }",],borderwidth=>['The width of the L<border>. Certain L<border>-styles will override the width.',qr/^\d+(px|em)?\z/,'1','2px',],border=>['The border. Can be any combination of L<borderstyle>, L<bordercolor> and L<borderwidth>.',undef,{default=>'none','node.anon'=>'none','group.anon'=>'none',node=>'solid 1px #000000',group=>'dashed 1px #000000' },'dotted red',undef,"[ Normal ]\n --> [ Bold ]      { border: bold; }\n --> [ Broad ]     { border: broad; }\n --> [ Wide ]      { border: wide; }\n --> [ Bold-Dash ] { border: bold-dash; }",],gid=>["A unique ID for the graph. Useful if you want to include two graphs into one HTML page.",qr/^\d+\z/,'','123',],labelpos=>["The position of the graph label.",[qw/top bottom/ ],'top','bottom',ATTR_LIST,"graph { labelpos: bottom; label: My Graph; }\n\n [ Buxtehude ] -> [ Fuchsberg ]\n" ],output=>["The desired output format. Only used when calling Graph::Easy::output(), or by mediawiki-graph.",[qw/ascii html svg graphviz boxart debug/ ],'','ascii',ATTR_LIST,"graph { output: debug; }" ],root=>["The name of the root node, given as hint to the layouter to start the layout there. When not set, the layouter will pick a node at semi-random.",undef,'','My Node',ATTR_TEXT,"graph { root: B; }\n # B will be at the left-most place\n [ A ] --> [ B ] --> [ C ] --> [ D ] --> [ A ]",],type=>["The type of the graph, either undirected or directed.",[qw/directed undirected/ ],'directed','undirected',ATTR_LIST,"graph { type: undirected; }\n [ A ] --> [ B ]",],},edge=>{style=>['The line style of the edge. When set on the general edge class, this attribute changes only the style of all solid edges to the specified one.',[qw/solid dotted dashed dot-dash dot-dot-dash bold bold-dash double-dash double wave broad wide invisible/],'solid','dotted',undef,"[ A ] -- solid --> [ B ]\n .. dotted ..> [ C ]\n -  dashed - > [ D ]\n -- bold --> { style: bold; } [ E ]\n -- broad --> { style: broad; } [ F ]\n -- wide --> { style: wide; } [ G ]",],arrowstyle=>['The style of the arrow. Open arrows are vee-shaped and the bit inside the arrow has the color of the L<background>. Closed arrows are triangle shaped, with a background-color fill. Filled arrows are closed, too, but use the L<fill> color for the inside. If the fill color is not set, the L<color> attribute will be used instead. An C<arrowstyle> of none creates undirected edges just like "[A] -- [B]" would do.',[qw/none open closed filled/ ],'open','closed',undef,"[ A ] -- open --> [ B ]\n -- closed --> { arrowstyle: closed; } [ C ]\n -- filled --> { arrowstyle: filled; } [ D ]\n -- filled --> { arrowstyle: filled; fill: lime; } [ E ]\n -- none --> { arrowstyle: none; } [ F ]",],arrowshape=>['The basic shape of the arrow. Can be combined with each of L<arrowstyle>.',[qw/triangle box dot inv line diamond cross x/ ],'triangle','box',undef,"[ A ] -- triangle --> [ B ]\n -- box --> { arrowshape: box; } [ C ]\n" ." -- inv --> { arrowshape: inv; } [ D ]\n -- diamond --> { arrowshape: diamond; } [ E ]\n" ." -- dot --> { arrowshape: dot; } [ F ]\n" ." -- line --> { arrowshape: line; } [ G ] \n" ." -- plus --> { arrowshape: cross; } [ H ] \n" ." -- x --> { arrowshape: x; } [ I ] \n\n" ."[ a ] -- triangle --> { arrowstyle: filled; } [ b ]\n"." -- box --> { arrowshape: box; arrowstyle: filled; } [ c ]\n" ." -- inv --> { arrowshape: inv; arrowstyle: filled; } [ d ]\n" ." -- diamond --> { arrowshape: diamond; arrowstyle: filled; } [ e ]\n" ." -- dot --> { arrowshape: dot; arrowstyle: filled; } [ f ]\n" ." -- line --> { arrowshape: line; arrowstyle: filled; } [ g ] \n" ." -- plus --> { arrowshape: cross; arrowstyle: filled; } [ h ] \n" ." -- x --> { arrowshape: x; arrowstyle: filled; } [ i ] \n",],labelcolor=>['The text color for the label. If unspecified, will fall back to L<color>. See the section about color names and values for reference.',undef,'black','rgb(255,255,0)',ATTR_COLOR,"[ Bonn ] -- ICE --> { labelcolor: blue; }\n [ Berlin ]",],start=>['The starting port of this edge. See <a href="hinting.html#joints">the section about joints</a> for reference.',qr/^(south|north|east|west|left|right|front|back)(\s*,\s*-?\d{1,4})?\z/,'','front, 0',ATTR_PORT,"[ Bonn ] -- NORTH --> { start: north; end: north; } [ Berlin ]",],end=>['The ending port of this edge. See <a href="hinting.html#joints">the section about joints</a> for reference.',qr/^(south|north|east|west|right|left|front|back)(\s*,\s*-?\d{1,4})?\z/,'','back, 0',ATTR_PORT,"[ Bonn ] -- NORTH --> { start: south; end: east; } [ Berlin ]",],minlen=>['The minimum length of the edge, in cells. Defaults to 1. The minimum length is ' .'automatically increased for edges with joints.',undef,'1','4',ATTR_UINT,"[ Bonn ] -- longer --> { minlen: 3; } [ Berlin ]\n[ Bonn ] --> [ Potsdam ] { origin: Bonn; offset: 2,2; }",],autojoin=>['Controls whether the layouter can join this edge automatically with other edges leading to the same node. C<never> means this edge will never joined with another edge automatically, C<always> means always (if possible), even if the attributes on the edges do not match. C<equals> means only edges with the same set of attributes will be automatically joined together. See also C<autosplit>.',[qw/never always equals/],'never','always',undef,"[ Bonn ], [ Aachen ]\n -- 1 --> { autojoin: equals; } [ Berlin ]",],autosplit=>['Controls whether the layouter replace multiple edges leading from one node to other nodes with one edge splitting up. C<never> means this edge will never be part of such a split, C<always> means always (if possible), even if the attributes on the edges do not match. C<equals> means only edges with the same set of attributes will be automatically split up. See also C<autojoin>.',[qw/never always equals/],'never','always',undef,"[ Bonn ]\n -- 1 --> { autosplit: equals; } [ Berlin ], [ Aachen ]",],},group=>{bordercolor=>['The color of the L<border>. See the section about color names and values for reference.',undef,{default=>'#000000' },'rgb(255,255,0)',ATTR_COLOR,"node { border: black bold; }\n[ Black ]\n --> [ Red ]      { bordercolor: red; }\n --> [ Green ]    { bordercolor: green; }",],borderstyle=>['The style of the L<border>. The special styles "bold", "broad", "wide", "double-dash" and "bold-dash" will set and override the L<borderwidth>.',[qw/none solid dotted dashed dot-dash dot-dot-dash double wave bold bold-dash broad double-dash wide/ ],{default=>'none','node.anon'=>'none','group.anon'=>'none',node=>'solid',group=>'dashed' },'dotted',undef,"node { border: dotted; }\n[ Dotted ]\n --> [ Dashed ]      { borderstyle: dashed; }\n --> [ broad ]    { borderstyle: broad; }",],borderwidth=>['The width of the L<border>. Certain L<border>-styles will override the width.',qr/^\d+(px|em)?\z/,'1','2px',],border=>['The border. Can be any combination of L<borderstyle>, L<bordercolor> and L<borderwidth>.',undef,{default=>'none','node.anon'=>'none','group.anon'=>'none',node=>'solid 1px #000000',group=>'dashed 1px #000000' },'dotted red',undef,"[ Normal ]\n --> [ Bold ]      { border: bold; }\n --> [ Broad ]     { border: broad; }\n --> [ Wide ]      { border: wide; }\n --> [ Bold-Dash ] { border: bold-dash; }",],nodeclass=>['The class into which all nodes of this group are put.',qr/^(|[a-zA-Z][a-zA-Z0-9_]*)\z/,'','cities',],edgeclass=>['The class into which all edges defined in this group are put. This includes edges that run between two nodes belonging to the same group.',qr/^(|[a-zA-Z][a-zA-Z0-9_]*)\z/,'','connections',],rank=>["The rank of the group, used by the layouter to find the order and placement of group. " ."Set to C<auto> (the default), C<same> or a positive number. " ."See the section about ranks for reference and more examples.",qr/^(auto|same|\d{1,6})\z/,'auto','same',undef,"( Cities: [ Bonn ], [ Berlin ] ) { rank: 0; } ( Rivers: [ Rhein ], [ Sieg ] ) { rank: 0; }",],root=>["The name of the root node, given as hint to the layouter to start the layout there. When not set, the layouter will pick a node at semi-random.",undef,'','My Node',ATTR_TEXT,"( Cities: [ A ] --> [ B ] --> [ C ] --> [ D ] --> [ A ] ) { root: B; }",],group=>["Puts the group inside this group, nesting the two groups inside each other.",undef,'','Cities',undef,"( Cities: [ Bonn ] ) ( Rivers: [ Rhein ] ) { group: Cities:; }",],labelpos=>["The position of the group label.",[qw/top bottom/ ],'top','bottom',ATTR_LIST,"group { labelpos: bottom; }\n\n ( My Group: [ Buxtehude ] -> [ Fuchsberg ] )\n" ],},special=>{},};sub _allow_special_attributes {my ($self,$att)=@_;$attributes->{special}=$att}sub _drop_special_attributes {my ($self)=@_;$attributes->{special}={}}sub _attribute_entries {$attributes}sub border_attribute {my ($self,$class)=@_;my ($style,$width,$color);my$g=$self;$g=$self->{graph}if ref($self->{graph});my ($def_style,$def_color,$def_width);if (defined$class){$style=$g->attribute($class,'borderstyle');return$style if$style eq 'none';$def_style=$g->default_attribute('borderstyle');$width=$g->attribute($class,'borderwidth');$def_width=$g->default_attribute($class,'borderwidth');$width='' if$def_width eq $width;$color=$g->attribute($class,'bordercolor');$def_color=$g->default_attribute($class,'bordercolor');$color='' if$def_color eq $color}else {$style=$self->attribute('borderstyle');return$style if$style eq 'none';$def_style=$self->default_attribute('borderstyle');$width=$self->attribute('borderwidth');$def_width=$self->default_attribute('borderwidth');$width='' if$def_width eq $width;$color=$self->attribute('bordercolor');$def_color=$self->default_attribute('bordercolor');$color='' if$def_color eq $color}return '' if$def_style eq $style and $color eq '' && $width eq '';Graph::Easy::_border_attribute($style,$width,$color)}sub _unknown_attribute {my ($self,$name,$class)=@_;if ($self->{_warn_on_unknown_attributes}){$self->warn("Ignoring unknown attribute '$name' for class $class")}else {$self->error("Error in attribute: '$name' is not a valid attribute name for a $class")}return}sub default_attribute {my ($self,$class,$name)=@_;if (scalar @_==2){$name=$class;$class=$self->{class}|| 'graph'}my$base_class=$class;$base_class =~ s/\..*//;$name=$att_aliases->{$name}if exists$att_aliases->{$name};return '' if$name =~ $qr_custom_attribute;my$s=$attributes->{special};$s=$s->{$class}if exists$s->{$class};my$entry=$s->{$name}|| $attributes->{all}->{$name}|| $attributes->{$base_class}->{$name};return$self->_unknown_attribute($name,$class)unless ref($entry);my$def=$entry->[ATTR_DEFAULT_SLOT ];my$val=$def;if (ref$def){$val=$def->{$class};$val=$def->{$base_class}unless defined$val;$val=$def->{default}unless defined$val}$val}sub raw_attribute {my ($self,$name)=@_;$name=$att_aliases->{$name}if exists$att_aliases->{$name};my$class=$self->{class}|| 'graph';my$base_class=$class;$base_class =~ s/\..*//;my$s=$attributes->{special};$s=$s->{$class}if exists$s->{$class};my$entry=$s->{$name}|| $attributes->{all}->{$name}|| $attributes->{$base_class}->{$name};$entry=['',undef,'','',ATTR_STRING,'' ]if$name =~ $qr_custom_attribute;return$self->_unknown_attribute($name,$class)unless ref($entry);my$type=$entry->[ATTR_TYPE_SLOT ]|| ATTR_STRING;my$val;my$a=$self->{att};if (exists$a->{graph}){$val=$a->{graph}->{$name}if exists$a->{graph}->{$name}}else {$val=$a->{$name}if exists$a->{$name}}$val=$self->{group}->color_attribute('fill')if$name eq 'background' && ref$self->{group};return$val if!defined$val || $val ne 'inherit' || $name =~ /^x-([a-z_]+-)*[a-z_]+([0-9]*)\z/;return$val if$class eq 'graph';my@tries=();if ($class =~ /\./){my$parent_class=$class;$parent_class =~ s/\..*//;push@tries,$parent_class}my$g=$self->{graph};$g={att=>{}}unless ref($g);$val=undef;for my$try (@tries){my$att=$g->{att}->{$try};$val=$att->{$name}if exists$att->{$name};if (!defined$val){my$def=$entry->[ATTR_DEFAULT_SLOT ];$val=$def;if (ref$def){$val=$def->{$try};if (!defined$val && $try =~ /\./){my$base=$try;$base =~ s/\..*//;$val=$def->{$base}}$val=$def->{default}unless defined$val}}if ($name ne 'label'){$self->warn("Uninitialized default for attribute '$name' on class '$try'\n")unless defined$val}return$val if$type >= ATTR_NO_INHERIT;return$val if defined$val && $val ne 'inherit';$val=undef}$val}sub color_attribute {my$self=shift;my$color=$self->attribute(@_);if ($color !~ /^#/ && $color ne ''){my$scheme=$self->attribute('colorscheme');$color=Graph::Easy->color_as_hex($color,$scheme)}$color}sub raw_color_attribute {my$self=shift;my$color=$self->raw_attribute(@_);return undef unless defined$color;if ($color !~ /^#/ && $color ne ''){my$scheme=$self->attribute('colorscheme');$color=Graph::Easy->color_as_hex($color,$scheme)}$color}sub _attribute_entry {my ($self,$class,$name)=@_;$name=$att_aliases->{$name}if exists$att_aliases->{$name};my$base_class=$class;$base_class =~ s/\.(.*)//;my$s=$attributes->{special};$s=$s->{$class}if exists$s->{$class};my$entry=$s->{$name}|| $attributes->{all}->{$name}|| $attributes->{$base_class}->{$name};$entry}sub attribute {my ($self,$class,$name)=@_;my$three_arg=0;if (scalar @_==3){return$self->error("Calling $self->attribute($class,$name) only allowed for graphs")if exists$self->{graph};if ($class !~ /^(node|group|edge|graph\z)/){return$self->error ("Illegal class '$class' when trying to get attribute '$name'")}$three_arg=1;return$self->border_attribute($class)if$name eq 'border'}else {$name=$class;$class=$self->{class}|| 'graph' if$name eq 'class';if ($name ne 'class'){$class=$self->{cache}->{class};$class=$self->class()unless defined$class}return$self->border_attribute()if$name eq 'border';return join (",",$self->size())if$name eq 'size'}$name=$att_aliases->{$name}if exists$att_aliases->{$name};my$base_class=$class;$base_class =~ s/\.(.*)//;my$sub_class=$1;$sub_class='' unless defined$sub_class;if ($name eq 'class'){return$sub_class if$sub_class ne ''}my$s=$attributes->{special};$s=$s->{$class}if exists$s->{$class};my$entry=$s->{$name}|| $attributes->{all}->{$name}|| $attributes->{$base_class}->{$name};$entry=['',undef,'','',ATTR_STRING,'' ]if$name =~ $qr_custom_attribute;return$self->_unknown_attribute($name,$class)unless ref($entry);my$type=$entry->[ATTR_TYPE_SLOT ]|| ATTR_STRING;my$val;if ($three_arg==0){my$a=$self->{att};if (exists$a->{graph}){$val=$a->{graph}->{$name}if exists$a->{graph}->{$name}}else {$val=$a->{$name}if exists$a->{$name}}if ($name eq 'background' && $val && $val eq 'inherit'){my$parent=$self->parent();$val=$parent->color_attribute('fill')if$parent && $parent!=$self}return$val if defined$val && ($type >= ATTR_NO_INHERIT || $val ne 'inherit' || $class eq 'graph')}my@tries=();push@tries,$class unless defined$val;push@tries,$base_class if$class =~ /\./;push@tries,'graph' unless@tries && $tries[-1]eq 'graph';my$g=$self->{graph};$g={att=>{}}unless ref($g);$g=$self if$self->{class}eq 'graph';$val=undef;TRY: for my$try (@tries){my$att=$g->{att}->{$try};$val=$att->{$name}if exists$att->{$name};if (!defined$val){my$def=$entry->[ATTR_DEFAULT_SLOT ];$val=$def;if (ref$def){$val=$def->{$try};if (!defined$val && $try =~ /\./){my$base=$try;$base =~ s/\..*//;$val=$def->{$base}}next TRY if!defined$val && $try =~ /\./;$val=$def->{default}unless defined$val}}if ($name ne 'label'){$self->warn("Uninitialized default for attribute '$name' on class '$try'\n")unless defined$val}return$val if$type >= ATTR_NO_INHERIT;last if defined$val && ($val ne 'inherit' || $try eq 'graph');$val=undef}if ($name eq 'background' && $val && $val eq 'inherit'){my$parent=$self->parent();$val=$parent->color_attribute('fill')if$parent && $parent!=$self}$val}sub unquote_attribute {my ($self,$class,$name,$val)=@_;$val =~ s/^["'](.*)["']\z/$1/;$val =~ s/\\([#"';\\])/$1/g;$val =~ s/%[^2-7][a-fA-F0-9]|%7f//g;$val =~ s/%([2-7][a-fA-F0-9])/sprintf("%c",hex($1))/eg;$val}sub valid_attribute {my ($self,$name,$value,$class)=@_;my ($error,$newname,$v)=$self->validate_attribute($name,$value,$class);return []if defined$error && $error==1;return undef if defined$error && $error==2;$v}sub validate_attribute {my ($self,$name,$value,$class,$no_multiples)=@_;$self->error("Got reference $value as value, but expected scalar")if ref($value);$self->error("Got reference $name as name, but expected scalar")if ref($name);return (undef,$name,$value)if$name =~ $qr_custom_attribute;$class='all' unless defined$class;$class =~ s/\..*\z//;$name=$att_aliases->{$name}if exists$att_aliases->{$name};my$s=$attributes->{special};$s=$s->{$class}if exists$s->{$class};my$entry=$s->{$name}|| $attributes->{all}->{$name}|| $attributes->{$class}->{$name};return (1,undef,$self->_unknown_attribute($name,$class))unless ref($entry);my$check=$entry->[ATTR_MATCH_SLOT];my$type=$entry->[ATTR_TYPE_SLOT]|| ATTR_STRING;$check='_color' if$type==ATTR_COLOR;$check='_angle' if$type==ATTR_ANGLE;$check='_uint' if$type==ATTR_UINT;my@values=($value);if (keys %{$attributes->{special}}==0){@values=split (/\s*\|\s*/,$value,-1)if$value =~ /(^|[^\\])\|/}my$multiples=0;$multiples=1 if@values > 1;return (4)if$no_multiples && $multiples;my@rc;for my$v (@values){push@rc,undef and next if$multiples && $v eq '';if (defined$check &&!ref($check)){no strict 'refs';my$checked=$self->$check($v,$name);if (!defined$checked){$self->error("Error in attribute: '$v' is not a valid $name for a $class");return (2)}push@rc,$checked}elsif ($check){if (ref($check)eq 'ARRAY'){my$list='qr/^(' .join ('|',@$check).')\z/;';$entry->[1]=eval($list);$check=$entry->[1]}if ($v !~ $check){$self->error("Error in attribute: '$v' is not a valid $name for a $class");return (2)}push@rc,$v}else {push@rc,$v}$rc[-1]=lc($rc[-1])if$type==ATTR_LCTEXT}return (undef,$name,$rc[0])unless$multiples;(undef,$name,\@rc)}sub _remap_attributes {my ($self,$object,$att,$remap,$noquote,$encode,$color_remap)=@_;my$out={};my$class=$object || 'node';$class=$object->{class}|| 'graph' if ref($object);$class =~ s/\..*//;my$r=$remap->{$class};my$ra=$remap->{all};my$ral=$remap->{always};my$x=$remap->{x};my@keys=sort keys %$att;my$color_scheme='w3c';$color_scheme=$object->attribute('colorscheme')if ref($object);$color_scheme=$self->get_attribute($object,'colorscheme')if defined$object &&!ref($object);$color_scheme=$self->get_attribute('graph','colorscheme')if defined$color_scheme && $color_scheme eq 'inherit';for my$atr (@keys){my$val=$att->{$atr};if (!ref($object)&&!exists$ral->{$atr}){next if!defined$val || $val eq '' || (exists$r->{$atr}&&!defined$r->{$atr})|| (exists$ra->{$atr}&&!defined$ra->{$atr})}my$entry=$attributes->{all}->{$atr}|| $attributes->{$class}->{$atr};if ($color_remap && defined$entry && defined$val){$val=$self->color_as_hex($val,$color_scheme)if ($entry->[ATTR_TYPE_SLOT ]||ATTR_STRING)==ATTR_COLOR}my$temp={$atr=>$val };if (exists$r->{$atr}|| exists$ra->{$atr}|| (defined$x && $atr =~ /^x-/)){my$rc=$r->{$atr};$rc=$ra->{$atr}unless defined$rc;$rc=$x unless defined$rc;if (ref($rc)eq 'CODE'){my@rc=&{$rc}($self,$atr,$val,$object);$temp={};while (@rc){my$a=shift@rc;my$v=shift@rc;$temp->{$a }=$v if defined$a && defined$v}}else {$temp={};$temp={$rc=>$val }if defined$val && defined$rc}}for my$at (sort keys %$temp){my$v=$temp->{$at};next if!defined$at ||!defined$v || $v eq '';$v =~ s/([;"%\x00-\x1f])/sprintf("%%%02x",ord($1))/eg if$encode && $v =~ /[;"\x00-\x1f]/;$v='"' .$v .'"' unless$noquote;$out->{$at}=$v}}$out}sub raw_attributes {my$self=shift;my$class=$self->{class}|| 'graph';my$att=$self->{att};$att=$self->{att}->{graph}if$class eq 'graph';my$g=$self->{graph}|| $self;my$out={};if (!$g->{strict}){for my$name (sort keys %$att){my$val=$att->{$name};next unless defined$val;$out->{$name}=$val}return$out}my$base_class=$class;$base_class =~ s/\..*//;for my$name (sort keys %$att){my$val=$att->{$name};next unless defined$val;$out->{$name}=$val;next unless$val eq 'inherit';my$s=$attributes->{special};$s=$s->{$class}if exists$s->{$class};my$entry=$s->{$name}|| $attributes->{all}->{$name}|| $attributes->{$base_class}->{$name};return$self->_unknown_attribute($name,$class)unless ref($entry);my$type=$entry->[ATTR_TYPE_SLOT ]|| ATTR_STRING;$out->{$name}=$self->attribute($name)if$type < ATTR_NO_INHERIT}$out}sub get_attributes {my$self=shift;$self->error("get_attributes() doesn't take arguments")if @_ > 0;my$att={};my$class=$self->main_class();for my$type ('all',$class){for my$a (sort keys %{$attributes->{$type}}){my$val=$self->attribute($a);$att->{$a}=$val if defined$val}}$att}package Graph::Easy::Node;BEGIN {*custom_attributes=\&get_custom_attributes}sub get_custom_attributes {my$self=shift;$self->error("get_custom_attributes() doesn't take arguments")if @_ > 0;my$att={};for my$key (sort keys %{$self->{att}}){$att->{$key}=$self->{att}->{$key}}$att}1;
  node {
    autolink: name;
    textstyle: none;
    fontsize: 1.1em;
    }
  graph {
    linkbase: http://de.wikipedia.org/wiki/;
    }
  edge {
    textstyle: overline;
    }
  
  [] --> [ Friedrichshafen ]
   -- Schiff --> { autolink: label; color: orange; title: Vrooom!; }
  [ Immenstaad ] { color: green; } --> [ Hagnau ]
  LINK_EOF
  graph {
    format: pod;
    label: I am B<bold> and I<italic>;
    }
  node { format: pod; }
  edge { format: pod; }
  
  [ U<B<bold and underlined>> ]
  --> { label: "S<Fähre>"; }
   [ O<Konstanz> ]
  EOF
  graph {
    fontsize: 150%;
    label: Verbindung;
    textstyle: bold italic;
    }
  node {
    textstyle: underline bold;
    fill: #ffd080;
    }
  edge {
    textstyle: italic bold overline;
    }
  
  [ Meersburg ] { fontsize: 2em; }
   -- F\x{e4}hre --> { fontsize: 1.2em; color: red; }
   [ Konstanz ]
  EOF
GRAPH_EASY_ATTRIBUTES

$fatpacked{"Graph/Easy/Base.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_BASE';
  package Graph::Easy::Base;$VERSION='0.76';use strict;use warnings;{my$id=0;sub _new_id {$id++}sub _reset_id {$id=0}}sub new {my$self=bless {id=>_new_id()},shift;my$args=$_[0];$args={name=>$_[0]}if ref($args)ne 'HASH' && @_==1;$args={@_ }if ref($args)ne 'HASH' && @_ > 1;$self->_init($args)}sub _init {my ($self,$args)=@_;$self}sub self {my$self=shift;$self}sub no_fatal_errors {my$self=shift;$self->{fatal_errors}=($_[1]? 1 : 0)if @_ > 0;~ ($self->{fatal_errors}|| 0)}sub fatal_errors {my$self=shift;$self->{fatal_errors}=($_[1]? 0 : 1)if @_ > 0;$self->{fatal_errors}|| 0}sub error {my$self=shift;$self->{_old_self}->error(@_)if ref($self->{_old_self});return$self->{graph}->error(@_)if ref($self->{graph});if (defined $_[0]){$self->{error}=$_[0];if ($self->{_catch_errors}){push @{$self->{_errors}},$self->{error}}else {$self->_croak($self->{error},2)if ($self->{fatal_errors})&& $self->{error}ne ''}}$self->{error}|| ''}sub error_as_html {my$self=shift;my$msg=$self->{error};$msg =~ s/&/&amp;/g;$msg =~ s/</&lt;/g;$msg =~ s/>/&gt;/g;$msg =~ s/"/&quot;/g;$msg}sub catch_messages {my$self=shift;if (@_ > 0){if ($_[0]){$self->{_catch_warnings}=1;$self->{_catch_errors}=1;$self->{_warnings}=[];$self->{_errors}=[]}else {$self->{_catch_warnings}=0;$self->{_catch_errors}=0}}$self}sub catch_warnings {my$self=shift;if (@_ > 0){if ($_[0]){$self->{_catch_warnings}=1;$self->{_warnings}=[]}else {$self->{_catch_warnings}=0}}$self->{_catch_warnings}}sub catch_errors {my$self=shift;if (@_ > 0){if ($_[0]){$self->{_catch_errors}=1;$self->{_errors}=[]}else {$self->{_catch_errors}=0}}$self->{_catch_errors}}sub warnings {my$self=shift;@{$self->{_warnings}}}sub errors {my$self=shift;@{$self->{_errors}}}sub warn {my ($self,$msg)=@_;if ($self->{_catch_warnings}){push @{$self->{_warnings}},$msg}else {require Carp;Carp::carp('Warning: ' .$msg)}}sub _croak {my ($self,$msg,$level)=@_;$level=1 unless defined$level;require Carp;if (ref($self)&& $self->{debug}){$Carp::CarpLevel=$level;Carp::confess($msg)}else {Carp::croak($msg)}}sub sub_class {my$self=shift;if (defined $_[0]){$self->{class}=~ s/\..*//;$self->{class}.= '.' .$_[0];delete$self->{cache};$self->{cache}->{subclass}=$_[0];$self->{cache}->{class}=$self->{class};return}$self->{class}=~ /\.(.*)/;return $1 if defined $1;return$self->{cache}->{subclass}if defined$self->{cache}->{subclass};my$g=$self->{graph};if (defined$g){my$subclass=$g->{att}->{$self->{class}}->{class};$subclass='' unless defined$subclass;$self->{cache}->{subclass}=$subclass;$self->{cache}->{class}=$self->{class};return$subclass}$self->{cache}->{subclass}=$self->attribute('class')}sub class {my$self=shift;$self->error("class() method does not take arguments")if @_ > 0;$self->{class}=~ /\.(.*)/;return$self->{class}if defined $1;return$self->{cache}->{class}if defined$self->{cache}->{class};my$subclass;my$g=$self->{graph};if (defined$g){$subclass=$g->{att}->{$self->{class}}->{class};$subclass='' unless defined$subclass}$subclass=$self->{att}->{class}unless defined$subclass;$subclass='' unless defined$subclass;$self->{cache}->{subclass}=$subclass;$subclass='.' .$subclass if$subclass ne '';$self->{cache}->{class}=$self->{class}.$subclass}sub main_class {my$self=shift;$self->{class}=~ /^(.+?)(\.|\z)/;$1}1;
GRAPH_EASY_BASE

$fatpacked{"Graph/Easy/Edge.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_EDGE';
  package Graph::Easy::Edge;use Graph::Easy::Node;@ISA=qw/Graph::Easy::Node/;$VERSION='0.76';use strict;use warnings;use constant isa_cell=>1;sub _init {my ($self,$args)=@_;$self->{class}='edge';for my$k (sort keys %$args){if ($k !~ /^(label|name|style)\z/){require Carp;Carp::confess ("Invalid argument '$k' passed to Graph::Easy::Node->new()")}my$n=$k;$n='label' if$k eq 'name';$self->{att}->{$n}=$args->{$k}}$self}sub bidirectional {my$self=shift;if (@_ > 0){my$old=$self->{bidirectional}|| 0;$self->{bidirectional}=$_[0]? 1 : 0;$self->{graph}->{score}=undef if$old!=$self->{bidirectional}&& ref($self->{graph})}$self->{bidirectional}}sub undirected {my$self=shift;if (@_ > 0){my$old=$self->{undirected}|| 0;$self->{undirected}=$_[0]? 1 : 0;$self->{graph}->{score}=undef if$old!=$self->{undirected}&& ref($self->{graph})}$self->{undirected}}sub has_ports {my$self=shift;my$s_port=$self->{att}->{start}|| $self->attribute('start');return 1 if$s_port ne '';my$e_port=$self->{att}->{end}|| $self->attribute('end');return 1 if$e_port ne '';0}sub start_port {my$self=shift;my$s=$self->{att}->{start}|| $self->attribute('start');return undef if!defined$s || $s !~ /,/;return (split /\s*,\s*/,$s)if wantarray;$s =~ s/\s+//g;$s}sub end_port {my$self=shift;my$s=$self->{att}->{end}|| $self->attribute('end');return undef if!defined$s || $s !~ /,/;return split /\s*,\s*/,$s if wantarray;$s =~ s/\s+//g;$s}sub style {my$self=shift;$self->{att}->{style}|| $self->attribute('style')}sub name {my$self=shift;$self->{att}->{label}|| ''}sub _cells {my$self=shift;$self->{cells}=[]unless defined$self->{cells};@{$self->{cells}}}sub _clear_cells {my$self=shift;$self->{cells}=[];$self}sub _unplace {my ($self,$cells)=@_;print STDERR "# clearing path from $self->{from}->{name} to $self->{to}->{name}\n" if$self->{debug};for my$key (@{$self->{cells}}){delete$cells->{$key}}$self->clear_cells();$self}sub _distance {my ($self)=@_;my$src=$self->{from};my$dst=$self->{to};return 100000 unless defined$src->{x}&& defined$dst->{x};my$cells=$self->{graph}->{cells};my@start=$src->_near_places($cells,1,undef,undef,$src->_shift(-90));my@stop=$dst->_near_places($cells,1);my ($s_p,@ss_p)=$self->port('start');my ($e_p,@ee_p)=$self->port('end');@start=$src->_allowed_places(\@start,$src->_allow($s_p,@ss_p),3)if defined$s_p;@stop=$dst->_allowed_places(\@stop,$dst->_allow($e_p,@ee_p),3)if defined$e_p;my$stop=scalar@stop;return 0 unless@stop > 0 && @start > 0;my$lowest;my$i=0;while ($i < scalar@start){my$sx=$start[$i];my$sy=$start[$i+1];$i += 2;for (my$u=0;$u < $stop;$u += 2){my$dist=Graph::Easy::_astar_distance($sx,$sy,$stop[$u],$stop[$u+1]);$lowest=$dist if!defined$lowest || $dist < $lowest}}$lowest}sub _add_cell {my ($self,$cell,$after,$before)=@_;$self->{cells}=[]unless defined$self->{cells};my$cells=$self->{cells};$before=undef if ref($before)&& $before->{edge}!=$self;$after=undef if ref($after)&& $after->{edge}!=$self;if (!defined$after && ref($before)){$after=$before;$before=undef}if (defined$after){my$ofs=$after;if (ref($after)&&!ref($before)){$ofs=1;for my$cell (@$cells){last if$cell==$after;$ofs++}}elsif (ref($after)&& ref($before)){$ofs=0;my$found=0;while ($ofs < scalar @$cells - 1){my$c1=$cells->[$ofs];my$c2=$cells->[$ofs+1];$ofs++;$found++,last if (($c1==$after && $c2==$before)|| ($c1==$before && $c2==$after))}if (!$found){$ofs=1;for my$cell (@$cells){last if$cell==$after;$ofs++}$found++}$self->_croak("Could not find $after and $before")unless$found}splice (@$cells,$ofs,0,$cell)}else {push @$cells,$cell}$cell->_update_boundaries();$self}sub from {my$self=shift;$self->{from}}sub to {my$self=shift;$self->{to}}sub nodes {my$self=shift;($self->{from},$self->{to})}sub start_at {my ($self,$node)=@_;$node=$self->{graph}->add_node($node);$self->_croak("start_at() needs a node object, but got $node")unless ref($node)&& $node->isa('Graph::Easy::Node');return$node if$self->{from}==$node;delete$self->{from}->{edges}->{$self->{id}};$self->{from}=$node;$self->{from}->{edges}->{$self->{id}}=$self;$self->{graph}->{score}=undef if ref($self->{graph});$node}sub end_at {my ($self,$node)=@_;$node=$self->{graph}->add_node($node);$self->_croak("start_at() needs a node object, but got $node")unless ref($node)&& $node->isa('Graph::Easy::Node');return$node if$self->{to}==$node;delete$self->{to}->{edges}->{$self->{id}};$self->{to}=$node;$self->{to}->{edges}->{$self->{id}}=$self;$self->{graph}->{score}=undef if ref($self->{graph});$node}sub edge_flow {my$self=shift;my$flow=$self->{att}->{flow};$flow=$self->raw_attribute('flow')unless defined$flow;$flow}sub flow {my ($self)=@_;my$flow=$self->{att}->{flow};$flow=$self->raw_attribute('flow')unless defined$flow;$flow=$self->{from}->{att}->{flow}if!defined$flow;$flow=$self->parent()->attribute('flow')if!defined$flow;$flow=90 if!defined$flow;return$flow if$flow =~ /^(0|90|180|270)\z/;my$in=$self->{from}->flow();my$out=$self->{graph}->_flow_as_direction($in,$flow);$out}sub port {my ($self,$which)=@_;$self->_croak("'$which' must be one of 'start' or 'end' in port()")unless$which =~ /^(start|end)/;my$sp=$self->attribute($which);return (undef,undef)unless defined$sp && $sp ne '';my ($side,$port)=split /\s*,\s*/,$sp;my$s=Graph::Easy->_direction_as_side($side);if (defined$s){my@rc=($s);push@rc,$port if defined$port;return@rc}my$in=90;$in=$self->{from}->flow()if ref($self->{from});$s=Graph::Easy->_flow_as_side($in,$side);my@rc=($s);push@rc,$port if defined$port;@rc}sub flip {my ($self)=@_;($self->{from},$self->{to})=($self->{to},$self->{from});$self->{graph}->{score}=undef if ref($self->{graph});$self}sub as_ascii {my ($self,$x,$y)=@_;return '' if$self->{w}==0 || $self->{h}==0;my$fb=$self->_framebuffer($self->{w},$self->{h});$self->_draw_label($fb,$x,$y,'');join ("\n",@$fb)}sub as_txt {require Graph::Easy::As_ascii;_as_txt(@_)}1;
GRAPH_EASY_EDGE

$fatpacked{"Graph/Easy/Edge/Cell.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_EDGE_CELL';
  package Graph::Easy::Edge::Cell;use strict;use warnings;use Graph::Easy::Edge;use Graph::Easy::Attributes;require Exporter;use vars qw/$VERSION @EXPORT_OK @ISA/;@ISA=qw/Exporter Graph::Easy::Edge/;$VERSION='0.76';use Scalar::Util qw/weaken/;use constant {EDGE_CROSS=>0,EDGE_HOR=>1,EDGE_VER=>2,EDGE_N_E=>3,EDGE_N_W=>4,EDGE_S_E=>5,EDGE_S_W=>6,EDGE_S_E_W=>7,EDGE_N_E_W=>8,EDGE_E_N_S=>9,EDGE_W_N_S=>10,EDGE_HOLE=>11,EDGE_N_W_S=>12,EDGE_S_W_N=>13,EDGE_E_S_W=>14,EDGE_W_S_E=>15,EDGE_MAX_TYPE=>15,EDGE_LOOP_TYPE=>12,EDGE_START_E=>0x0100,EDGE_START_S=>0x0200,EDGE_START_W=>0x0400,EDGE_START_N=>0x0800,EDGE_END_W=>0x0010,EDGE_END_N=>0x0020,EDGE_END_E=>0x0040,EDGE_END_S=>0x0080,EDGE_LABEL_CELL=>0x1000,EDGE_SHORT_CELL=>0x2000,EDGE_ARROW_MASK=>0x0FF0,EDGE_START_MASK=>0x0F00,EDGE_END_MASK=>0x00F0,EDGE_TYPE_MASK=>0x000F,EDGE_FLAG_MASK=>0xFFF0,EDGE_MISC_MASK=>0xF000,EDGE_NO_M_MASK=>0x0FFF,ARROW_RIGHT=>0,ARROW_LEFT=>1,ARROW_UP=>2,ARROW_DOWN=>3,};use constant {EDGE_ARROW_HOR=>EDGE_END_E()+ EDGE_END_W(),EDGE_ARROW_VER=>EDGE_END_N()+ EDGE_END_S(),EDGE_SHORT_E=>EDGE_HOR + EDGE_END_E + EDGE_START_W,EDGE_SHORT_S=>EDGE_VER + EDGE_END_S + EDGE_START_N,EDGE_SHORT_W=>EDGE_HOR + EDGE_END_W + EDGE_START_E,EDGE_SHORT_N=>EDGE_VER + EDGE_END_N + EDGE_START_S,EDGE_SHORT_BD_EW=>EDGE_HOR + EDGE_END_E + EDGE_END_W,EDGE_SHORT_BD_NS=>EDGE_VER + EDGE_END_S + EDGE_END_N,EDGE_SHORT_UN_EW=>EDGE_HOR + EDGE_START_E + EDGE_START_W,EDGE_SHORT_UN_NS=>EDGE_VER + EDGE_START_S + EDGE_START_N,EDGE_LOOP_NORTH=>EDGE_N_W_S + EDGE_END_S + EDGE_START_N + EDGE_LABEL_CELL,EDGE_LOOP_SOUTH=>EDGE_S_W_N + EDGE_END_N + EDGE_START_S + EDGE_LABEL_CELL,EDGE_LOOP_WEST=>EDGE_W_S_E + EDGE_END_E + EDGE_START_W + EDGE_LABEL_CELL,EDGE_LOOP_EAST=>EDGE_E_S_W + EDGE_END_W + EDGE_START_E + EDGE_LABEL_CELL,};@EXPORT_OK=qw/EDGE_START_E EDGE_START_W EDGE_START_N EDGE_START_S EDGE_END_E EDGE_END_W EDGE_END_N EDGE_END_S EDGE_SHORT_E EDGE_SHORT_W EDGE_SHORT_N EDGE_SHORT_S EDGE_SHORT_BD_EW EDGE_SHORT_BD_NS EDGE_SHORT_UN_EW EDGE_SHORT_UN_NS EDGE_HOR EDGE_VER EDGE_CROSS EDGE_HOLE EDGE_N_E EDGE_N_W EDGE_S_E EDGE_S_W EDGE_S_E_W EDGE_N_E_W EDGE_E_N_S EDGE_W_N_S EDGE_LOOP_NORTH EDGE_LOOP_SOUTH EDGE_LOOP_EAST EDGE_LOOP_WEST EDGE_N_W_S EDGE_S_W_N EDGE_E_S_W EDGE_W_S_E EDGE_TYPE_MASK EDGE_FLAG_MASK EDGE_ARROW_MASK EDGE_START_MASK EDGE_END_MASK EDGE_MISC_MASK EDGE_LABEL_CELL EDGE_SHORT_CELL EDGE_NO_M_MASK ARROW_RIGHT ARROW_LEFT ARROW_UP ARROW_DOWN/;my$edge_types={EDGE_HOR()=>'horizontal',EDGE_VER()=>'vertical',EDGE_CROSS()=>'crossing',EDGE_N_E()=>'north/east corner',EDGE_N_W()=>'north/west corner',EDGE_S_E()=>'south/east corner',EDGE_S_W()=>'south/west corner',EDGE_S_E_W()=>'joint south to east/west',EDGE_N_E_W()=>'joint north to east/west',EDGE_E_N_S()=>'joint east to north/south',EDGE_W_N_S()=>'joint west to north/south',EDGE_N_W_S()=>'selfloop, northwards',EDGE_S_W_N()=>'selfloop, southwards',EDGE_E_S_W()=>'selfloop, eastwards',EDGE_W_S_E()=>'selfloop, westwards',};my$flag_types={EDGE_LABEL_CELL()=>'labeled',EDGE_SHORT_CELL()=>'short',EDGE_START_E()=>'starting east',EDGE_START_W()=>'starting west',EDGE_START_N()=>'starting north',EDGE_START_S()=>'starting south',EDGE_END_E()=>'ending east',EDGE_END_W()=>'ending west',EDGE_END_N()=>'ending north',EDGE_END_S()=>'ending south',};use constant isa_cell=>1;sub edge_type {my$type=shift;my$flags=$type & EDGE_FLAG_MASK;$type &=EDGE_TYPE_MASK;my$t=$edge_types->{$type}|| ('unknown edge type #' .$type);$flags &=EDGE_FLAG_MASK;my$mask=0x0010;while ($mask < 0xFFFF){my$tf=$flags & $mask;$mask <<=1;$t .= ", $flag_types->{$tf}" if$tf!=0}$t}sub _init {my ($self,$args)=@_;$self->{type}=EDGE_SHORT_E();$self->{style}='solid';$self->{x}=0;$self->{y}=0;$self->{w}=undef;$self->{h}=3;for my$k (sort keys %$args){next unless$k =~ /^(graph|edge|x|y|type)\z/;$self->{$k}=$args->{$k}}$self->_croak("Creating edge cell without a parent edge object")unless defined$self->{edge};$self->_croak("Creating edge cell without a type")unless defined$self->{type};$self->{style}=$self->{edge}->style();$self->{class}=$self->{edge}->class();$self->{graph}=$self->{edge}->{graph};$self->{group}=$self->{edge}->{group};weaken($self->{graph});weaken($self->{group});$self->{att}=$self->{edge}->{att};$self->{edge}->_add_cell ($self,$args->{after},$args->{before});$self}sub arrow_count {my$self=shift;return 0 if$self->{edge}->{undirected};my$count=0;my$type=$self->{type};$count ++ if ($type & EDGE_END_N)!=0;$count ++ if ($type & EDGE_END_S)!=0;$count ++ if ($type & EDGE_END_W)!=0;$count ++ if ($type & EDGE_END_E)!=0;if ($self->{edge}->{bidirectional}){$count ++ if ($type & EDGE_START_N)!=0;$count ++ if ($type & EDGE_START_S)!=0;$count ++ if ($type & EDGE_START_W)!=0;$count ++ if ($type & EDGE_START_E)!=0}$count}sub _make_cross {my ($self,$edge,$flags)=@_;my$type=$self->{type}& EDGE_TYPE_MASK;$self->_croak("Trying to cross non hor/ver piece at $self->{x},$self->{y}")if (($type!=EDGE_HOR)&& ($type!=EDGE_VER));$self->{color}=$self->get_color_attribute('color');$self->{style_ver}=$edge->style();$self->{color_ver}=$edge->get_color_attribute('color');if ($type==EDGE_VER){($self->{style_ver},$self->{style})=($self->{style},$self->{style_ver});($self->{color_ver},$self->{color})=($self->{color},$self->{color})}$self->{type}=EDGE_CROSS + ($flags || 0);$self}sub _make_joint {my ($self,$edge,$new_type)=@_;my$type=$self->{type}& EDGE_TYPE_MASK;$self->_croak("Trying to join non hor/ver piece (type: $type) at $self->{x},$self->{y}")if$type >= EDGE_S_E_W;$self->{color}=$self->get_color_attribute('color');$self->{style_ver}=$edge->style();$self->{color_ver}=$edge->get_color_attribute('color');if ($type==EDGE_VER){($self->{style_ver},$self->{style})=($self->{style},$self->{style_ver});($self->{color_ver},$self->{color})=($self->{color},$self->{color})}print STDERR "# creating joint at $self->{x}, $self->{y} with new type $new_type (old $type)\n" if$self->{graph}->{debug};$self->{type}=$new_type;$self}my$edge_end_north=' <td colspan=2 class="##class## eb" style="##bg####ec##">&nbsp;</td>' ."\n" .' <td colspan=2 class="##class## eb" style="##bg####ec##"><span class="su">^</span></td>' ."\n";my$edge_end_south=' <td colspan=2 class="##class## eb" style="##bg####ec##">&nbsp;</td>' ."\n" .' <td colspan=2 class="##class## eb" style="##bg####ec##"><span class="sv">v</span></td>' ."\n";my$edge_empty_row=' <td colspan=4 class="##class## eb"></td>';my$edge_arrow_west_upper='<td rowspan=2 class="##class## eb" style="##ec####bg##"><span class="shl">&lt;</span></td>' ."\n";my$edge_arrow_west_lower='<td rowspan=2 class="##class## eb">&nbsp;</td>' ."\n";my$edge_arrow_east_upper='<td rowspan=2 class="##class## eb" style="##ec####bg##"><span class="sh">&gt;</span></td>' ."\n";my$edge_arrow_east_lower='<td rowspan=2 class="##class## eb"></td>' ."\n";my$edge_html={EDGE_S_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',],EDGE_S_E()+ EDGE_START_E()+ EDGE_END_S()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## el"></td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',$edge_end_south,],EDGE_S_E()+ EDGE_START_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## el"></td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',],EDGE_S_E()+ EDGE_END_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class##"##edgecolor##><span class="sa">&gt;</span></td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',],EDGE_S_E()+ EDGE_START_S()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>' ."\n",$edge_empty_row,],EDGE_S_E()+ EDGE_START_S()+ EDGE_END_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>'.' <td rowspan=4 class="##class##"##edgecolor##><span class="sa">&gt;</span></td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td class="##class## eb" style="border-left: ##border##;">&nbsp;</td>' ."\n",' <td class="##class## eb"></td>',],EDGE_S_E()+ EDGE_END_S()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>' ."\n",$edge_end_south,],EDGE_S_E()+ EDGE_END_S()+ EDGE_END_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## ha"##edgecolor##><span class="sa">&gt;</span></td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td class="##class## eb" style="border-left: ##border##;">&nbsp;</td>' ."\n",' <td colspan=3 class="##class## v"##edgecolor##>v</td>',],EDGE_S_W()=>[' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',],EDGE_S_W()+ EDGE_START_W()=>[' <td rowspan=2 class="##class## el"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',],EDGE_S_W()+ EDGE_END_W()=>[' <td rowspan=2 class="##class## va"##edgecolor##><span class="shl">&lt;</span></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td colspan=2 rowspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',],EDGE_S_W()+ EDGE_START_S()=>[' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',$edge_empty_row,],EDGE_S_W()+ EDGE_END_S()=>[' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',$edge_end_south,],EDGE_S_W()+ EDGE_START_W()+ EDGE_END_S()=>[' <td rowspan=2 class="##class## el"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td colspan=2 class="##class## eb"></td>'."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',$edge_end_south,],EDGE_S_W()+ EDGE_START_S()+ EDGE_END_W()=>[' <td rowspan=3 class="##class## sh"##edgecolor##>&lt;</td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb"></td>','',' <td class="##class## eb"></td>'."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',$edge_empty_row,],EDGE_N_W()=>[' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',' <td colspan=4 rowspan=2 class="##class## eb"></td>','',],EDGE_N_W()+ EDGE_START_N()=>[$edge_empty_row,' <td colspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>','',' <td colspan=4 rowspan=2 class="##class## eb"></td>',],EDGE_N_W()+ EDGE_END_N()=>[$edge_end_north,' <td colspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',' <td colspan=4 rowspan=2 class="##class## eb"></td>','',],EDGE_N_W()+ EDGE_END_N()+ EDGE_START_W()=>[$edge_end_north,' <td rowspan=3 class="##class## eb"></td>'.' <td class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>',' <td colspan=4 rowspan=2 class="##class## eb"></td>','',],EDGE_N_W()+ EDGE_START_W()=>[' <td rowspan=2 class="##class## el"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>' ."\n",'',' <td colspan=4 rowspan=2 class="##class## eb"></td>','',],EDGE_N_W()+ EDGE_END_W()=>[' <td rowspan=4 class="##class## sh"##edgecolor##>&lt;</td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##;">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##border##;">&nbsp;</td>' ."\n",'',' <td colspan=3 rowspan=2 class="##class## eb"></td>','',],EDGE_N_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>','',' <td colspan=4 rowspan=2 class="##class## eb"></td>','',],EDGE_N_E()+ EDGE_START_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## el"></td>','',' <td colspan=3 rowspan=2 class="##class## eb"></td>','',],EDGE_N_E()+ EDGE_END_E()=>[' <td colspan=2 rowspan=2 class="##class## eb"></td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## va"##edgecolor##><span class="sa">&gt;</span></td>','',' <td colspan=3 rowspan=2 class="##class## eb"></td>','',],EDGE_N_E()+ EDGE_END_E()+ EDGE_START_N()=>[$edge_empty_row,' <td colspan=2 class="##class## eb"></td>' ."\n" .' <td class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=3 class="##class## va"##edgecolor##><span class="sa">&gt;</span></td>',' <td colspan=3 rowspan=2 class="##class## eb"></td>','',],EDGE_N_E()+ EDGE_START_E()+ EDGE_END_N()=>[$edge_end_north,' <td colspan=2 class="##class## eb"></td>' ."\n" .' <td class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>' ."\n" .' <td rowspan=3 class="##class## eb">&nbsp;</td>',' <td colspan=3 rowspan=2 class="##class## eb"></td>','',],EDGE_N_E()+ EDGE_START_N()=>[$edge_empty_row,' <td colspan=2 rowspan=3 class="##class## eb"></td>' ."\n" .' <td colspan=2 class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>',' <td colspan=2 class="##class## eb"></td>','',],EDGE_N_E()+ EDGE_END_N()=>[$edge_end_north,' <td colspan=2 rowspan=3 class="##class## eb"></td>' ."\n" .' <td colspan=2 class="##class## eb" style="border-bottom: ##border##; border-left: ##border##;">&nbsp;</td>','',' <td colspan=2 class="##class## eb"></td>',],EDGE_LOOP_NORTH()- EDGE_LABEL_CELL()=>['<td rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 rowspan=2 class="##class## lh" style="border-bottom: ##border##;##lc####bg##">##label##</td>' ."\n" .' <td rowspan=2 class="##class## eb">&nbsp;</td>','','<td class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 class="##class## eb" style="border-left: ##border##;##bg##">&nbsp;</td>'."\n".' <td class="##class## eb" style="border-left: ##border##;##bg##">&nbsp;</td>','<td colspan=2 class="##class## v" style="##bg##"##edgecolor##>v</td>' ."\n" .' <td colspan=2 class="##class## eb">&nbsp;</td>',],EDGE_LOOP_SOUTH()- EDGE_LABEL_CELL()=>['<td colspan=2 class="##class## v" style="##bg##"##edgecolor##>^</td>' ."\n" .' <td colspan=2 class="##class## eb">&nbsp;</td>','<td rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 rowspan=2 class="##class## lh" style="border-left:##border##;border-bottom:##border##;##lc####bg##">##label##</td>'."\n".' <td rowspan=2 class="##class## eb" style="border-left:##border##;##bg##">&nbsp;</td>','','<td colspan=4 class="##class## eb">&nbsp;</td>',],EDGE_LOOP_WEST()- EDGE_LABEL_CELL()=>[$edge_empty_row.' <td colspan=2 rowspan=2 class="##class## lh" style="border-bottom: ##border##;##lc####bg##">##label##</td>'."\n".' <td rowspan=2 class="##class## eb">&nbsp;</td>','','<td colspan=2 class="##class## eb" style="border-left: ##border##; border-bottom: ##border##;##bg##">&nbsp;</td>' ."\n".' <td rowspan=2 class="##class## va" style="##bg##"##edgecolor##><span class="sa">&gt;</span></td>','<td colspan=2 class="##class## eb">&nbsp;</td>',],EDGE_LOOP_EAST()- EDGE_LABEL_CELL()=>['<td rowspan=2 class="##class## eb">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## lh" style="border-bottom: ##border##;##lc####bg##">##label##</td>' ."\n".' <td rowspan=2 class="##class## eb">&nbsp;</td>','','<td rowspan=2 class="##class## va" style="##bg##"##edgecolor##><span class="sh">&lt;</span></td>' ."\n".' <td colspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>'."\n".' <td class="##class## eb" style="border-left: ##border##;##bg##">&nbsp;</td>','<td colspan=3 class="##class## eb">&nbsp;</td>',],EDGE_E_N_S()=>['<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb" style="border-left:##borderv##;border-bottom:##border##;##bg##">&nbsp;</td>','','<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>','',],EDGE_E_N_S()+ EDGE_END_E()=>['<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n" .' <td rowspan=2 class="##class## eb" style="border-left: ##borderv##; border-bottom: ##border##;##bg##">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## va"##edgecolor##><span class="sa">&gt;</span></td>','','<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td rowspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>','',],EDGE_W_N_S()=>['<td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=4 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>','','<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>','',],EDGE_S_E_W()=>['<td colspan=4 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>','','<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>','',],EDGE_S_E_W()+ EDGE_END_S()=>['<td colspan=4 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>','','<td colspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>',$edge_end_south,],EDGE_S_E_W()+ EDGE_START_S()=>['<td colspan=4 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>','','<td colspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td colspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>',' <td colspan=4 class="##class## eb"></td>',],EDGE_S_E_W()+ EDGE_START_W()=>['<td rowspan=4 class="##class## el"></td>' ."\n" .'<td colspan=3 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>','','<td rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td rowspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>','',],EDGE_S_E_W()+ EDGE_END_E()=>['<td colspan=3 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>' ."\n" .' <td rowspan=4 class="##class## va"##edgecolor##><span class="sa">&gt;</span></td>','','<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n".' <td rowspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>','',],EDGE_S_E_W()+ EDGE_END_W()=>[$edge_arrow_west_upper .'<td colspan=3 rowspan=2 class="##class## eb" style="border-bottom: ##border##;##bg##">&nbsp;</td>' ."\n",'','<td colspan=2 rowspan=2 class="##class## eb">&nbsp;</td>' ."\n" .'<td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##borderv##;##bg##">&nbsp;</td>',],EDGE_N_E_W()=>[' <td colspan=2 rowspan=2 class="##class## eb" style="border-bottom: ##borderv##;##bg##">&nbsp;</td>' ."\n".'<td colspan=2 rowspan=2 class="##class## eb" style="border-left: ##borderv##; border-bottom: ##border##;##bg##">&nbsp;</td>','','<td colspan=4 rowspan=2 class="##class## eb">&nbsp;</td>','',],EDGE_N_E_W()+ EDGE_END_N()=>[$edge_end_north,' <td colspan=2 class="##class## eb" style="border-bottom: ##borderv##;##bg##">&nbsp;</td>' ."\n".'<td colspan=2 class="##class## eb" style="border-left: ##borderv##; border-bottom: ##border##;##bg##">&nbsp;</td>','','<td colspan=4 rowspan=2 class="##class## eb">&nbsp;</td>','',],EDGE_N_E_W()+ EDGE_START_N()=>[$edge_empty_row,' <td colspan=2 class="##class## eb" style="border-bottom: ##borderv##;##bg##">&nbsp;</td>' ."\n".'<td colspan=2 class="##class## eb" style="border-left: ##borderv##; border-bottom: ##border##;##bg##">&nbsp;</td>','','<td colspan=4 rowspan=2 class="##class## eb">&nbsp;</td>','',],};sub _html_edge_hor {my ($self,$as)=@_;my$s_flags=$self->{type}& EDGE_START_MASK;my$e_flags=$self->{type}& EDGE_END_MASK;$e_flags=0 if$as eq 'none';my$rc=[' <td colspan=##mod## rowspan=2 class="##class## lh" style="border-bottom: ##border##;##lc####bg##">##label##</td>','','<td colspan=##mod## rowspan=2 class="##class## eb">&nbsp;</td>','',];my$mod=4;if ($s_flags & EDGE_START_W){$mod--;$rc->[0]='<td rowspan=4 class="##class## el"></td>' ."\n" .$rc->[0]};if ($s_flags & EDGE_START_E){$mod--;$rc->[0].= "\n " .'<td rowspan=4 class="##class## el"></td>'};if ($e_flags & EDGE_END_W){$mod--;$rc->[0]=$edge_arrow_west_upper .$rc->[0];$rc->[2]=$edge_arrow_west_lower .$rc->[2]}if ($e_flags & EDGE_END_E){$mod--;$rc->[0].= "\n " .$edge_arrow_east_upper;$rc->[2].= "\n " .$edge_arrow_east_lower};$self->{cx}||=1;$mod=$self->{cx}* 4 - 4 + $mod;for my$e (@$rc){$e =~ s/##mod##/$mod/g}$rc}sub _html_edge_ver {my ($self,$as)=@_;my$s_flags=$self->{type}& EDGE_START_MASK;my$e_flags=$self->{type}& EDGE_END_MASK;$e_flags=0 if$as eq 'none';my$mod=4;my$rc=['<td colspan=2 rowspan=##mod## class="##class## el">&nbsp;</td>' ."\n " .'<td colspan=2 rowspan=##mod## class="##class## lv" style="border-left: ##border##;##lc####bg##">##label##</td>' ."\n",'','','',];if ($s_flags & EDGE_START_N){$mod--;unshift @$rc,'<td colspan=4 class="##class## eb"></td>' ."\n";delete$rc->[-1]}elsif ($e_flags & EDGE_END_N){$mod--;unshift @$rc,$edge_end_north;delete$rc->[-1]}if ($s_flags & EDGE_START_S){$mod--;$rc->[3]='<td colspan=4 class="##class## eb"></td>' ."\n"}if ($e_flags & EDGE_END_S){$mod--;$rc->[3]=$edge_end_south}$self->{cy}||=1;$mod=$self->{cy}* 4 - 4 + $mod;for my$e (@$rc){$e =~ s/##mod##/$mod/g}$rc}sub _html_edge_cross {my ($self,$N,$S,$E,$W)=@_;my$rc=[' <td colspan=2 rowspan=2 class="##class## eb el" style="border-bottom: ##border##">&nbsp;</td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb el" style="border-left: ##borderv##; border-bottom: ##border##">&nbsp;</td>' ."\n",'',' <td colspan=2 rowspan=2 class="##class## eb el"></td>' ."\n" .' <td colspan=2 rowspan=2 class="##class## eb el" style="border-left: ##borderv##">&nbsp;</td>' ."\n",'',];$rc}sub as_html {my ($self)=shift;my$type=$self->{type}& EDGE_NO_M_MASK;my$style=$self->{style};my$as;$as='none' if$self->{edge}->{undirected};$as=$self->attribute('arrowstyle')unless$as;my$ashape;$ashape='triangle' if$self->{edge}->{undirected};$ashape=$self->attribute('arrowshape')unless$ashape;my$code=$edge_html->{$type};if (!defined$code){my$t=$self->{type}& EDGE_TYPE_MASK;if ($style ne 'invisible'){$code=$self->_html_edge_hor($as)if$t==EDGE_HOR;$code=$self->_html_edge_ver($as)if$t==EDGE_VER;$code=$self->_html_edge_cross($as)if$t==EDGE_CROSS}else {$code=[' <td colspan=4 rowspan=4 class="##class##">&nbsp;</td>' ]}if (!defined$code){$code=[' <td colspan=4 rowspan=4 class="##class##">???</td>' ];warn ("as_html: Unimplemented edge type $self->{type} ($type) at $self->{x},$self->{y} " .edge_type($self->{type}))}}my$id=$self->{graph}->{id};my$color=$self->get_color_attribute('color');my$label='';my$label_style='';if ($style ne 'invisible' && ($self->{type}& EDGE_LABEL_CELL)){my$switch_to_center;($label,$switch_to_center)=$self->_label_as_html();$label =~ s/\s*\\n\s*/<br \/>/g;my$label_color=$self->raw_color_attribute('labelcolor')|| $color;$label_color='' if$label_color eq '#000000';$label_style="color: $label_color;" if$label_color;my$font=$self->attribute('font')|| '';$font='' if$font eq ($self->default_attribute('font')|| '');$label_style="font-family: $font;" if$font;$label_style .= $self->text_styles_as_css(1,1)unless$label eq '';$label_style =~ s/^\s*//;my$link=$self->link();if ($link ne ''){$link =~ s/\s/\+/g;$link =~ s/'/%27/g;$label_style=" style='$label_style'" if$label_style;$label="<a href='$link'$label_style>$label</a>";$label_style=''}}$label='&nbsp;' unless$label ne '';my$bow='2';my$border=Graph::Easy::_border_attribute_as_html($self->{style},$bow,$color);my$border_v=$border;if (($self->{type}& EDGE_TYPE_MASK)==EDGE_CROSS){$border_v=Graph::Easy::_border_attribute_as_html($self->{style_ver},$bow,$self->{color_ver})}my$edge_color='';$edge_color=" color: $color;" if$color;my$bg=$self->attribute('background')|| '';my$group=$self->{edge}->{group};$bg='' if$bg eq 'inherit';$bg=$group->{att}->{fill}if$group->{att}->{fill}&& $bg eq '';$bg='' if$bg eq 'inherit';$bg=" background: $bg;" if$bg;my$title=$self->title();$title =~ s/"/&#22;/g;$title=" title=\"$title\"" if$title ne '';require Graph::Easy::As_ascii if$as ne 'none';$border =~ s/\s+/ /g;$border_v =~ s/\s+/ /g;my$cl=$self->class();$cl =~ s/\./_/g;my$rc;for my$a (@$code){if (ref($a)){for my$c (@$a){push @$rc,$self->_format_td($c,$border,$border_v,$label_style,$edge_color,$bg,$as,$ashape,$title,$label,$cl)}}else {push @$rc,$self->_format_td($a,$border,$border_v,$label_style,$edge_color,$bg,$as,$ashape,$title,$label,$cl)}}$rc}sub _format_td {my ($self,$c,$border,$border_v,$label_style,$edge_color,$bg,$as,$ashape,$title,$label,$cl)=@_;$c =~ s/( e[bl]")(>(&nbsp;)?<\/td>)/$1 style="##bg##"$2/g;$c =~ s/style="border/style="##bg##border/g;$c =~ s/##class##/$cl/g;$c =~ s/##border##/$border/g;$c =~ s/##borderv##/$border_v/g;$c =~ s/##lc##/$label_style/g;$c =~ s/##edgecolor##/ style="$edge_color"/g;$c =~ s/##ec##/$edge_color/g;$c =~ s/##bg##/$bg/g;$c =~ s/ style=""//g;$c =~ s/>(v|\^|&lt;|&gt;)/>/g if$as eq 'none';$c =~ s/>(v|\^|&lt;|&gt;)/'>' . $self->_unicode_arrow($ashape, $as, $1); /eg;$c =~ s/>##label##/$title>$label/;$c =~ s/ lh"/ eb"/ if$label eq '';$c .= "\n" unless$c =~ /\n\z/;$self->quoted_comment().$c}sub class {my$self=shift;my$c=$self->{class}.($self->{cell_class}|| '');$c=$self->{edge}->{group}->class().' ' .$c if ref($self->{edge}->{group});$c}sub group {my$self=shift;$self->{edge}->{group}}sub type {my ($self,$type)=@_;if (defined$type){if (defined$type && $type < 0 || $type > EDGE_MAX_TYPE){require Carp;Carp::confess ("Cell type $type for cell $self->{x},$self->{y} is not valid.")}$self->{type}=$type}$self->{type}}sub _correct_size {my ($self,$format)=@_;return if defined$self->{w};$self->{w}=5;$self->{h}=3;if (($self->{type}& EDGE_SHORT_CELL)!=0){$self->{w}=1;$self->{h}=1;return}my$arrows=($self->{type}& EDGE_ARROW_MASK);my$type=($self->{type}& EDGE_TYPE_MASK);if ($self->{edge}->{bidirectional}&& $arrows!=0){$self->{w}++ if$type==EDGE_HOR;$self->{h}++ if$type==EDGE_VER}my$ah=$self->{type}& EDGE_ARROW_HOR;my$av=$self->{type}& EDGE_ARROW_VER;$self->{w}++ if$ah && ($type==EDGE_S_E_W || $type==EDGE_N_E_W);$self->{h}++ if$av && ($type==EDGE_E_N_S || $type==EDGE_W_N_S);my$style=$self->{edge}->attribute('style')|| 'solid';$self->{w}++ if$style eq 'dot-dot-dash';if ($type >= EDGE_LOOP_TYPE){$self->{w}=7;$self->{w}=8 if$type==EDGE_N_W_S || $type==EDGE_S_W_N;$self->{h}=3;$self->{h}=5 if$type!=EDGE_N_W_S && $type!=EDGE_S_W_N}if ($self->{type}==EDGE_HOR){$self->{w}=0}elsif ($self->{type}==EDGE_VER){$self->{h}=0}elsif ($self->{type}& EDGE_LABEL_CELL){my ($w,$h)=$self->dimensions();$h-- unless$h==0;$h += $self->{h};$w += $self->{w};$self->{w}=$w;$self->{h}=$h}}sub attribute {my ($self,$name)=@_;my$edge=$self->{edge};return$edge->{att}->{$name}if defined$edge->{att}->{$name}&& $edge->{att}->{$name}ne 'inherit';return$edge->attribute($name)}1;package Graph::Easy::Edge::Cell::Empty;require Graph::Easy::Node::Cell;our@ISA=qw/Graph::Easy::Node::Cell/;our$VERSION='0.76';use constant isa_cell=>1;1;
GRAPH_EASY_EDGE_CELL

$fatpacked{"Graph/Easy/Group.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_GROUP';
  package Graph::Easy::Group;use Graph::Easy::Group::Cell;use Graph::Easy;use Scalar::Util qw/weaken/;@ISA=qw/Graph::Easy::Node Graph::Easy/;$VERSION='0.76';use strict;use warnings;use Graph::Easy::Util qw(ord_values);sub _init {my ($self,$args)=@_;$self->{name}='Group #'.$self->{id};$self->{class}='group';$self->{_cells}={};for my$k (sort keys %$args){if ($k !~ /^(graph|name)\z/){require Carp;Carp::confess ("Invalid argument '$k' passed to Graph::Easy::Group->new()")}$self->{$k}=$args->{$k}}$self->{nodes}={};$self->{groups}={};$self->{att}={};$self}sub nodes {my$self=shift;wantarray ? (ord_values ($self->{nodes})): scalar keys %{$self->{nodes}}}sub edges {my$self=shift;wantarray ? (ord_values ($self->{edges})): scalar keys %{$self->{edges}}}sub edges_within {my$self=shift;wantarray ? (ord_values ($self->{edges_within})): scalar keys %{$self->{edges_within}}}sub _groups_within {my ($self,$level,$max_level,$cur)=@_;no warnings 'recursion';push @$cur,ord_values ($self->{groups});return if$level >= $max_level;for my$g (ord_values ($self->{groups})){$g->_groups_within($level+1,$max_level,$cur)if scalar keys %{$g->{groups}}> 0}}sub set_attribute {my ($self,$name,$val,$class)=@_;$self->SUPER::set_attribute($name,$val,$class);if ($name eq 'nodeclass'){my$class=$self->{att}->{nodeclass};for my$node (ord_values ($self->{nodes})){$node->sub_class($class)}}$self}sub shape {my ($self)=@_;''}sub add_node {my ($self,$n)=@_;if (!ref($n)||!$n->isa("Graph::Easy::Node")){if (!ref($self->{graph})){return$self->error("Cannot add non node-object $n to group '$self->{name}'")}$n=$self->{graph}->add_node($n)}$self->{nodes}->{$n->{name}}=$n;$n->sub_class($self->{att}->{nodeclass})if exists$self->{att}->{nodeclass};$n->{group}=$self;$n->{att}->{group}=$self->{name};weaken($n->{graph}=$self->{graph})unless $n->{graph}&& $self->{graph}&& $n->{graph}==$self->{graph};$n}sub add_member {my ($self,$n)=@_;if (!ref($n)||!$n->isa("Graph::Easy::Node")){if (!ref($self->{graph})){return$self->error("Cannot add non node-object $n to group '$self->{name}'")}$n=$self->{graph}->add_node($n)}return$self->_add_edge($n)if$n->isa("Graph::Easy::Edge");return$self->add_group($n)if$n->isa('Graph::Easy::Group');$self->{nodes}->{$n->{name}}=$n;my$cl=$self->attribute('nodeclass');$n->sub_class($cl)if$cl ne '';$n->{group}=$self;$n->{att}->{group}=$self->{name};weaken($n->{graph}=$self->{graph})unless $n->{graph}&& $self->{graph}&& $n->{graph}==$self->{graph};$n}sub del_member {my ($self,$n)=@_;my$class='nodes';my$key='name';if ($n->isa('Graph::Easy::Group')){$class='groups';$key='id'}delete$self->{$class}->{$n->{$key}};delete$n->{group};if ($n->isa('Graph::Easy::Node')){my$edges=$self->{edges_within};for my$e (ord_values ($edges)){delete$edges->{$e->{id}}if$e->{from}==$n || $e->{to}==$n}}$self}sub del_node {my ($self,$n)=@_;delete$self->{nodes}->{$n->{name}};delete$n->{group};delete$n->{att}->{group};my$edges=$self->{edges_within};for my$e (ord_values ($edges)){delete$edges->{$e->{id}}if$e->{from}==$n || $e->{to}==$n}$self}sub add_nodes {my$self=shift;my@arg=@_;for my$n (@arg){if (!ref($n)&&!ref($self->{graph})){return$self->error("Cannot add non node-object $n to group '$self->{name}'")}return$self->error("Cannot add group-object $n to group '$self->{name}'")if$n->isa('Graph::Easy::Group');$n=$self->{graph}->add_node($n)unless ref($n);$self->{nodes}->{$n->{name}}=$n;$n->{att}->{group}=$self->{name};$n->{group}=$self;weaken($n->{graph}=$self->{graph})unless $n->{graph}&& $self->{graph}&& $n->{graph}==$self->{graph}}@arg}sub _del_edge {my ($self,$e)=@_;delete$self->{edges_within}->{$e->{id}};delete$e->{group};$self}sub _add_edge {my ($self,$e)=@_;if (!ref($e)||!$e->isa("Graph::Easy::Edge")){return$self->error("Cannot add non edge-object $e to group '$self->{name}'")}$self->{edges_within}->{$e->{id}}=$e;my$edge_class=$self->attribute('edgeclass');$e->sub_class($edge_class)if$edge_class ne '';$self->add_node($e->{from});$self->add_node($e->{to});weaken($e->{group}=$self)unless defined$e->{group}&& $e->{group}==$self;$e}sub add_edge {my ($self,$from,$to)=@_;my$g=$self->{graph};return$self->error("Cannot add edge to group '$self->{name}' without graph")unless defined$g;my$edge=$g->add_edge($from,$to);$self->_add_edge($edge)}sub add_edge_once {my ($self,$from,$to)=@_;my$g=$self->{graph};return$self->error("Cannot non edge to group '$self->{name}' without graph")unless defined$g;my$edge=$g->add_edge_once($from,$to);$edge=$g->edge($from,$to)unless defined$edge;$self->_add_edge($edge)}sub add_group {my ($self,$group)=@_;my$name=$group;$group=$self->{groups}->{$group }unless ref$group;$group=$self->{graph}->add_group($name)unless ref$group;$self->{groups}->{$group->{name}}=$group;$group->{att}->{group}=$self->{name};$group->{graph}=$self->{graph};$group->{group}=$self;{no warnings;weaken($group->{graph});weaken($group->{group})}$self->{graph}->{score}=undef;$group}sub _cells {my$self=shift;$self->{_cells}}sub _clear_cells {my$self=shift;$self->{_cells}={};$self}sub _add_cell {my ($self,$cell)=@_;$cell->_update_boundaries();$self->{_cells}->{"$cell->{x},$cell->{y}"}=$cell;$cell}sub _del_cell {my ($self,$cell)=@_;delete$self->{_cells}->{"$cell->{x},$cell->{y}"};delete$cell->{group};$self}sub _find_label_cell {my$self=shift;my$g=$self->{graph};my$align=$self->attribute('align');my$loc=$self->attribute('labelpos');my$match=qr/^\s*gt\s*\z/;$match=qr/^\s*gb\s*\z/ if$loc eq 'bottom';my$lc;for my$c (ord_values ($self->{_cells})){next unless$c->{cell_class}=~ $match;if (defined$lc){if ($align eq 'left'){next if$lc->{x}< $c->{x}|| $lc->{y}< $c->{y}}elsif ($align eq 'center'){next if$lc->{y}< $c->{y}}elsif ($align eq 'right'){next if$lc->{x}> $c->{x}|| $lc->{y}< $c->{y}}}$lc=$c}if (ref($lc)&& $align eq 'center'){my ($left,$right);for my$c (ord_values ($self->{_cells})){next if$c->{y}!=$lc->{y};$left=$c->{x}if!defined$left || $left > $c->{x};$right=$c->{x}if!defined$right || $right < $c->{x}}my$center=int(($right - $left)/ 2 + $left);my$min_dist;for my$c (ord_values ($self->{_cells})){next if$c->{y}!=$lc->{y};my$dist=($center - $c->{x});$dist *= $dist;next if defined$min_dist && $dist > $min_dist;$min_dist=$dist;$lc=$c}}print STDERR "# Setting label for group '$self->{name}' at $lc->{x},$lc->{y}\n" if$self->{debug};$lc->_set_label()if ref($lc)}sub layout {my$self=shift;$self->_croak('Cannot call layout() on a Graph::Easy::Group directly.')}sub _layout {my$self=shift;local$self->{debug}=$self->{graph}->{debug};$self->SUPER::_layout()}sub _set_cell_types {my ($self,$cells)=@_;for my$cell (ord_values ($self->{_cells})){$cell->_set_type($cells)}$self}1;
GRAPH_EASY_GROUP

$fatpacked{"Graph/Easy/Group/Anon.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_GROUP_ANON';
  package Graph::Easy::Group::Anon;use Graph::Easy::Group;use warnings;@ISA=qw/Graph::Easy::Group/;$VERSION='0.76';use strict;sub _init {my$self=shift;$self->SUPER::_init(@_);$self->{name}='Group #' .$self->{id};$self->{class}='group.anon';$self->{att}->{label}='';$self}sub _correct_size {my$self=shift;$self->{w}=3;$self->{h}=3;$self}sub attributes_as_txt {my$self=shift;$self->SUPER::attributes_as_txt({node=>{label=>undef,shape=>undef,class=>undef,}})}sub as_pure_txt {'( )'}sub _as_part_txt {'( )'}sub as_graphviz_txt {my$self=shift;my$name=$self->{name};$name =~ s/([\[\]\(\)\{\}\#])/\\$1/g;'"' .$name .'"'}sub text_styles_as_css {''}sub is_anon {1}1;
GRAPH_EASY_GROUP_ANON

$fatpacked{"Graph/Easy/Group/Cell.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_GROUP_CELL';
  package Graph::Easy::Group::Cell;use Graph::Easy::Node;@ISA=qw/Graph::Easy::Node/;$VERSION='0.76';use strict;use warnings;BEGIN {*get_attribute=\&attribute}use constant {GROUP_INNER=>0,GROUP_RIGHT=>1,GROUP_LEFT=>2,GROUP_TOP=>3,GROUP_BOTTOM=>4,GROUP_ALL=>5,GROUP_BOTTOM_RIGHT=>6,GROUP_BOTTOM_LEFT=>7,GROUP_TOP_RIGHT=>8,GROUP_TOP_LEFT=>9,GROUP_MAX=>5,};my$border_styles={GROUP_INNER()=>[0,0,0,0,['gi']],GROUP_RIGHT()=>[0,0,0,1,['gr']],GROUP_LEFT()=>[0,0,1,0,['gl']],GROUP_TOP()=>[1,0,0,0,['gt']],GROUP_BOTTOM()=>[0,1,0,0,['gb']],GROUP_ALL()=>[0,0,0,0,['ga']],GROUP_BOTTOM_RIGHT()=>[0,1,0,1,['gb','gr']],GROUP_BOTTOM_LEFT()=>[0,1,1,0,['gb','gl']],GROUP_TOP_RIGHT()=>[1,0,0,1,['gt','gr']],GROUP_TOP_LEFT()=>[1,0,1,0,['gt','gl']],};my$border_name=['top','bottom','left','right' ];sub _css {my ($c,$id,$group,$border)=@_;my$css='';for my$type (0 .. 5){my$b=$border_styles->{$type};next if$border eq 'none';my$cl='.' .$b->[4]->[0];$css .= "table.graph$id $cl {";if ($type==GROUP_INNER){$css .= " border: none;"}elsif ($type==GROUP_ALL){$css .= " border-style: $border;"}else {for (my$i=0;$i < 4;$i++){$css .= ' border-' .$border_name->[$i]."-style: $border;" if$b->[$i]}}$css .= "}\n"}$css}sub _init {my ($self,$args)=@_;$self->{class}='group';$self->{cell_class}=' gi';$self->{name}='';$self->{'x'}=0;$self->{'y'}=0;for my$k (sort keys %$args){$self->{$k}=$args->{$k}}if (defined$self->{group}){$self->{group}->_add_cell ($self);$self->{class}=$self->{group}->{class};$self->{class}='group' unless defined$self->{class}}$self}sub _set_type {my ($self,$cells)=@_;my@coord=([0,-1,' gt' ],[+1,0,' gr' ],[0,+1,' gb' ],[-1,0,' gl' ],);my ($sx,$sy)=($self->{x},$self->{y});my$class='';my$gr=$self->{group};for my$co (@coord){my ($x,$y,$c)=@$co;$x += $sx;$y += $sy;my$cell=$cells->{"$x,$y"};my$go=0;$go=$cell->group()if UNIVERSAL::can($cell,'group');$class .= $c unless defined$go && $gr==$go}$class=' ga' if$class eq ' gt gr gb gl';$self->{cell_class}=$class;$self}sub _set_label {my$self=shift;$self->{has_label}=1;$self->{name}=$self->{group}->label()}sub shape {'rect'}sub attribute {my ($self,$name)=@_;my$group=$self->{group};return$group->{att}->{$name}if exists$group->{att}->{$name};$group->{cache}={}unless exists$group->{cache};$group->{cache}->{att}={}unless exists$group->{cache}->{att};my$cache=$group->{cache}->{att};return$cache->{$name}if exists$cache->{$name};$cache->{$name}=$group->attribute($name)}use constant isa_cell=>1;sub as_ascii {my ($self,$x,$y)=@_;my$fb=$self->_framebuffer($self->{w},$self->{h});my$border_style=$self->attribute('borderstyle');my$EM=14;my$border_width=Graph::Easy::_border_width_in_pixels($self,$EM);$border_style='bold' if$border_width > 2;$border_style='broad' if$border_width > $EM * 0.2 && $border_width < $EM * 0.75;$border_style='wide' if$border_width >= $EM * 0.75;if ($border_style ne 'none'){my$c=$self->{cell_class};my$b_top=$border_style;my$b_left=$border_style;my$b_right=$border_style;my$b_bottom=$border_style;if ($c !~ 'ga'){$b_top='none' unless$c =~ /gt/;$b_left='none' unless$c =~ /gl/;$b_right='none' unless$c =~ /gr/;$b_bottom='none' unless$c =~ /gb/}$self->_draw_border($fb,$b_right,$b_bottom,$b_left,$b_top,$x,$y)}if ($self->{has_label}){my$align=$self->attribute('align');my$ys=0.5;$ys=0 if$border_style eq 'none';my$h=$self->{h}- 1;$h ++ if$border_style eq 'none';$self->_printfb_aligned ($fb,0,$ys,$self->{w},$h,$self->_aligned_label($align),'middle')}join ("\n",@$fb)}sub class {my$self=shift;$self->{class}.$self->{cell_class}}sub _correct_size {my ($self,$format)=@_;if (!defined$self->{w}){my$border=$self->attribute('borderstyle');$self->{w}=0;$self->{h}=0;$self->{h}=1 if$self->{has_label};if ($border ne 'none'){if ($self->{has_label}|| ($self->{cell_class}=~ /g[rltb] /)){$self->{w}=2;$self->{h}=2}elsif ($self->{cell_class}=~ /^ g[rl]\z/){$self->{w}=2}elsif ($self->{cell_class}=~ /^ g[bt]\z/){$self->{h}=2}}}if ($self->{has_label}){my ($w,$h)=$self->dimensions();$self->{h}+= $h;$self->{w}+= $w}}1;
GRAPH_EASY_GROUP_CELL

$fatpacked{"Graph/Easy/Layout.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT';
  package Graph::Easy::Layout;$VERSION='0.76';package Graph::Easy;use strict;use warnings;require Graph::Easy::Node::Cell;use Graph::Easy::Edge::Cell qw/EDGE_HOR EDGE_VER EDGE_CROSS EDGE_TYPE_MASK EDGE_MISC_MASK EDGE_NO_M_MASK EDGE_SHORT_CELL/;use constant {ACTION_NODE=>0,ACTION_TRACE=>1,ACTION_CHAIN=>2,ACTION_EDGES=>3,ACTION_SPLICE=>4,};require Graph::Easy::Layout::Chain;use Graph::Easy::Layout::Scout;use Graph::Easy::Layout::Repair;use Graph::Easy::Layout::Path;use Graph::Easy::Util qw(ord_values);sub _assign_ranks {my$self=shift;my$todo=Graph::Easy::Heap->new();$todo->sort_sub(sub ($$) {abs($_[0])<=> abs($_[1])});my@also;my@N=$self->sorted_nodes('id');push@N,$self->groups();my$root=$self->root_node();$todo->add([$root->{rank}=-1,$root])if ref$root;for my$n (@N){next if$root && $n==$root;my$rank_att=$n->raw_attribute('rank');$rank_att=undef if defined$rank_att && $rank_att eq 'auto';$rank_att=0 if defined$rank_att && $rank_att eq 'same';$rank_att++ if defined$rank_att;$n->{rank}=$rank_att;$n->{rank}=-1 if!defined$n->{rank}&& $n->predecessors()==0;$todo->add([$n->{rank},$n])if defined$n->{rank};push@also,$n unless defined$n->{rank}}while ((@also!=0)|| $todo->elements()!=0){while (my$elem=$todo->extract_top()){my ($rank,$n)=@$elem;my$l=$n->{rank};$l=-$l if$l > 0;$l--;for my$o ($n->successors()){if (!defined$o->{rank}){$o->{rank}=$l;$todo->add([$l,$o])}}}last unless@also;while (@also){my$n=shift@also;next if defined$n->{rank};$n->{rank}=-1;$todo->add([-1,$n]);last}}$self}sub _follow_chain {my ($node)=@_;my$self=$node->{graph};no warnings 'recursion';my$indent=' ' x (($node->{_chain}->{id}|| 0)+ 1);print STDERR "#$indent Tracking chain from $node->{name}\n" if$self->{debug};my$chain=Graph::Easy::Layout::Chain->new(start=>$node,graph=>$self);$self->{chains}->{$chain->{id}}=$chain;my$first_node=$node;my$done=1;NODE: while (3 < 5){my$c=$node->{_chain};local$node->{_c}=1;my%suc;for my$e (ord_values ($node->{edges})){my$to=$e->{to};next if$e->{from}==$e->{to};next if$e->{to}->isa('Graph::Easy::Group')|| $e->{from}->isa('Graph::Easy::Group');$to=$e->{from}if$e->{bidirectional}&& $to==$node;next if$to==$node;if (defined$e->edge_flow()){%suc=($to->{name}=>$to);last}next if exists$to->{_c};next if defined$to->{_chain}&& $to->{_chain}==$c;next if$to->find_grandparent()==$node->find_grandparent();$suc{$to->{name}}=$to}last if keys%suc==0;if (scalar keys%suc==1){my ($key)=keys(%suc);my$s=$suc{$key };if (!defined$s->{_chain}){$c->add_node($s);$node=$s;print STDERR "#$indent Skipping ahead to $node->{name}\n" if$self->{debug};$done++;next NODE}}my$max=-1;my$next;my$next_chain=undef;print STDERR "#$indent $node->{name} successors: \n" if$self->{debug};my@rc;for my$s (ord_values (\%suc)){print STDERR "# suc $s->{name} chain ",$s->{_chain}|| 'undef',"\n" if$self->{debug};$done += _follow_chain($s)if!defined$s->{_chain};next if$s->{_chain}==$c;my$ch=$s->{_chain};push@rc,[$ch,$s ];($next_chain,$max,$next)=($ch,$ch->{len},$s)if$ch->{len}> $max}if (defined$next_chain && $self->{debug}){print STDERR "#   results of tracking successors:\n";for my$ch (@rc){my ($c,$s)=@$ch;my$len=$c->length($s);print STDERR "#    chain $c->{id} starting at $c->{start}->{name} (len $c->{len}) "." pointing to node $s->{name} (len from there: $len)\n"}print STDERR "# Max chain length is $max (chain id $next_chain->{id})\n"}if (defined$next_chain){print STDERR "#$indent $node->{name} next: " .$next_chain->start()->{name}."\n" if$self->{debug};if ($self->{debug}){print STDERR "# merging chains\n";$c->dump();$next_chain->dump()}$c->merge($next_chain,$next)unless$next==$self->{_root};delete$self->{chains}->{$next_chain->{id}}if$next_chain->{len}==0}last}print STDERR "#$indent Chain $node->{_chain} ended at $node->{name}\n" if$self->{debug};$done}sub _find_chains {my$self=shift;print STDERR "# Tracking chains\n" if$self->{debug};$self->{_chains}={};$self->{_chain}=0;my$p;my$has_origin=0;for my$n (ord_values ($self->{nodes}),ord_values ($self->{groups})){$n->{_chain}=undef;$has_origin=0;$has_origin=1 if defined$n->{origin}&& $n->{origin}!=$n;$p->{$n->{name}}=[$n->has_predecessors(),$has_origin,abs($n->{rank})]}my$done=0;my$todo=scalar keys %{$self->{nodes}};my$root_name=$self->{attr}->{root};$self->{_root}=undef;for my$name ($root_name,sort {my$aa=$p->{$a};my$bb=$p->{$b};$aa->[2]<=> $bb->[2]|| $aa->[1]<=> $bb->[1]|| $aa->[0]<=> $bb->[0]|| $a cmp $b}keys %$p){next unless defined$name;my$n=$self->{nodes}->{$name};$self->{_root}=$n unless defined$self->{_root};last if$done==$todo;$done += _follow_chain($n)unless defined$n->{_chain}}print STDERR "# Oops - done only $done nodes, but should have done $todo.\n" if$done!=$todo && $self->{debug};print STDERR "# Done all $todo nodes.\n" if$done==$todo && $self->{debug};$self->{_root}}sub _dump_stack {my ($self,@todo)=@_;print STDERR "# Action stack contains ",scalar@todo," steps:\n";for my$action (@todo){my$action_type=$action->[0];if ($action_type==ACTION_NODE){my ($at,$node,$try,$edge)=@$action;my$e='';$e=" on edge $edge->{id}" if defined$edge;print STDERR "#  place '$node->{name}' with try $try$e\n"}elsif ($action_type==ACTION_CHAIN){my ($at,$node,$try,$parent,$edge)=@$action;my$id='unknown';$id=$edge->{id}if ref($edge);print STDERR "#  chain '$node->{name}' from parent '$parent->{name}' with try $try (for edge id $id)'\n"}elsif ($action_type==ACTION_TRACE){my ($at,$edge)=@$action;my ($src,$dst)=($edge->{from},$edge->{to});print STDERR "#  trace '$src->{name}' to '$dst->{name}' via edge $edge->{id}\n"}elsif ($action_type==ACTION_EDGES){my$at=shift @$action;print STDERR "#  tracing the following edges, shortest and with flow first:\n"}elsif ($action_type==ACTION_SPLICE){my ($at)=@$action;print STDERR "#  splicing in group filler cells\n"}}}sub _action {my ($self,$action,$node,@params)=@_;delete$node->{_todo};$node->_mark_as_placed()if keys %{$node->{children}}> 0;[$action,$node,@params ]}sub layout {my$self=shift;my$args=$_[0];$args={@_ }if @_ > 1;my$type='adhoc';$type='force' if$args->{type}&& $args->{type}eq 'force';eval {local$SIG{ALRM}=sub {die "layout did not finish in time\n"};alarm(abs($args->{timeout}|| $self->{timeout}|| 5))unless defined$DB::single;print STDERR "#\n# Starting $type-based layout.\n" if$self->{debug};srand($self->{seed});if ($type eq 'force'){require Graph::Easy::Layout::Force;$self->error("Force-directed layouts are not yet implemented.");$self->_layout_force()}else {$self->_edges_into_groups();$self->_layout()}};alarm(0);$self->{chains}=undef;for my$n (ord_values ($self->{nodes}),ord_values ($self->{groups})){$n->{_next}=undef;delete$n->{_chain};delete$n->{_c}}delete$self->{_root};die $@ if $@}sub _drop_caches {my$self=shift;for my$n (ord_values ($self->{nodes})){$n->{cache}={};$n->{x}=undef;$n->{y}=undef;$n->{w}=undef;$n->{_todo}=undef}for my$g (ord_values ($self->{groups})){$g->{x}=undef;$g->{y}=undef;$g->{_todo}=undef}}sub _layout {my$self=shift;print STDERR "# Doing layout for ",(defined$self->{name}? 'group ' .$self->{name}: 'main graph'),"\n" if$self->{debug};$self->_drop_caches();local $_;$_->_grow()for ord_values ($self->{nodes});$self->_assign_ranks();my$root=$self->_find_chains();my@todo=$self->_action(ACTION_NODE,$root,0)if ref$root;if ($self->{debug}){print STDERR "#  Generated the following chains:\n";for my$chain (sort {$a->{len}<=> $b->{len}|| $a->{start}->{name}cmp $b->{start}->{name}}values %{$self->{chains}}){$chain->dump('  ')}}for my$edge (ord_values ($self->{edges})){$edge->_clear_cells();$edge->{_todo}=undef}for my$chain (sort {(($b->{start}==$root)<=> ($a->{start}==$root))|| ($b->{len}<=> $a->{len})|| (defined($a->{start}->{origin})<=> defined ($b->{start}->{origin}))|| ($a->{start}->{name}cmp $b->{start}->{name})}values %{$self->{chains}}){print STDERR "# laying out chain $chain->{id} (len $chain->{len})\n" if$self->{debug};push@todo,@{$chain->layout()}unless$chain->{_done}}print STDERR "# Done laying out all chains, doing left-overs:\n" if$self->{debug};$self->_dump_stack(@todo)if$self->{debug};for my$n (ord_values ($self->{nodes})){push@todo,$self->_action(ACTION_NODE,$n,0);my@edges=();for my$e (sort {$a->{to}->{name}cmp $b->{to}->{name}}values %{$n->{edges}}){next unless exists$e->{_todo};next if$e->{to}->isa('Graph::Easy::Group')|| $e->{from}->isa('Graph::Easy::Group');push@edges,$e;delete$e->{_todo}}for my$e (@edges){push@todo,[ACTION_TRACE,$e ]}}print STDERR "# Done laying out left-overs.\n" if$self->{debug};if (scalar$self->groups()> 0){push@todo,[ACTION_SPLICE ]if scalar$self->groups();for my$n (ord_values ($self->{groups})){}}$self->_dump_stack(@todo)if$self->{debug};my$score=0;$self->{cells}={};my$cells=$self->{cells};print STDERR "# Start\n" if$self->{debug};$self->{padding_cells}=0;my@done=();my$step=0;my$tries=16;$self->{_rank_pos}={};$self->{_rank_coord}='y';my$flow=$self->flow();$self->{_rank_coord}='x' if$flow==0 || $flow==180;TRY: while (@todo > 0){$step ++;if ($self->{debug}&& ($step % 1)==0){my ($nodes,$e_nodes,$edges,$e_edges)=$self->_count_done_things();print STDERR "# Done $nodes nodes and $edges edges.\n";return if ($nodes > 230)}my$action=shift@todo;push@done,$action;my$action_type=$action->[0];my ($src,$dst,$mod,$edge);if ($action_type==ACTION_NODE){my (undef,$node,$try,$edge)=@$action;print STDERR "# step $step: action place '$node->{name}' (try $try)\n" if$self->{debug};$mod=0 if defined$node->{x};$mod=$self->_find_node_place($node,$try,undef,$edge)unless defined$node->{x}}elsif ($action_type==ACTION_CHAIN){my (undef,$node,$try,$parent,$edge)=@$action;print STDERR "# step $step: action chain '$node->{name}' from parent '$parent->{name}'\n" if$self->{debug};$mod=0 if defined$node->{x};$mod=$self->_find_node_place($node,$try,$parent,$edge)unless defined$node->{x}}elsif ($action_type==ACTION_TRACE){($action_type,$edge)=@$action;$src=$edge->{from};$dst=$edge->{to};print STDERR "# step $step: action trace '$src->{name}' => '$dst->{name}'\n" if$self->{debug};if (!defined$dst->{x}){$mod=$self->_find_node_place($dst,0,undef,$edge)}if (!defined$src->{x}){$mod=$self->_find_node_place($src,0,undef,$edge)}$mod=$self->_trace_path($src,$dst,$edge)}elsif ($action_type==ACTION_SPLICE){$self->_fill_group_cells($cells)unless$self->{error};$mod=0}else {require Carp;Carp::confess ("Illegal action $action->[0] on TODO stack")}if (!defined$mod){if (($action_type==ACTION_NODE || $action_type==ACTION_CHAIN)){print STDERR "# Step $step: Rewind stack for $action->[1]->{name}\n" if$self->{debug};$action->[1]->_unplace()if defined$action->[1]->{x};$action->[2]++;$tries--;last TRY if$tries==0}else {print STDERR "# Step $step: Rewind stack for path from $src->{name} to $dst->{name}\n" if$self->{debug};$tries--;last TRY if$tries==0;next TRY}unshift@todo,$action;next TRY}$score += $mod;print STDERR "# Step $step: Score is $score\n\n" if$self->{debug}}$self->{score}=$score;{my ($nodes,$e_nodes,$edges,$e_edges)=$self->_count_done_things();if (($nodes!=$e_nodes)|| ($edges!=$e_edges)){$self->warn("Layouter could only place $nodes nodes/$edges edges out of $e_nodes/$e_edges - giving up")}else {$self->_optimize_layout()}}}sub _count_done_things {my$self=shift;my$nodes=0;my$i=1;for my$n (ord_values ($self->{nodes})){$nodes++ if defined$n->{x}}my$edges=0;$i=1;for my$e (ord_values ($self->{edges})){$edges++ if scalar @{$e->{cells}}> 0 &&!exists$e->{_todo}}my$e_nodes=scalar keys %{$self->{nodes}};my$e_edges=scalar keys %{$self->{edges}};return ($nodes,$e_nodes,$edges,$e_edges)}my$size_name={EDGE_HOR()=>['cx','x' ],EDGE_VER()=>['cy','y' ]};sub _optimize_layout {my$self=shift;my$all_cells=$self->{cells};for my$e (ord_values ($self->{edges})){my$cells=$e->{cells};next if @$cells < 2;print STDERR "# Compacting edge $e->{from}->{name} to $e->{to}->{name}\n" if$self->{debug};my$f=$cells->[0];my$i=1;my ($px,$py);while ($i < @$cells){my$c=$cells->[$i++];my$t1=$f->{type}& EDGE_NO_M_MASK;my$t2=$c->{type}& EDGE_NO_M_MASK;my$delete=0;if ($t1==$t2 && ($t1==EDGE_HOR || $t1==EDGE_VER)){$f->{type}+= $c->{type}& EDGE_MISC_MASK;my ($m,$co)=@{$size_name->{$t1}};$f->{$m}=($f->{$m}|| 1)+ ($c->{$m}|| 1);delete$all_cells->{"$c->{x},$c->{y}" };($px,$py)=($c->{x},$c->{y});if ($f->{$co}> $c->{$co}){($px,$py)=($f->{x},$f->{y});delete$all_cells->{"$f->{x},$f->{y}" };$f->{$co}-= ($c->{$m}|| 1);$all_cells->{"$f->{x},$f->{y}" }=$f}$delete=1}$delete=2 if$c->{type}==EDGE_HOLE;if ($delete){splice (@{$e->{cells}},$i-1,1);if ($delete==1){my$xy="$px,$py";$all_cells->{$xy}=Graph::Easy::Edge::Cell::Empty->new (x=>$px,y=>$py,)unless$all_cells->{$xy};$i--;$c=$f}else {$c=$cells->[$i-1]}}$f=$c}}print STDERR "# Done compacting edges.\n" if$self->{debug}}1;
GRAPH_EASY_LAYOUT

$fatpacked{"Graph/Easy/Layout/Chain.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT_CHAIN';
  package Graph::Easy::Layout::Chain;use Graph::Easy::Base;$VERSION='0.76';@ISA=qw/Graph::Easy::Base/;use strict;use warnings;use Graph::Easy::Util qw(ord_values);use constant {_ACTION_NODE=>0,_ACTION_TRACE=>1,_ACTION_CHAIN=>2,_ACTION_EDGES=>3,};sub _init {my ($self,$args)=@_;for my$k (sort keys %$args){if ($k !~ /^(start|graph)\z/){require Carp;Carp::confess ("Invalid argument '$k' passed to __PACKAGE__->new()")}$self->{$k}=$args->{$k}}$self->{end}=$self->{start};$self->{start}->{_chain}=$self;$self->{start}->{_next}=undef;$self->{len}=1;$self}sub start {my$self=shift;$self->{start}}sub end {my$self=shift;$self->{end}}sub add_node {my ($self,$node)=@_;$self->{end}->{_next}=$node;$self->{end}=$node;$node->{_chain}=$self;$node->{_next}=undef;$self->{len}++;$self}sub length {my ($self,$node)=@_;return$self->{len}unless defined$node;my$len=0;while (defined$node){$len++;$node=$node->{_next}}$len}sub nodes {my$self=shift;my@nodes=();my$n=$self->{start};while (defined$n){push@nodes,$n;$n=$n->{_next}}@nodes}sub layout {my ($self,$edge)=@_;return []if$self->{_done};$self->{_done}=1;my@TODO=();my$g=$self->{graph};my$pre=$self->{start};my$n=$pre->{_next};if (exists$pre->{_todo}){if ($edge && ($edge->{to}==$pre)&& ($edge->attribute('flow')|| $edge->has_ports())){push@TODO,$g->_action(_ACTION_CHAIN,$pre,0,$edge->{from},$edge)}else {push@TODO,$g->_action(_ACTION_NODE,$pre,0,$edge)}}print STDERR "# Stack after first:\n" if$g->{debug};$g->_dump_stack(@TODO)if$g->{debug};while (defined$n){if (exists$n->{_todo}){my@edges=$g->edge($pre,$n);push@TODO,$g->_action(_ACTION_CHAIN,$n,0,$pre,$edges[0])}$pre=$n;$n=$n->{_next}}print STDERR "# Stack after chaining:\n" if$g->{debug};$g->_dump_stack(@TODO)if$g->{debug};$pre=$self->{start};$n=$pre->{_next};while (defined$n){for my$e (ord_values ($pre->{edges})){next if$e->{to}!=$n;next unless exists$e->{_todo};next if$e->{to}->isa('Graph::Easy::Group')|| $e->{from}->isa('Graph::Easy::Group');push@TODO,[_ACTION_TRACE,$e ];delete$e->{_todo}}}continue {$pre=$n;$n=$n->{_next}}print STDERR "# Stack after chain-linking:\n" if$g->{debug};$g->_dump_stack(@TODO)if$g->{debug};$n=$self->{start};while (defined$n){my@edges;my@count;print STDERR "# inter-chain link from $n->{name}\n" if$g->{debug};for my$e (ord_values ($n->{edges})){next if$e->{to}==$n;next if!ref($e->{to}->{_chain});next if!ref($e->{from}->{_chain});next if$e->has_ports();next if$e->{to}->isa('Graph::Easy::Group')|| $e->{from}->isa('Graph::Easy::Group');print STDERR "# inter-chain link from $n->{name} to $e->{to}->{name}\n" if$g->{debug};next if$e->{to}->{_chain}!=$self;next unless exists$e->{_todo};my$count=0;my$curr=$n;while (defined$curr && $curr!=$e->{to}){$curr=$curr->{_next};$count ++}if (!defined$curr){$curr=$e->{to};$count=0;while (defined$curr && $curr!=$e->{from}){$curr=$curr->{_next};$count ++}$count=100000 if!defined$curr}push@edges,[$count,$e ];push@count,[$count,$e->{from}->{name},$e->{to}->{name}]}for my$e (sort {$a->[0]<=> $b->[0]}@edges){push@TODO,[_ACTION_TRACE,$e->[1]];delete$e->[1]->{_todo}}$n=$n->{_next}}$n=$self->{start};while (defined$n){for my$e (ord_values$n->{edges}){next unless exists$e->{_todo};next if$e->{from}!=$n || $e->{to}!=$n;push@TODO,[_ACTION_TRACE,$e ];delete$e->{_todo}}$n=$n->{_next}}print STDERR "# Stack after self-loops:\n" if$g->{debug};$g->_dump_stack(@TODO)if$g->{debug};$n=$self->{start};while (defined$n){for my$e (sort {$a->{to}->{name}cmp $b->{to}->{name}}values %{$n->{edges}}){my$to=$e->{to};next if$to->isa('Graph::Easy::Group');next unless exists$to->{_chain}&& ref($to->{_chain})=~ /Chain/;my$chain=$to->{_chain};next if$chain->{_done};push@TODO,@{$chain->layout($e)}unless$chain->{_done};next unless exists$e->{_todo};push@TODO,[_ACTION_TRACE,$e ];delete$e->{_todo}}$n=$n->{_next}}\@TODO}sub dump {my ($self,$indent)=@_;$indent='' unless defined$indent;print STDERR "#$indent chain id $self->{id} (len $self->{len}):\n";print STDERR "#$indent is empty\n" and return if$self->{len}==0;my$n=$self->{start};while (defined$n){print STDERR "#$indent  $n->{name} (chain id: $n->{_chain}->{id})\n";$n=$n->{_next}}$self}sub merge {my ($self,$other,$where)=@_;my$g=$self->{graph};print STDERR "# panik: ",join(" \n",caller()),"\n" if!defined$other;print STDERR "# Merging chain $other->{id} (len $other->{len}) into $self->{id} (len $self->{len})\n" if$g->{debug};print STDERR "# Merging from $where->{name} onwards\n" if$g->{debug}&& ref($where);return if$self==$other;$where=undef unless ref($where)&& exists$where->{_chain}&& $where->{_chain}==$other;$where=$other->{start}unless defined$where;my$n=$self->{start};while (defined$n){$n->{_chain}=$self;$n=$n->{_next}}print STDERR "# changed nodes\n" if$g->{debug};$self->dump()if$g->{debug};$self->{end}->{_next}=$where;$self->{end}=$other->{end};$n=$where;while (ref($n)){$n->{_chain}=$self;my$pre=$n;$n=$n->{_next};if (ref($n)&& defined$n->{_chain}&& $n->{_chain}==$self){$pre->{_next}=undef;$self->{end}=$pre;last}}$self->{len}=0;$n=$self->{start};while (defined$n){$self->{len}++;$n=$n->{_next}}if (defined$other->{start}&& $where==$other->{start}){$other->{end}=undef;$other->{start}=undef;$other->{len}=0}print STDERR "# after merging\n" if$g->{debug};$self->dump()if$g->{debug};$self}1;
GRAPH_EASY_LAYOUT_CHAIN

$fatpacked{"Graph/Easy/Layout/Force.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT_FORCE';
  package Graph::Easy::Layout::Force;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use Graph::Easy::Util qw(ord_values);sub _layout_force {my ($self)=@_;my@nodes=$self->nodes();return if@nodes==0;my$root=$self->root_node();if (!defined$root){$root=$nodes[0]}$root->{_pinned}=undef;$root->{x}=0;$root->{y}=0;my$gx=0;my$gy=0;my$flow=$self->flow();if ($flow==0){$gx=1}elsif ($flow==90){$gy=-1}elsif ($flow==270){$gy=1}else {$gx=-1}my@particles;for my$n (@nodes){$n->{_x_force}=$gx;$n->{_y_force}=$gy;if ($root==$n || defined$n->{origin}){$n->{_pinned}=undef}else {$n->{x}=rand(100);$n->{y}=rand(100);push@particles,$n}}my$energy=1;while ($energy > 0.1){$energy=0;for my$n (@particles){$n->{_x_force}=0;$n->{_y_force}=0;for my$n2 (@nodes){next if$n2==$n;my$dx=($n->{x}- $n2->{x});my$dy=($n->{y}- $n2->{y});my$r=$dx * $dx + $dy * $dy;$r=0.01 if$r < 0.01;if ($r < 4){$n->{_x_force}+= 1 / $dx * $dx;$n->{_y_force}+= 1 / $dy * $dy;my$dx2=1 / $dx * $dx;my$dy2=1 / $dy * $dy;print STDERR "# Force between $n->{name} and $n2->{name}: fx $dx2, fy $dy2\n"}}for my$e (ord_values ($n->{edges})){next if$e->{from}==$n && $e->{to}==$n;my$n2=$e->{from};$n2=$e->{to}if$n2==$n;my$dx=-($n->{x}- $n2->{x})/ 2;my$dy=-($n->{y}- $n2->{y})/ 2;print STDERR "# Spring force between $n->{name} and $n2->{name}: fx $dx, fy $dy\n";$n->{_x_force}+= $dx;$n->{_y_force}+= $dy}print STDERR "# $n->{name}: Summed force: fx $n->{_x_force}, fy $n->{_y_force}\n";my$dx=int($n->{x}+ 0.5)- $n->{x};$n->{_x_force}+= $dx;my$dy=int($n->{y}+ 0.5)- $n->{y};$n->{_y_force}+= $dy;print STDERR "# $n->{name}: Final force: fx $n->{_x_force}, fy $n->{_y_force}\n";$energy += $n->{_x_force}* $n->{_x_force}+ $n->{_x_force}* $n->{_y_force};print STDERR "# Net energy: $energy\n"}for my$n (@particles){my$dx=$n->{_x_force};$dx=5 if$dx > 5;$n->{x}+= $dx;my$dy=$n->{_y_force};$dy=5 if$dy > 5;$n->{y}+= $dy;print STDERR "# $n->{name}: Position $n->{x}, $n->{y}\n"}sleep(1);print STDERR "\n"}for my$n (@nodes){delete$n->{_x_force};delete$n->{_y_force}}$self}1;
GRAPH_EASY_LAYOUT_FORCE

$fatpacked{"Graph/Easy/Layout/Grid.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT_GRID';
  package Graph::Easy::Layout::Grid;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use Graph::Easy::Util qw(ord_values);sub _balance_sizes {my ($self,$sizes,$need)=@_;return if$need < 1;if (@$sizes==1){$sizes->[0]=$need if$sizes->[0]< $need;return}while (1){my$sum=0;my$i=0;my$sm=$need + 1;my$sm_i=0;for my$s (@$sizes){$sum += $s;next if$s==0;if ($s < $sm){$sm=$s;$sm_i=$i}$i++}last if$sum >= $need;$sizes->[$sm_i]++}undef}sub _prepare_layout {my ($self,$format)=@_;my$cells=$self->{cells};my$rows={};my$cols={};my$mx=-1000000;my$my=-1000000;for my$cell (ord_values$cells){my ($x,$y)=($cell->{x},$cell->{y});{no strict 'refs';my$method='_correct_size_' .$format;$method='_correct_size' unless$cell->can($method);$cell->$method()}my$w=$cell->{w}|| 0;my$h=$cell->{h}|| 0;if ((($cell->{cx}||1)+ ($cell->{cy}||1))==2){$rows->{$y}=$h if$h >= ($rows->{$y}|| 0);$cols->{$x}=$w if$w >= ($cols->{$x}|| 0)}$mx=$x if$x > $mx;$my=$y if$y > $my}$rows->{$my+1}=0;$cols->{$mx+1}=0;for my$cell (ord_values$cells){my ($x,$y)=($cell->{x},$cell->{y});my$w=$cell->{w}|| 0;my$h=$cell->{h}|| 0;if ((($cell->{cx}|| 1)+ ($cell->{cy}||1))> 2){$cell->{cx}||=1;$cell->{cy}||=1;my@sizes;for (my$i=0;$i < $cell->{cx};$i++){push@sizes,$cols->{$i+$x}|| 0}$self->_balance_sizes(\@sizes,$cell->{w});for (my$i=0;$i < $cell->{cx};$i++){$cols->{$i+$x}=$sizes[$i]}@sizes=();for (my$i=0;$i < $cell->{cy};$i++){push@sizes,$rows->{$i+$y}|| 0}$self->_balance_sizes(\@sizes,$cell->{h});for (my$i=0;$i < $cell->{cy};$i++){$rows->{$i+$y}=$sizes[$i]}}}print STDERR "# Calculating absolute positions for rows/columns\n" if$self->{debug};my$pos=0;for my$y (sort {$a <=> $b}keys %$rows){my$s=$rows->{$y};$rows->{$y}=$pos;$pos += $s}$pos=0;for my$x (sort {$a <=> $b}keys %$cols){my$s=$cols->{$x};$cols->{$x}=$pos;$pos += $s}print STDERR "# Finding max. dimensions for framebuffer\n" if$self->{debug};my$max_y=0;my$max_x=0;for my$v (ord_values$cells){next if ($v->{cx}||1)+ ($v->{cy}||1)!=2;my$x=$cols->{$v->{x}};my$y=$rows->{$v->{y}};$v->{minw}=$v->{w};$v->{minh}=$v->{h};my$nx=$v->{x}+ 1;my$next_col=$cols->{$nx };my$ny=$v->{y}+ 1;my$next_row=$rows->{$ny };$next_col=$cols->{++$nx }while (!defined$next_col);$next_row=$rows->{++$ny }while (!defined$next_row);$v->{w}=$next_col - $x;$v->{h}=$next_row - $y;my$m=$y + $v->{h}- 1;$max_y=$m if$m > $max_y;$m=$x + $v->{w}- 1;$max_x=$m if$m > $max_x}for my$v (ord_values ($self->{cells})){next unless defined$v->{x}&& (($v->{cx}||1)+ ($v->{cy}||1)> 2);my$x=$cols->{$v->{x}};my$y=$rows->{$v->{y}};$v->{minw}=$v->{w};$v->{minh}=$v->{h};my$nx=$v->{x}+ ($v->{cx}|| 1);my$next_col=$cols->{$nx };my$ny=$v->{y}+ ($v->{cy}|| 1);my$next_row=$rows->{$ny };$next_col=$cols->{++$nx }while (!defined$next_col);$next_row=$rows->{++$ny }while (!defined$next_row);$v->{w}=$next_col - $x;$v->{h}=$next_row - $y;my$m=$y + $v->{h}- 1;$max_y=$m if$m > $max_y;$m=$x + $v->{w}- 1;$max_x=$m if$m > $max_x}($rows,$cols,$max_x,$max_y)}1;
GRAPH_EASY_LAYOUT_GRID

$fatpacked{"Graph/Easy/Layout/Path.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT_PATH';
  package Graph::Easy::Layout::Path;$VERSION='0.76';package Graph::Easy::Node;use strict;use warnings;use Graph::Easy::Edge::Cell qw/EDGE_END_E EDGE_END_N EDGE_END_S EDGE_END_W/;sub _shuffle_dir {my ($self,$e,$dir)=@_;$dir=90 unless defined$dir;return [@$e ]if$dir==90;my@shuffle=(0,1,2,3);@shuffle=(1,2,0,3)if$dir==180;@shuffle=(2,3,1,0)if$dir==270;@shuffle=(3,0,2,1)if$dir==0;[$e->[$shuffle[0]],$e->[$shuffle[1]],$e->[$shuffle[2]],$e->[$shuffle[3]],]}sub _shift {my ($self,$turn)=@_;my$dir=$self->flow();$dir += $turn;$dir += 360 if$dir < 0;$dir -= 360 if$dir > 360;$dir}sub _near_places {my ($n,$cells,$d,$type,$loose,$dir)=@_;my$cx=$n->{cx}|| 1;my$cy=$n->{cy}|| 1;$d=2 unless defined$d;my$flags=$type;if (ref($flags)ne 'ARRAY'){$flags=[EDGE_END_W,EDGE_END_N,EDGE_END_E,EDGE_END_S,]}$dir=$n->flow()unless defined$dir;my$index=$n->_shuffle_dir([0,3,6,9],$dir);my@places=();if ($cx + $cy==2){my@tries=($n->{x}+ $d,$n->{y},$flags->[0],$n->{x},$n->{y}+ $d,$flags->[1],$n->{x}- $d,$n->{y},$flags->[2],$n->{x},$n->{y}- $d,$flags->[3],);for my$i (0..3){my$idx=$index->[$i];my ($x,$y,$t)=($tries[$idx],$tries[$idx+1],$tries[$idx+2]);next if!$loose && exists$cells->{"$x,$y"};push@places,$x,$y;push@places,$t if defined$type}return@places}my$nx=$n->{x};my$ny=$n->{y};my ($px,$py);my$idx=0;my@results=([],[],[],[]);$cy--;$cx--;my$t=$flags->[$idx++];$px=$nx + $cx + $d;for my$y (0 .. $cy){$py=$y + $ny;next if exists$cells->{"$px,$py"}&&!$loose;push @{$results[0]},$px,$py;push @{$results[0]},$t if defined$type}$py=$ny + $cy + $d;$t=$flags->[$idx++];for my$x (0 .. $cx){$px=$x + $nx;next if exists$cells->{"$px,$py"}&&!$loose;push @{$results[1]},$px,$py;push @{$results[1]},$t if defined$type}$px=$nx - $d;$t=$flags->[$idx++];for my$y (0 .. $cy){$py=$y + $ny;next if exists$cells->{"$px,$py"}&&!$loose;push @{$results[2]},$px,$py;push @{$results[2]},$t if defined$type}$py=$ny - $d;$t=$flags->[$idx];for my$x (0 .. $cx){$px=$x + $nx;next if exists$cells->{"$px,$py"}&&!$loose;push @{$results[3]},$px,$py;push @{$results[3]},$t if defined$type}for my$i (0..3){my$idx=$index->[$i]/ 3;push@places,@{$results[$idx]}}@places}sub _allowed_places {my ($self,$places,$allowed,$step)=@_;print STDERR "# calculating allowed places for $self->{name} from " .@$places ." positions and " .scalar @$allowed ." allowed ones:\n" if$self->{graph}->{debug};$step ||=2;my@good;my$i=0;while ($i < @$places){my ($x,$y)=($places->[$i],$places->[$i+1]);my$allow=0;my$j=0;while ($j < @$allowed){my ($m,$n)=($allowed->[$j],$allowed->[$j+1]);$allow++ and last if ($m==$x && $n==$y)}continue {$j += 2}next unless$allow;push@good,$places->[$i + $_ -1]for (1..$step)}continue {$i += $step}print STDERR "#  left with " .((scalar@good)/ $step)." position(s)\n" if$self->{graph}->{debug};@good}sub _allow {my ($self,$dir,@pos)=@_;if ($dir =~ /^(front|forward|back|left|right)\z/){$dir=$self->flow()}my$place={'south'=>[0,0,0,1,'cx',1,0 ],'north'=>[0,-1,0,0,'cx',1,0 ],'east'=>[0,0,1,0,'cy',0,1 ],'west'=>[-1,0,0,0,'cy',0,1 ],180=>[0,0,0,1,'cx',1,0 ],0=>[0,-1,0,0,'cx',1,0 ],90=>[0,0,1,0,'cy',0,1 ],270=>[-1,0,0,0,'cy',0,1 ],};my$p=$place->{$dir};return []unless defined$p;my$x=$p->[0]+ $self->{x}+ $p->[2]* $self->{cx};my$y=$p->[1]+ $self->{y}+ $p->[3]* $self->{cy};my@allowed;push@pos,'' if@pos==0;my$c=$p->[4];if (@pos==1 && $pos[0]eq ''){for (1 .. $self->{$c}){push@allowed,$x,$y;$x += $p->[5];$y += $p->[6]}}else {my$ps=$pos[0];$ps=$self->{$c}+ $ps if$ps < 0;$ps=0 if$ps < 0;$ps=$self->{$c}- 1 if$ps >= $self->{$c};$x += $p->[5]* $ps;$y += $p->[6]* $ps;push@allowed,$x,$y}\@allowed}package Graph::Easy;use strict;use Graph::Easy::Node::Cell;use Graph::Easy::Edge::Cell qw/EDGE_HOR EDGE_VER EDGE_CROSS EDGE_TYPE_MASK EDGE_HOLE/;sub _clear_tries {my ($self,$node,$cells,$tries)=@_;my$src=0;my@new;print STDERR "# clearing ",scalar @$tries / 2," tries for $node->{name}\n" if$self->{debug};my$node_grandpa=$node->find_grandparent();while ($src < scalar @$tries){my$x=$tries->[$src];my$y=$tries->[$src+1];$node->{x}=$x;$node->{y}=$y;my@near=$node->_near_places($cells,1,undef,1);push@near,$x-1,$y-1,$x-1,$y+($node->{cy}||1),$x+($node->{cx}||1),$y+($node->{cy}||1),$x+($node->{cx}||1),$y-1;my$j=0;my$g=0;while ($j < @near){my$xy=$near[$j].',' .$near[$j+1];my$cell=$cells->{$xy};next unless ref($cell)&& $cell->isa('Graph::Easy::Node');my$grandpa=$cell->find_grandparent();next if$grandpa==$node || $cell==$node_grandpa || $grandpa==$node_grandpa;$g++;last}continue {$j += 2}if ($g==0){push@new,$tries->[$src],$tries->[$src+1]}$src += 2}$node->{x}=undef;@new}my$flow_shift={270=>[0,-1 ],90=>[0,1 ],0=>[1,0 ],180=>[-1,0 ],};sub _placed_shared {my ($self)=shift;my$placed;for my$n (@_){$placed=[$n->{x},$n->{y}]and last if defined$n->{x}}$placed}use Graph::Easy::Util qw(first_kv);sub _find_node_place {my ($self,$node,$try,$parent,$edge)=@_;$try ||=0;print STDERR "# Finding place for $node->{name}, try #$try\n" if$self->{debug};print STDERR "# Parent node is '$parent->{name}'\n" if$self->{debug}&& ref$parent;print STDERR "# called from ".join (" ",caller)."\n" if$self->{debug};if ($node->{rank}>= 0){my$r=abs($node->{rank});my$c=$self->{_rank_coord};if (exists$self->{_rank_pos}->{$r }){my$co={x=>0,y=>0 };$co->{$c}=$self->{_rank_pos}->{$r };while (1 < 3){return 0 if$node->_do_place($co->{x},$co->{y},$self);$co->{$c}+= 2}}}my$cells=$self->{cells};my$min_dist=2;$min_dist=$edge->attribute('minlen')+ 1 if ref($edge);if (!ref($edge)){(undef,$edge)=first_kv($node->{edges})if keys %{$node->{edges}}> 0}my$dir=undef;$dir=$edge->flow()if ref($edge);my@tries;if (keys %{$node->{edges}}> 0){my$src_node=$parent;$src_node=$edge->{from}if ref($edge)&&!ref($parent);print STDERR "#  from $src_node->{name} to $node->{name}: edge $edge dir $dir\n" if$self->{debug};my ($s_p,@ss_p);($s_p,@ss_p)=$edge->port('start')if ref($edge);my ($from,$to);if (ref($edge)){$from=$edge->{from};$to=$edge->{to}}my@shared_nodes;@shared_nodes=$from->nodes_sharing_start($s_p,@ss_p)if defined$s_p && @ss_p > 0;print STDERR "# Edge from '$src_node->{name}' shares an edge start with ",scalar@shared_nodes," other nodes\n" if$self->{debug};if (@shared_nodes > 1){$min_dist=3 if$min_dist < 3;$min_dist++ if$edge->label()ne '';my$placed=$self->_placed_shared(@shared_nodes);if (defined$placed){my ($bx,$by)=@$placed;my$flow=$node->flow();print STDERR "# One of the shared nodes was already placed at ($bx,$by) with flow $flow\n" if$self->{debug};my$ofs=2;my ($mx,$my)=@{($flow_shift->{$flow}|| [0,1 ])};while (1){my$x=$bx + $mx * $ofs;my$y=$by + $my * $ofs;print STDERR "# Trying to place $node->{name} at ($x,$y)\n" if$self->{debug};next if$self->_clear_tries($node,$cells,[$x,$y ])==0;last if$node->_do_place($x,$y,$self)}continue {$ofs += 2}return 0}}($s_p,@ss_p)=$edge->port('end')if ref($edge);@shared_nodes=$to->nodes_sharing_end($s_p,@ss_p)if defined$s_p && @ss_p > 0;print STDERR "# Edge from '$src_node->{name}' shares an edge end with ",scalar@shared_nodes," other nodes\n" if$self->{debug};if (@shared_nodes > 1){$min_dist=3 if$min_dist < 3;$min_dist++ if$edge->label()ne '';my$placed=$self->_placed_shared(@shared_nodes);if ((grep($_==$node,@shared_nodes))&& defined$placed){my ($bx,$by)=@$placed;my$flow=$node->flow();print STDERR "# One of the shared nodes was already placed at ($bx,$by) with flow $flow\n" if$self->{debug};my$ofs=2;my ($mx,$my)=@{($flow_shift->{$flow}|| [0,1 ])};while (1){my$x=$bx + $mx * $ofs;my$y=$by + $my * $ofs;print STDERR "# Trying to place $node->{name} at ($x,$y)\n" if$self->{debug};next if$self->_clear_tries($node,$cells,[$x,$y ])==0;last if$node->_do_place($x,$y,$self)}continue {$ofs += 2}return 0}}}if (ref($parent)&& defined$parent->{x}){@tries=$parent->_near_places($cells,$min_dist,undef,0,$dir);print STDERR "# Trying chained placement of $node->{name} with min distance $min_dist from parent $parent->{name}\n" if$self->{debug};@tries=$self->_clear_tries($node,$cells,\@tries);splice (@tries,0,$try)if$try > 0;print STDERR "# Left with " .scalar@tries ." tries for node $node->{name}\n" if$self->{debug};while (@tries > 0){my$x=shift@tries;my$y=shift@tries;print STDERR "# Trying to place $node->{name} at $x,$y\n" if$self->{debug};return 0 if$node->_do_place($x,$y,$self)}}print STDERR "# Trying to place $node->{name} at 0,0\n" if$try==0 && $self->{debug};return 0 if$try==0 && $node->_do_place(0,0,$self);my@pre_all=$node->predecessors();print STDERR "# Predecessors of $node->{name} " .scalar@pre_all ."\n" if$self->{debug};my@pre;for my$p (@pre_all){push@pre,$p if defined$p->{x};print STDERR "# Placed predecessors of $node->{name}: $p->{name} at $p->{x},$p->{y}\n" if$self->{debug}&& defined$p->{x}}@pre=sort {$b->{rank}<=> $a->{rank}}@pre;print STDERR "# Number of placed predecessors of $node->{name}: " .scalar@pre ."\n" if$self->{debug};if (@pre <= 2 && @pre > 0){if (@pre==1){print STDERR "# placing $node->{name} near predecessor\n" if$self->{debug};@tries=($pre[0]->_near_places($cells,$min_dist),$pre[0]->_near_places($cells,$min_dist+2))}else {my$dx=($pre[0]->{x}- $pre[1]->{x});my$dy=($pre[0]->{y}- $pre[1]->{y});if ($dx!=0 && $dy!=0){@tries=($pre[0]->{x},$pre[1]->{y},$pre[0]->{y},$pre[1]->{x},)}else {if ($dx==0){@tries=($pre[1]->{x},$pre[1]->{y}+ int($dy / 2))}else {@tries=($pre[1]->{x}+ int($dx / 2),$pre[1]->{y})}}for my$n (@pre){push@tries,$n->_near_places($cells,$min_dist)}}}my@suc_all=$node->successors();my@suc;for my$s (@suc_all){push@suc,$s if defined$s->{x}}print STDERR "# Number of placed successors of $node->{name}: " .scalar@suc ."\n" if$self->{debug};for my$s (@suc){push@tries,$s->_near_places($cells,$min_dist);push@tries,$s->_near_places($cells,$min_dist + 2)}@tries=$self->_clear_tries($node,$cells,\@tries);print STDERR "# Left with " .scalar@tries ." for node $node->{name}\n" if$self->{debug};splice (@tries,0,$try)if$try > 0;while (@tries > 0){my$x=shift@tries;my$y=shift@tries;print STDERR "# Trying to place $node->{name} at $x,$y\n" if$self->{debug};return 0 if$node->_do_place($x,$y,$self)}print STDERR "# No more simple possibilities for node $node->{name}\n" if$self->{debug};my$col=0;$col=$node->{rank}* 2 if@pre > 0;$col=$pre[0]->{x}if@pre > 0;my$y=0;$y +=2 while (exists$cells->{"$col,$y"});$y += 1 if exists$cells->{"$col," .($y-1)};while (1){next if$self->_clear_tries($node,$cells,[$col,$y ])==0;last if$node->_do_place($col,$y,$self)}continue {$y += 2}$node->{x}=$col;0}sub _trace_path {my ($self,$src,$dst,$edge)=@_;print STDERR "# Finding path from '$src->{name}' to '$dst->{name}'\n" if$self->{debug};print STDERR "# src: $src->{x}, $src->{y} dst: $dst->{x}, $dst->{y}\n" if$self->{debug};my$coords=$self->_find_path ($src,$dst,$edge);if (!defined$coords){print STDERR "# Unable to find path from $src->{name} ($src->{x},$src->{y}) to $dst->{name} ($dst->{x},$dst->{y})\n" if$self->{debug};return undef}return 1 if scalar @$coords==0;my$i=0;my$score=0;while ($i < scalar @$coords){my$type=$coords->[$i+2];$self->_create_cell($edge,$coords->[$i],$coords->[$i+1],$type);$score ++;$type &=EDGE_TYPE_MASK;$score ++ if$type!=EDGE_HOR && $type!=EDGE_VER;$score += 3 if$type==EDGE_CROSS;$i += 3}$score}sub _create_cell {my ($self,$edge,$x,$y,$type)=@_;my$cells=$self->{cells};my$xy="$x,$y";if (ref($cells->{$xy})&& $cells->{$xy}->isa('Graph::Easy::Edge')){$cells->{$xy}->_make_cross($edge,$type & EDGE_FLAG_MASK);Graph::Easy::Edge::Cell->new(type=>EDGE_HOLE,edge=>$edge,x=>$x,y=>$y);return}my$path=Graph::Easy::Edge::Cell->new(type=>$type,edge=>$edge,x=>$x,y=>$y);$cells->{$xy}=$path}sub _path_is_clear {my ($self,$path)=@_;my$cells=$self->{cells};my$i=0;while ($i < scalar @$path){my$x=$path->[$i];my$y=$path->[$i+1];$i += 3;return 0 if exists$cells->{"$x,$y"}}1}1;
GRAPH_EASY_LAYOUT_PATH

$fatpacked{"Graph/Easy/Layout/Repair.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT_REPAIR';
  package Graph::Easy::Layout::Repair;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use Graph::Easy::Util qw(ord_values);sub _edges_into_groups {my$self=shift;for my$edge (ord_values$self->{edges}){my$gf=$edge->{from}->group();my$gt=$edge->{to}->group();$gf->_add_edge($edge)if defined$gf && defined$gt && $gf==$gt}$self}sub _repair_nodes {my ($self)=@_;my$cells=$self->{cells};for my$n ($self->nodes()){$n->{cx}=$n->{cx}* 2 - 1;$n->{cy}=$n->{cy}* 2 - 1}for my$cell (ord_values$cells){next unless$cell->isa('Graph::Easy::Node::Cell');if ($cell->{x}> $cell->{node}->{x}){my$x=$cell->{x}- 1;my$y=$cell->{y};$cells->{"$x,$y"}=Graph::Easy::Node::Cell->new(node=>$cell->{node},x=>$x,y=>$y)}if ($cell->{y}> $cell->{node}->{y}){my$x=$cell->{x};my$y=$cell->{y}- 1;$cells->{"$x,$y"}=Graph::Easy::Node::Cell->new(node=>$cell->{node},x=>$x,y=>$y)}}}sub _repair_cell {my ($self,$type,$edge,$x,$y,$after,$before)=@_;return if exists$self->{cells}->{"$x,$y"};$self->{cells}->{"$x,$y"}=Graph::Easy::Edge::Cell->new(type=>$type,edge=>$edge,x=>$x,y=>$y,before=>$before,after=>$after)}sub _splice_edges {my ($self)=@_;my$cells=$self->{cells};print STDERR "# Reparing spliced layout\n" if$self->{debug};for my$cell (sort {$a->{x}<=> $b->{x}|| $a->{y}<=> $b->{y}}values %$cells){next unless$cell->isa('Graph::Easy::Edge::Cell');my$edge=$cell->{edge};my$x=$cell->{x}+ 2;my$y=$cell->{y};my$type=$cell->{type}& EDGE_TYPE_MASK;if (($type==EDGE_S_E_W || $type==EDGE_N_E_W || $type==EDGE_E_N_S)&& exists$cells->{"$x,$y"}){my$right=$cells->{"$x,$y"};if ($right->isa('Graph::Easy::Edge::Cell')){$self->error("Found non-edge piece ($right->{type} $right) right to a joint ($type)")unless$right->isa('Graph::Easy::Edge::Cell');$self->_repair_cell(EDGE_HOR(),$right->{edge},$cell->{x}+1,$y,0)if$edge!=$right->{edge}}}$x=$cell->{x}- 2;$y=$cell->{y};if (($type==EDGE_S_E_W || $type==EDGE_N_E_W || $type==EDGE_W_N_S)&& exists$cells->{"$x,$y"}){my$left=$cells->{"$x,$y"};if (!$left->isa('Graph::Easy::Node')){$self->error('Found non-edge piece right to a joint')unless$left->isa('Graph::Easy::Edge::Cell');$self->_repair_cell(EDGE_HOR(),$edge,$cell->{x}+1,$y,0)if$edge!=$left->{edge}}}$x=$cell->{x};$y=$cell->{y}+ 2;if (($type==EDGE_S_E_W || $type==EDGE_E_N_S || $type==EDGE_W_N_S)&& exists$cells->{"$x,$y"}){my$bottom=$cells->{"$x,$y"};$self->error('Found non-edge piece below a joint')unless$bottom->isa('Graph::Easy::Edge::Cell');$self->_repair_cell(EDGE_VER(),$bottom->{edge},$x,$cell->{y}+1,0)if$edge!=$bottom->{edge}}$x=$cell->{x}+ 2;$y=$cell->{y};if (exists$cells->{"$x,$y"}){my$right=$cells->{"$x,$y"};$self->_repair_cell(EDGE_HOR(),$edge,$cell->{x}+1,$y,$cell,$right)if$right->isa('Graph::Easy::Edge::Cell')&& defined$right->{edge}&& defined$right->{type}&& ($edge==$right->{edge}|| $right->{type}==EDGE_CROSS || $cell->{type}==EDGE_CROSS)}$x=$cell->{x};$y=$cell->{y}+2;if (exists$cells->{"$x,$y"}){my$below=$cells->{"$x,$y"};$self->_repair_cell(EDGE_VER(),$edge,$x,$cell->{y}+1,$cell,$below)if$below->isa('Graph::Easy::Edge::Cell')&& ($edge==$below->{edge}|| $below->{type}==EDGE_CROSS || $cell->{type}==EDGE_CROSS)}}$self}sub _new_edge_cell {my ($self,$cells,$group,$edge,$x,$y,$after,$type)=@_;$type += EDGE_SHORT_CELL()if defined$group;my$e_cell=Graph::Easy::Edge::Cell->new(type=>$type,edge=>$edge,x=>$x,y=>$y,after=>$after);$group->_del_cell($e_cell)if defined$group;$cells->{"$x,$y"}=$e_cell}sub _check_edge_cell {my ($self,$cell,$x,$y,$flag,$type,$match,$check,$where)=@_;my$edge=$cell->{edge};if (grep {exists $_->{cell_class}&& $_->{cell_class}=~ $match}ord_values ($check)){$cell->{type}&=~ $flag;$self->_new_edge_cell($self->{cells},$edge->{group},$edge,$x,$y,$where,$type + $flag)}}sub _repair_group_edge {my ($self,$cell,$rows,$cols,$group)=@_;my$cells=$self->{cells};my ($x,$y,$doit);my$type=$cell->{type};$x=$cell->{x}- 1;$y=$cell->{y};$self->_check_edge_cell($cell,$x,$y,EDGE_START_W,EDGE_HOR,qr/g[rl]/,$cols->{$x},0)if (($type & EDGE_START_MASK)==EDGE_START_W);$x=$cell->{x}+ 1;$self->_check_edge_cell($cell,$x,$y,EDGE_START_E,EDGE_HOR,qr/g[rl]/,$cols->{$x},0)if (($type & EDGE_START_MASK)==EDGE_START_E);$x=$cell->{x}+ 1;$self->_check_edge_cell($cell,$x,$y,EDGE_END_E,EDGE_HOR,qr/g[rl]/,$cols->{$x},-1)if (($type & EDGE_END_MASK)==EDGE_END_E);$x=$cell->{x}- 1;$self->_check_edge_cell($cell,$x,$y,EDGE_END_W,EDGE_HOR,qr/g[rl]/,$cols->{$x},-1)if (($type & EDGE_END_MASK)==EDGE_END_W);$x=$cell->{x};$y=$cell->{y}- 1;$self->_check_edge_cell($cell,$x,$y,EDGE_START_N,EDGE_VER,qr/g[tb]/,$rows->{$y},0)if (($type & EDGE_START_MASK)==EDGE_START_N);$y=$cell->{y}+ 1;$self->_check_edge_cell($cell,$x,$y,EDGE_START_S,EDGE_VER,qr/g[tb]/,$rows->{$y},0)if (($type & EDGE_START_MASK)==EDGE_START_S);$y=$cell->{y}+ 1;$self->_check_edge_cell($cell,$x,$y,EDGE_END_S,EDGE_VER,qr/g[tb]/,$rows->{$y},-1)if (($type & EDGE_END_MASK)==EDGE_END_S);$y=$cell->{y}- 1;$self->_check_edge_cell($cell,$x,$y,EDGE_END_N,EDGE_VER,qr/g[tb]/,$rows->{$y},-1)if (($type & EDGE_END_MASK)==EDGE_END_N)}sub _repair_edge {my ($self,$cell,$rows,$cols)=@_;my$cells=$self->{cells};my$x=$cell->{x};my$y=$cell->{y}+ 1;my$below=$cells->{"$x,$y"};if (!ref($below)&& (($cell->{type}& EDGE_END_MASK)==EDGE_END_S)){if (grep {exists $_->{cell_class}&& $_->{cell_class}=~ /g[tb]/}ord_values$rows->{$y}){$cell->{type}&=~ EDGE_END_S;$self->_new_edge_cell($cells,undef,$cell->{edge},$x,$y,-1,EDGE_VER()+ EDGE_END_S())}}}sub _repair_edges {my ($self,$rows,$cols)=@_;my$cells=$self->{cells};for my$cell (sort {$a->{x}<=> $b->{x}|| $a->{y}<=> $b->{y}}values %$cells){next unless$cell->isa('Graph::Easy::Edge::Cell');next unless ($cell->{x}& 1)==0 && ($cell->{y}& 1)==0;my$group=$cell->group();$self->_repair_edge($cell,$rows,$cols)unless$group;$self->_repair_group_edge($cell,$rows,$cols,$group)if$group}}sub _fill_group_cells {my ($self,$cells_layout)=@_;print STDERR "\n# Padding with fill cells, have ",scalar$self->groups()," groups.\n" if$self->{debug};return$self if$self->groups==0;$self->{padding_cells}=1;my$cells={};for my$key (sort keys %$cells_layout){my ($x,$y)=split /,/,$key;my$cell=$cells_layout->{$key};$x *= 2;$y *= 2;$cell->{x}=$x;$cell->{y}=$y;$cells->{"$x,$y"}=$cell}$self->{cells}=$cells;$self->_splice_edges();$self->_repair_nodes();my$c='Graph::Easy::Group::Cell';for my$cell (ord_values$self->{cells}){my ($x,$y)=($cell->{x},$cell->{y});my$group=$cell->group();next unless$group;my$ofs=[-1,0,0,-1,+1,0,+1,0,0,+1,0,+1,-1,0,-1,0,];while (@$ofs > 0){$x += shift @$ofs;$y += shift @$ofs;$cells->{"$x,$y"}=$c->new (graph=>$self,group=>$group,x=>$x,y=>$y)unless exists$cells->{"$x,$y"}}}for my$cell (ord_values ($self->{cells})){next unless$cell->isa('Graph::Easy::Group::Cell');my ($sx,$sy)=($cell->{x},$cell->{y});my$group=$cell->{group};my$x=$sx;my$y2=$sy + 2;my$y=$sy + 1;if (exists$cells->{"$x,$y2"}&&!exists$cells->{"$x,$y"}){my$down=$cells->{"$x,$y2"};if ($down->isa('Graph::Easy::Group::Cell')&& $down->{group}==$group){$cells->{"$x,$y"}=$c->new (graph=>$self,group=>$group,x=>$x,y=>$y)}}$x=$sx+1;my$x2=$sx + 2;$y=$sy;if (exists$cells->{"$x2,$y"}&&!exists$cells->{"$x,$y"}){my$right=$cells->{"$x2,$y"};if ($right->isa('Graph::Easy::Group::Cell')&& $right->{group}==$group){$cells->{"$x,$y"}=$c->new (graph=>$self,group=>$group,x=>$x,y=>$y)}}}for my$group (ord_values ($self->{groups})){$group->_set_cell_types($cells)}my$rows={};my$cols={};for my$cell (ord_values ($cells)){$rows->{$cell->{y}}->{$cell->{x}}=$cell;$cols->{$cell->{x}}->{$cell->{y}}=$cell}$self->_repair_edges($rows,$cols);for my$group (ord_values ($self->{groups})){$group->_find_label_cell()}$self}1;
GRAPH_EASY_LAYOUT_REPAIR

$fatpacked{"Graph/Easy/Layout/Scout.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_LAYOUT_SCOUT';
  package Graph::Easy::Layout::Scout;$VERSION='0.76';package Graph::Easy;use strict;use warnings;use Graph::Easy::Node::Cell;use Graph::Easy::Edge::Cell qw/EDGE_SHORT_E EDGE_SHORT_W EDGE_SHORT_N EDGE_SHORT_S EDGE_SHORT_BD_EW EDGE_SHORT_BD_NS EDGE_SHORT_UN_EW EDGE_SHORT_UN_NS EDGE_START_E EDGE_START_W EDGE_START_N EDGE_START_S EDGE_END_E EDGE_END_W EDGE_END_N EDGE_END_S EDGE_N_E EDGE_N_W EDGE_S_E EDGE_S_W EDGE_N_W_S EDGE_S_W_N EDGE_E_S_W EDGE_W_S_E EDGE_LOOP_NORTH EDGE_LOOP_SOUTH EDGE_LOOP_WEST EDGE_LOOP_EAST EDGE_HOR EDGE_VER EDGE_HOLE EDGE_S_E_W EDGE_N_E_W EDGE_E_N_S EDGE_W_N_S EDGE_LABEL_CELL EDGE_TYPE_MASK EDGE_ARROW_MASK EDGE_FLAG_MASK EDGE_START_MASK EDGE_END_MASK EDGE_NO_M_MASK/;my$start_points={EDGE_HOR()=>[EDGE_START_W,EDGE_START_E,0,0,EDGE_END_E,EDGE_END_W,0,0,],EDGE_VER()=>[0,0,EDGE_START_N,EDGE_START_S,0,0,EDGE_END_S,EDGE_END_N,],EDGE_N_E()=>[0,EDGE_START_E,EDGE_START_N,0,EDGE_END_E,0,0,EDGE_END_N,],EDGE_N_W()=>[EDGE_START_W,0,EDGE_START_N,0,0,EDGE_END_W,0,EDGE_END_N,],EDGE_S_E()=>[0,EDGE_START_E,0,EDGE_START_S,EDGE_END_E,0,EDGE_END_S,0,],EDGE_S_W()=>[EDGE_START_W,0,0,EDGE_START_S,0,EDGE_END_W,EDGE_END_S,0,],};my$start_to_end={EDGE_START_W()=>EDGE_END_W(),EDGE_START_E()=>EDGE_END_E(),EDGE_START_S()=>EDGE_END_S(),EDGE_START_N()=>EDGE_END_N(),};sub _end_points {my ($self,$edge,$coords,$dx,$dy)=@_;return$coords if$edge->undirected();my$i=0;my$co=2;my$case;for my$d ($dx,$dy,$dx,$dy){next if$d==0;my$type=$coords->[$co]& EDGE_TYPE_MASK;$case=0;$case=1 if$d==-1;my$t=$start_points->{$type }->[$case + $i ];$t=$start_to_end->{$t}|| $t if$edge->{bidirectional};$coords->[$co]+= $t}continue {$i += 2;$co=-1 if$i==4}$coords}sub _find_path {my ($self,$src,$dst,$edge)=@_;if ($src==$dst){my$rc=$self->_find_path_loop($src,$edge);return$rc unless scalar @$rc==0}return$self->_find_path_astar($edge)if ($src->is_multicelled()|| $dst->is_multicelled()|| $edge->has_ports());my ($x0,$y0)=($src->{x},$src->{y});my ($x1,$y1)=($dst->{x},$dst->{y});my$dx=($x1 - $x0)<=> 0;my$dy=($y1 - $y0)<=> 0;my$cells=$self->{cells};my@coords;my ($x,$y)=($x0,$y0);print STDERR "#  dx,dy: $dx,$dy\n" if$self->{debug};if ($dx==0 || $dy==0){print STDERR "#  $src->{x},$src->{y} => $dst->{x},$dst->{y} - trying short path\n" if$self->{debug};my$dx1=($x1 - $x0);my$dy1=($y1 - $y0);($x,$y)=($x0+$dx,$y0+$dy);if ((abs($dx1)==2)|| (abs($dy1)==2)){if (!exists ($cells->{"$x,$y"})){my$type=EDGE_LABEL_CELL;if ($edge->bidirectional()){$type += EDGE_SHORT_BD_EW if$dy==0;$type += EDGE_SHORT_BD_NS if$dx==0}elsif ($edge->undirected()){$type += EDGE_SHORT_UN_EW if$dy==0;$type += EDGE_SHORT_UN_NS if$dx==0}else {$type += EDGE_SHORT_E if ($dx==1 && $dy==0);$type += EDGE_SHORT_S if ($dx==0 && $dy==1);$type += EDGE_SHORT_W if ($dx==-1 && $dy==0);$type += EDGE_SHORT_N if ($dx==0 && $dy==-1)}if (($edge->{to}->attribute('shape')||'')eq 'edge'){if ($dx > 0){$type &=~EDGE_START_E}elsif ($dx < 0){$type &=~EDGE_START_W}}if (($edge->{from}->attribute('shape')||'')eq 'edge'){$type &=~EDGE_START_MASK}return [$x,$y,$type ]}}my$type=EDGE_HOR;$type=EDGE_VER if$dx==0;my$done=0;my$label_done=0;while (3 < 5){$done=1,last if exists$cells->{"$x,$y"};my$t=$type;$t += EDGE_LABEL_CELL if$label_done++==0;push@coords,$x,$y,$t;$x += $dx;$y += $dy;last if ($x==$x1)&& ($y==$y1)}if ($done==0){print STDERR "#  success for ",scalar@coords / 3," steps in path\n" if$self->{debug};return$self->_end_points($edge,\@coords,$dx,$dy)}}else {my$done=0;print STDERR "#  bend path from $x,$y\n" if$self->{debug};my$type=EDGE_HOR;my$label=0;$label=1 if ref($edge)&& ($edge->label()||'')eq '';$x += $dx;while ($x!=$x1){$done++,last if exists$cells->{"$x,$y"};print STDERR "#  at $x,$y\n" if$self->{debug};my$t=$type;$t += EDGE_LABEL_CELL if$label++==0;push@coords,$x,$y,$t;$x += $dx};$done++ if exists$cells->{"$x,$y"};if ($done==0){my$type_bend=_astar_edge_type ($x-$dx,$y,$x,$y,$x,$y+$dy);push@coords,$x,$y,$type_bend;print STDERR "# at $x,$y\n" if$self->{debug};$y += $dy;$type=EDGE_VER;while ($y!=$y1){$done++,last if exists$cells->{"$x,$y"};print STDERR "# at $x,$y\n" if$self->{debug};push@coords,$x,$y,$type;$y += $dy}}if ($done!=0){$done=0;print STDERR "# hm, now trying first vertical, then horizontal\n" if$self->{debug};$type=EDGE_VER;@coords=();($x,$y)=($x0,$y0 + $dy);while ($y!=$y1){$done++,last if exists$cells->{"$x,$y"};print STDERR "# at $x,$y\n" if$self->{debug};push@coords,$x,$y,$type;$y += $dy};$done++ if exists$cells->{"$x,$y"};if ($done==0){my$type_bend=_astar_edge_type ($x,$y-$dy,$x,$y,$x+$dx,$y);push@coords,$x,$y,$type_bend;print STDERR "# at $x,$y\n" if$self->{debug};$x += $dx;my$label=0;$label=1 if$edge->label()eq '';$type=EDGE_HOR;while ($x!=$x1){$done++,last if exists$cells->{"$x,$y"};print STDERR "# at $x,$y\n" if$self->{debug};my$t=$type;$t += EDGE_LABEL_CELL if$label++==0;push@coords,$x,$y,$t;$x += $dx}}}if ($done==0){print STDERR "# success for ",scalar@coords / 3," steps in path\n" if$self->{debug};return$self->_end_points($edge,\@coords,$dx,$dy)}print STDERR "# no success\n" if$self->{debug}}$self->_find_path_astar($edge)}sub _find_path_loop {my ($self,$src,$edge)=@_;print STDERR "# Finding looping path from $src->{name} to $src->{name}\n" if$self->{debug};my ($n,$cells,$d,$type,$loose)=@_;my@places=$src->_near_places($self->{cells},1,[EDGE_LOOP_EAST,EDGE_LOOP_SOUTH,EDGE_LOOP_WEST,EDGE_LOOP_NORTH,],0,90);my$flow=$src->flow();my$index=[EDGE_LOOP_NORTH,EDGE_LOOP_SOUTH,EDGE_LOOP_WEST,EDGE_LOOP_EAST,];$index=[EDGE_LOOP_SOUTH,EDGE_LOOP_NORTH,EDGE_LOOP_EAST,EDGE_LOOP_WEST,]if$flow==270;$index=[EDGE_LOOP_WEST,EDGE_LOOP_EAST,EDGE_LOOP_SOUTH,EDGE_LOOP_NORTH,]if$flow==0;$index=[EDGE_LOOP_EAST,EDGE_LOOP_WEST,EDGE_LOOP_NORTH,EDGE_LOOP_SOUTH,]if$flow==180;for my$this_try (@$index){my$idx=0;while ($idx < @places){print STDERR "# Trying $places[$idx+0],$places[$idx+1]\n" if$self->{debug};next unless$places[$idx+2]==$this_try;my@rc=($places[$idx],$places[$idx+1],$places[$idx+2]);print STDERR "# Trying $rc[0],$rc[1]\n" if$self->{debug};next unless$self->_path_is_clear(\@rc);print STDERR "# Found looping path\n" if$self->{debug};return \@rc}continue {$idx += 3}}[]}package Graph::Easy::Heap;require Graph::Easy::Base;our@ISA=qw/Graph::Easy::Base/;use strict;sub _init {my ($self,$args)=@_;$self->{_heap}=[];$self}sub add {my ($self,$elem)=@_;my$heap=$self->{_heap};if (@$heap==0){push @$heap,$elem}elsif ($elem->[0]< $heap->[0]->[0]){unshift @$heap,$elem}elsif ($elem->[0]> $heap->[-1]->[0]){push @$heap,$elem}else {my$el=$elem->[0];if (scalar @$heap < 10){my$i=0;for my$e (@$heap){if ($e->[0]> $el){splice (@$heap,$i,0,$elem);return undef}$i++}push @$heap,$elem}else {my$l=0;my$r=scalar @$heap;while (($r - $l)> 2){my$m=int((($r - $l)/ 2)+ $l);if ($heap->[$m]->[0]<= $el){$l=$m}else {$r=$m}}while ($l < @$heap){if ($heap->[$l]->[0]> $el){splice (@$heap,$l,0,$elem);return undef}$l++}push @$heap,$elem}}undef}sub elements {scalar @{$_[0]->{_heap}}}sub extract_top {shift @{$_[0]->{_heap}}}sub delete {my ($self,$x,$y)=@_;my$heap=$self->{_heap};my$i=0;for my$e (@$heap){if ($e->[1]==$x && $e->[2]==$y){splice (@$heap,$i,1);return}$i++}$self}sub sort_sub {my ($self)=shift;$self->{_sort}=shift}package Graph::Easy;sub _astar_modifier {my ($x1,$y1,$x,$y,$px,$py,$cells)=@_;my$add=1;if (defined$x1){my$xy="$x1,$y1";$add += 30 if ref($cells->{$xy})&& $cells->{$xy}->isa('Graph::Easy::Edge')}if (defined$px){my$dx1=($px-$x)<=> 0;my$dy1=($py-$y)<=> 0;my$dx2=($x-$x1)<=> 0;my$dy2=($y-$y1)<=> 0;$add += 6 unless$dx1==$dx2 || $dy1==$dy2}$add}sub _astar_distance {my$dx=abs($_[2]- $_[0]);my$dy=abs($_[3]- $_[1]);$dx++ if$dx!=0 && $dy!=0;$dx + $dy}my$edge_type={'0,1,-1,0'=>EDGE_N_W,'0,1,0,1'=>EDGE_VER,'0,1,1,0'=>EDGE_N_E,'-1,0,0,-1'=>EDGE_N_E,'-1,0,-1,0'=>EDGE_HOR,'-1,0,0,1'=>EDGE_S_E,'0,-1,-1,0'=>EDGE_S_W,'0,-1,0,-1'=>EDGE_VER,'0,-1,1,0'=>EDGE_S_E,'1,0,0,-1'=>EDGE_N_W,'1,0,1,0'=>EDGE_HOR,'1,0,0,1'=>EDGE_S_W,'0,-1,0,1'=>EDGE_N_W_S,'0,1,0,-1'=>EDGE_S_W_N,'1,0,-1,0'=>EDGE_E_S_W,'-1,0,1,0'=>EDGE_W_S_E,};sub _astar_edge_type {my ($x,$y,$x1,$y1,$x2,$y2)=@_;my$dx1=($x1 - $x)<=> 0;my$dy1=($y1 - $y)<=> 0;my$dx2=($x2 - $x1)<=> 0;my$dy2=($y2 - $y1)<=> 0;($dx2,$dy2)=($dx1,$dy1)if$dx2==0 && $dy2==0;($dx1,$dy1)=($dx2,$dy2)if$dx1==0 && $dy1==0;$edge_type->{"$dx1,$dy1,$dx2,$dy2"}|| EDGE_HOR}sub _astar_near_nodes {my ($self,$nx,$ny,$cells,$closed,$min_x,$min_y,$max_x,$max_y)=@_;my@places=();my@tries=($nx + 1,$ny,$nx,$ny + 1,$nx - 1,$ny,$nx,$ny - 1,);my$type=EDGE_CROSS;$type=$cells->{"$nx,$ny"}->{type}if exists$cells->{"$nx,$ny"};if ($type==EDGE_HOR){@tries=($nx,$ny + 1,$nx,$ny - 1,)}elsif ($type==EDGE_VER){@tries=($nx + 1,$ny,$nx - 1,$ny,)}my$i=0;while ($i < @tries){my ($x,$y)=($tries[$i],$tries[$i+1]);print STDERR "# $min_x,$min_y => $max_x,$max_y\n" if$self->{debug}> 2;next if$x < $min_x || $x > $max_x || $y < $min_y || $y > $max_y;my$p="$x,$y";print STDERR "# examining pos $p\n" if$self->{debug}> 2;next if exists$closed->{$p};if (exists$cells->{$p}&& ref($cells->{$p})&& $cells->{$p}->isa('Graph::Easy::Edge')){my$type=$cells->{$p}->{type};push@places,$x,$y if ($type==EDGE_HOR)|| ($type==EDGE_VER);next}next if exists$cells->{$p};push@places,$x,$y}continue {$i += 2}@places}sub _astar_boundaries {my$self=shift;my$cache=$self->{cache};return ($cache->{min_x}-1,$cache->{min_y}-1,$cache->{max_x}+1,$cache->{max_y}+1)if defined$cache->{min_x};my ($min_x,$min_y,$max_x,$max_y);my$cells=$self->{cells};$min_x=10000000;$min_y=10000000;$max_x=-10000000;$max_y=-10000000;for my$c (sort keys %$cells){my ($x,$y)=split /,/,$c;$min_x=$x if$x < $min_x;$min_y=$y if$y < $min_y;$max_x=$x if$x > $max_x;$max_y=$y if$y > $max_y}print STDERR "# A* working space boundaries: $min_x, $min_y, $max_x, $max_y\n" if$self->{debug};($cache->{min_x},$cache->{min_y},$cache->{max_x},$cache->{max_y})=($min_x,$min_y,$max_x,$max_y);$min_x --;$min_y --;$max_x ++;$max_y ++;($min_x,$min_y,$max_x,$max_y)}my$next_fields={EDGE_VER()=>[-1,0,EDGE_W_N_S,+1,0,EDGE_E_N_S ],EDGE_HOR()=>[0,-1,EDGE_N_E_W,0,+1,EDGE_S_E_W ],EDGE_N_E()=>[0,+1,EDGE_E_N_S,-1,0,EDGE_N_E_W ],EDGE_N_W()=>[0,+1,EDGE_W_N_S,+1,0,EDGE_N_E_W ],EDGE_S_E()=>[0,-1,EDGE_E_N_S,-1,0,EDGE_S_E_W ],EDGE_S_W()=>[0,-1,EDGE_W_N_S,+1,0,EDGE_S_E_W ],};my$prev_fields={EDGE_VER()=>[-1,0,EDGE_W_N_S,+1,0,EDGE_E_N_S ],EDGE_HOR()=>[0,-1,EDGE_N_E_W,0,+1,EDGE_S_E_W ],EDGE_N_E()=>[0,+1,EDGE_E_N_S,-1,0,EDGE_N_E_W ],EDGE_N_W()=>[0,+1,EDGE_W_N_S,+1,0,EDGE_N_E_W ],EDGE_S_E()=>[0,-1,EDGE_E_N_S,-1,0,EDGE_S_E_W ],EDGE_S_W()=>[0,-1,EDGE_W_N_S,+1,0,EDGE_S_E_W ],};use Graph::Easy::Util qw(ord_values);sub _get_joints {my ($self,$shared,$mask,$types,$cells,$next_fields)=@_;for my$e (@$shared){for my$c (@{$e->{cells}}){my$type=$c->{type}& EDGE_TYPE_MASK;next unless exists$next_fields->{$type };next if (($type==EDGE_HOR())|| ($type==EDGE_VER()))&& ($c->{type}& $mask);my$fields=$next_fields->{$type};my ($px,$py)=($c->{x},$c->{y});my$i=0;while ($i < @$fields){my ($sx,$sy,$jt)=($fields->[$i],$fields->[$i+1],$fields->[$i+2]);$sx += $px;$sy += $py;$i += 3;my$sxsy="$sx,$sy";next if exists$cells->{$sxsy};$cells->{$sxsy}=[$sx,$sy,undef,$px,$py ];$types->{$sxsy}=$jt + ($c->{type}& EDGE_FLAG_MASK)}}}my@R;for my$s (ord_values ($cells)){push@R,@$s}@R}sub _join_edge {my ($self,$node,$edge,$shared,$end)=@_;my$flags=[EDGE_W_N_S + EDGE_START_W,EDGE_N_E_W + EDGE_START_N,EDGE_E_N_S + EDGE_START_E,EDGE_S_E_W + EDGE_START_S,];$flags=[EDGE_W_N_S + EDGE_END_W,EDGE_N_E_W + EDGE_END_N,EDGE_E_N_S + EDGE_END_E,EDGE_S_E_W + EDGE_END_S,]if$end || $edge->{bidirectional};my$cells=$self->{cells};my@places=$node->_near_places($cells,1,$flags,'loose');my$i=0;while ($i < @places){my ($x,$y)=($places[$i],$places[$i+1]);$i += 3;next unless exists$cells->{"$x,$y"};my$cell=$cells->{"$x,$y"};next unless$cell->isa('Graph::Easy::Edge::Cell');my$cell_type=$cell->{type}& EDGE_TYPE_MASK;next unless$cell_type==EDGE_HOR || $cell_type==EDGE_VER;my$e=$cell->{edge};local $_;next unless scalar grep {$e==$_}@$shared;$cell->_make_joint($edge,$places[$i-1]);Graph::Easy::Edge::Cell->new(type=>EDGE_HOLE,edge=>$edge,x=>$x,y=>$y);return []}undef}sub _find_path_astar {my ($self,$edge)=@_;my$cells=$self->{cells};my$src=$edge->{from};my$dst=$edge->{to};print STDERR "# A* from $src->{x},$src->{y} to $dst->{x},$dst->{y}\n" if$self->{debug};my$start_flags=[EDGE_START_W,EDGE_START_N,EDGE_START_E,EDGE_START_S,];my$end_flags=[EDGE_END_W,EDGE_END_N,EDGE_END_E,EDGE_END_S,];if (($edge->{to}->attribute('shape'))eq 'edge'){$end_flags=[0,0,0,0 ]}if (($edge->{from}->attribute('shape'))eq 'edge'){$start_flags=[0,0,0,0 ]}my ($s_p,@ss_p)=$edge->port('start');my ($e_p,@ee_p)=$edge->port('end');my (@A,@B);my@shared_start;my@shared_end;my$joint_type={};my$joint_type_end={};my$start_cells={};my$end_cells={};@shared_end=$edge->{to}->edges_at_port('end',$e_p,$ee_p[0])if defined$e_p && @ee_p==1;my@shared=();for my$s (@shared_end){push@shared,$s if @{$s->{cells}}> 0}my$per_field=5;if (@shared > 0){print STDERR "#  edge from '$edge->{from}->{name}' to '$edge->{to}->{name}' shares end port with ",scalar@shared," other edge(s)\n" if$self->{debug};my$path=$self->_join_edge($src,$edge,\@shared);return$path if$path;@B=$self->_get_joints(\@shared,EDGE_START_MASK,$joint_type_end,$end_cells,$prev_fields)}else {@B=$dst->_near_places($cells,1,$end_flags,1);@B=$dst->_allowed_places(\@B,$dst->_allow($e_p,@ee_p),3)if defined$e_p;$per_field=3}return unless scalar@B > 0;@shared_start=$edge->{from}->edges_at_port('start',$s_p,$ss_p[0])if defined$s_p && @ss_p==1;@shared=();for my$s (@shared_start){push@shared,$s if @{$s->{cells}}> 0}if (@shared > 0){print STDERR "#  edge from '$edge->{from}->{name}' to '$edge->{to}->{name}' shares start port with ",scalar@shared," other edge(s)\n" if$self->{debug};my$path=$self->_join_edge($dst,$edge,\@shared,'end');return$path if$path;@A=$self->_get_joints(\@shared,EDGE_END_MASK,$joint_type,$start_cells,$next_fields)}else {my$s=$start_flags;$s=$end_flags if$edge->{bidirectional};my@start=$src->_near_places($cells,1,$s,1,$src->_shift(-90));@start=$src->_allowed_places(\@start,$src->_allow($s_p,@ss_p),3)if defined$s_p;return unless@start > 0;my$i=0;while ($i < scalar@start){my$sx=$start[$i];my$sy=$start[$i+1];my$type=$start[$i+2];$i += 3;my$px=$sx;my$py=$sy;if ($sy < $src->{y}|| $sy >= $src->{y}+ $src->{cy}){$py=$sy + 1 if$sy < $src->{y};$py=$sy - 1 if$sy > $src->{y}}else {$px=$sx + 1 if$sx < $src->{x};$px=$sx - 1 if$sx > $src->{x}}push@A,($sx,$sy,$type,$px,$py)}}my$path=$self->_astar(\@A,\@B,$edge,$per_field);if (@$path > 0 && keys %$start_cells > 0){my ($x,$y)=($path->[0],$path->[1]);my$xy="$x,$y";my ($sx,$sy,$t,$px,$py)=@{$start_cells->{$xy}};my$jt=$joint_type->{"$sx,$sy"};$cells->{"$px,$py"}->_make_joint($edge,$jt)}if (@$path > 0 && keys %$end_cells > 0){my ($x,$y)=($path->[-3],$path->[-2]);my$xy="$x,$y";my ($sx,$sy,$t,$px,$py)=@{$end_cells->{$xy}};my$jt=$joint_type_end->{"$sx,$sy"};$cells->{"$px,$py"}->_make_joint($edge,$jt)}$path}sub _astar {my ($self,$A,$B,$edge,$per_field)=@_;my@start=@$A;my@stop=@$B;my$stop=scalar@stop;my$src=$edge->{from};my$dst=$edge->{to};my$cells=$self->{cells};my$open=Graph::Easy::Heap->new();my$open_by_pos={};my$closed={};my$elem;my ($min_x,$min_y,$max_x,$max_y)=$self->_astar_boundaries();my$tries=0;my$max_tries=2000000;$self->{stats}->{astar}++;my$i=0;my$bias=0;while ($i < scalar@start){my ($sx,$sy,$type,$px,$py)=($start[$i],$start[$i+1],$start[$i+2],$start[$i+3],$start[$i+4]);$i += 5;my$cell=$cells->{"$sx,$sy"};my$rcell=ref($cell);next if$rcell && $rcell !~ /::Edge/;my$t=0;$t=$cell->{type}& EDGE_NO_M_MASK if$rcell =~ /::Edge/;next if$t!=0 && $t!=EDGE_HOR && $t!=EDGE_VER;my$lowest_x=$stop[0];my$lowest_y=$stop[1];my$lowest=_astar_distance($sx,$sy,$stop[0],$stop[1]);for (my$u=$per_field;$u < $stop;$u += $per_field){my$dist=_astar_distance($sx,$sy,$stop[$u],$stop[$u+1]);($lowest_x,$lowest_y)=($stop[$u],$stop[$u+1])if$dist < $lowest;$lowest=$dist if$dist < $lowest}my$malus=0;$malus=30 if$t!=0;$malus += _astar_modifier($px,$py,$sx,$sy,$sx,$sy);$open->add([$lowest,$sx,$sy,$px,$py,$type,1 ]);my$o=$malus + $bias + $lowest;print STDERR "#   adding open pos $sx,$sy ($o = $malus + $bias + $lowest) at ($lowest_x,$lowest_y)\n" if$self->{debug}> 1;$open_by_pos->{"$sx,$sy"}=$o;$bias += $self->{_astar_bias}|| 0}my$stats=$self->{stats};STEP: while(defined($elem=$open->extract_top())){$stats->{astar_steps}++ if$self->{debug};if ($tries++ > $max_tries){$self->warn("A* reached maximum number of tries ($max_tries), giving up.");return []}print STDERR "#  Smallest elem from ",$open->elements()," elems is: weight=",$elem->[0]," at $elem->[1],$elem->[2]\n" if$self->{debug}> 1;my ($val,$x,$y,$px,$py,$type,$do_stop)=@$elem;my$key="$x,$y";my$g=$open_by_pos->{$key}|| 0;$closed->{$key}=[$px,$py,$val - $g,$g,$type,$do_stop ];delete$open_by_pos->{$key};for (my$i=0;$i < $stop;$i += $per_field){if ($x==$stop[$i]&& $y==$stop[$i+1]){$closed->{$key}->[4]+= $stop[$i+2]if defined$stop[$i+2];if ($per_field > 3){$closed->{$key}->[6]=$stop[$i+3];$closed->{$key}->[7]=$stop[$i+4];print STDERR "#  Reached stop position $x,$y (lx,ly $stop[$i+3], $stop[$i+4])\n" if$self->{debug}> 1}elsif ($self->{debug}> 1){print STDERR "#  Reached stop position $x,$y\n"}last STEP}}$self->_croak("On of '$x,$y' is not defined")unless defined$x && defined$y;my@p=$self->_astar_near_nodes($x,$y,$cells,$closed,$min_x,$min_y,$max_x,$max_y);my$n=0;while ($n < scalar@p){my$nx=$p[$n];my$ny=$p[$n+1];$n += 2;if (!defined$nx ||!defined$ny){require Carp;Carp::confess("On of '$nx,$ny' is not defined")}my$lg=$g;$lg += _astar_modifier($px,$py,$x,$y,$nx,$ny,$cells)if defined$px && defined$py;my$n="$nx,$ny";next if (exists$open_by_pos->{$n});my$lowest_distance=_astar_distance($nx,$ny,$stop[0],$stop[1]);for (my$i=$per_field;$i < $stop;$i += $per_field){my$d=_astar_distance($nx,$ny,$stop[$i],$stop[$i+1]);$lowest_distance=$d if$d < $lowest_distance}print STDERR "#   Opening pos $nx,$ny ($lowest_distance + $lg)\n" if$self->{debug}> 1;$open->add([$lowest_distance + $lg,$nx,$ny,$x,$y,undef ]);$open_by_pos->{$n}=$lg}}$self->{stats}->{astar_steps}+= $tries;if (!defined$elem){print STDERR "# A* couldn't find a path after $max_tries steps.\n" if$self->{debug};return []}my$path=[];my ($cx,$cy)=($elem->[1],$elem->[2]);my ($lx,$ly);my$type;my$label_cell=0;my@bends;my$idx=0;while (defined$cx){last unless exists$closed->{"$cx,$cy"};my$xy="$cx,$cy";$type=$closed->{$xy}->[4 ];my ($px,$py)=@{$closed->{$xy}};my$edge_type=($type||0)& EDGE_TYPE_MASK;if ($edge_type==0){my$edge_flags=($type||0)& EDGE_FLAG_MASK;if (!defined$px){($px,$py)=($cx,$cy);$py ++ if ($edge_flags & EDGE_START_S)!=0;$py -- if ($edge_flags & EDGE_START_N)!=0;$px ++ if ($edge_flags & EDGE_START_E)!=0;$px -- if ($edge_flags & EDGE_START_W)!=0}if (!defined$lx){$lx=$closed->{$xy}->[6];$ly=$closed->{$xy}->[7]}if (!defined$lx){($lx,$ly)=($cx,$cy);$ly ++ if ($edge_flags & EDGE_END_S)!=0;$ly -- if ($edge_flags & EDGE_END_N)!=0;$lx ++ if ($edge_flags & EDGE_END_E)!=0;$lx -- if ($edge_flags & EDGE_END_W)!=0}$type += _astar_edge_type($px,$py,$cx,$cy,$lx,$ly)}print STDERR "#  Following back from $lx,$ly over $cx,$cy to $px,$py\n" if$self->{debug}> 1;if ($px==$lx && $py==$ly && ($cx!=$lx || $cy!=$ly)){print STDERR "# Warning: A* detected loop in path-backtracking at $px,$py, $cx,$cy, $lx,$ly\n" if$self->{debug};last}$type=EDGE_HOR if ($type & EDGE_TYPE_MASK)==0;my$t=$type & EDGE_TYPE_MASK;if ($label_cell==0 && (!exists$cells->{"$cx,$cy"})&& ($t==EDGE_HOR || $t==EDGE_VER)){$label_cell++;$type += EDGE_LABEL_CELL}push@bends,[$type,$cx,$cy,-$idx ]if ($type==EDGE_S_E || $t==EDGE_S_W || $t==EDGE_N_E || $t==EDGE_N_W);unshift @$path,$cx,$cy,$type;last if$closed->{"$cx,$cy"}->[5 ];($lx,$ly)=($cx,$cy);($cx,$cy)=@{$closed->{"$cx,$cy"}};$idx += 3}print STDERR "# Trying to straighten path\n" if@bends >= 3 && $self->{debug};$self->_straighten_path($path,\@bends,$edge)if@bends >= 3;return ($path,$closed,$open_by_pos)if wantarray;$path}my$bend_patterns=[[EDGE_N_W,EDGE_S_E,EDGE_N_W,0,-1,2,1,EDGE_HOR,EDGE_VER,1,0,0,-1 ],[EDGE_N_W,EDGE_S_E,EDGE_N_W,-1,0,1,2,EDGE_VER,EDGE_HOR,0,1,-1,0 ],[EDGE_S_E,EDGE_N_W,EDGE_S_E,0,-1,1,2,EDGE_VER,EDGE_HOR,0,-1,1,0 ],[EDGE_S_E,EDGE_N_W,EDGE_S_E,-1,0,2,1,EDGE_HOR,EDGE_VER,-1,0,0,1 ],[EDGE_S_W,EDGE_N_E,EDGE_S_W,0,1,2,1,EDGE_HOR,EDGE_VER,1,0,0,1 ],[EDGE_S_W,EDGE_N_E,EDGE_S_W,-1,0,1,2,EDGE_VER,EDGE_HOR,0,-1,-1,0 ],[EDGE_N_E,EDGE_S_W,EDGE_N_E,1,0,1,2,EDGE_VER,EDGE_HOR,0,1,1,0 ],[EDGE_N_E,EDGE_S_W,EDGE_N_E,0,-1,2,1,EDGE_HOR,EDGE_VER,-1,0,0,-1 ],];sub _straighten_path {my ($self,$path,$bends,$edge)=@_;my$cells=$self->{cells};my$i=0;BEND: while ($i < (scalar @$bends - 2)){my ($a,$b,$c)=($bends->[$i],$bends->[$i+1],$bends->[$i+2]);my$dx=($b->[1]- $a->[1]);my$dy=($b->[2]- $a->[2]);my$p=0;for my$pattern (@$bend_patterns){$p++;next if ($a->[0]!=$pattern->[0])|| ($b->[0]!=$pattern->[1])|| ($c->[0]!=$pattern->[2])|| ($dx!=$pattern->[3])|| ($dy!=$pattern->[4]);my$cx=$a->[$pattern->[5]];my$cy=$c->[$pattern->[6]];($cx,$cy)=($cy,$cx)if$pattern->[5]==2;next BEND if exists$cells->{"$cx,$cy"};my$x=$a->[1];my$y=$a->[2];my@replace=();push@replace,$cx,$cy,$pattern->[0]if ($x==$cx && $y==$cy);my$ddx=$pattern->[9];my$ddy=$pattern->[10];while ($x!=$cx || $y!=$cy){next BEND if exists$cells->{"$x,$y"};push@replace,$x,$y,$pattern->[7];$x += $ddx;$y += $ddy}$x=$cx;$y=$cy;$ddx=$pattern->[11];$ddy=$pattern->[12];while ($x!=$c->[1]|| $y!=$c->[2]){next BEND if exists$cells->{"$x,$y"};push@replace,$x,$y,$pattern->[8];$replace[-1]=$pattern->[0]if ($x==$cx && $y==$cy);$x += $ddx;$y += $ddy}push@replace,$x,$y,$pattern->[8];my$diff=$a->[3]- $c->[3]? -3 : 3;my$idx=0;my$p_idx=$a->[3]+ $diff;while ($idx < @replace){$path->[$p_idx]=$replace[$idx];$path->[$p_idx+1]=$replace[$idx+1];$path->[$p_idx+2]=$replace[$idx+2];$p_idx += $diff;$idx += 3}}}continue {$i++}}sub _map_as_html {my ($self,$cells,$p,$closed,$open,$w,$h)=@_;$w ||=20;$h ||=20;my$html=<<EOF ;$html =~ s/##closed##/keys %$closed /eg;$html =~ s/##open##/keys %$open /eg;my$path={};while (@$p){my$x=shift @$p;my$y=shift @$p;my$t=shift @$p;$path->{"$x,$y"}=undef}$html =~ s/##path##/keys %$path /eg;$html .= '<table class="map">' ."\n";for my$y (0..$h){$html .= " <tr>\n";for my$x (0..$w){my$xy="$x,$y";my$c='&nbsp;' x 4;$html .= "  <td class='c'>$c</td>\n" and next if exists$cells->{$xy}and ref($cells->{$xy})=~ /Node/;$html .= "  <td class='b'>$c</td>\n" and next if exists$cells->{$xy}&&!exists$path->{$xy};$html .= "  <td>$c</td>\n" and next unless exists$closed->{$xy}|| exists$open->{$xy};my$clr='#a0a0a0';if (exists$closed->{$xy}){$c=($closed->{$xy}->[3]|| '0').'+' .($closed->{$xy}->[2]|| '0');my$color=0x10 + 8 * (($closed->{$xy}->[2]|| 0));my$color2=0x10 + 8 * (($closed->{$xy}->[3]|| 0));$clr=sprintf("%02x%02x",$color,$color2).'a0'}elsif (exists$open->{$xy}){$c='&nbsp;' .$open->{$xy}|| '0';my$color=0xff - 8 * ($open->{$xy}|| 0);$clr='a0' .sprintf("%02x",$color).'00'}my$b='';$b='border: 2px white solid;' if exists$path->{$xy};$html .= "  <td style='background: #$clr;$b'>$c</td>\n"}$html .= " </tr>\n"}$html .= "\n</table>\n";$html}1;
  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
  <html>
   <head>
   <style type="text/css">
   <!--
   td {
     background: #a0a0a0;
     border: #606060 solid 1px;
     font-size: 0.75em;
   }
   td.b, td.b, td.c {
     background: #404040;
     border: #606060 solid 1px;
     }
   td.c {
     background: #ffffff;
     }
   table.map {
     border-collapse: collapse;
     border: black solid 1px;
   }
   -->
   </style>
  </head>
  <body>
  
  <h1>A* Map</h1>
  
  <p>
  Nodes examined: <b>##closed##</b> <br>
  Nodes still to do (open): <b>##open##</b> <br>
  Nodes in path: <b>##path##</b>
  </p>
  EOF
GRAPH_EASY_LAYOUT_SCOUT

$fatpacked{"Graph/Easy/Node.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_NODE';
  package Graph::Easy::Node;$VERSION='0.76';use Graph::Easy::Base;use Graph::Easy::Attributes;@ISA=qw/Graph::Easy::Base/;use Graph::Easy::Util qw(ord_values);my$att_aliases;use strict;use warnings;use constant isa_cell=>0;sub _init {my ($self,$args)=@_;$self->{name}='Node #' .$self->{id};$self->{att}={};$self->{class}='node';for my$k (sort keys %$args){if ($k !~ /^(label|name)\z/){require Carp;Carp::confess ("Invalid argument '$k' passed to Graph::Easy::Node->new()")}$self->{$k}=$args->{$k}if$k eq 'name';$self->{att}->{$k}=$args->{$k}if$k eq 'label'}$self}my$merged_borders={'dotteddashed'=>'dot-dash','dasheddotted'=>'dot-dash','double-dashdouble'=>'double','doubledouble-dash'=>'double','doublesolid'=>'double','soliddouble'=>'double','dotteddot-dash'=>'dot-dash','dot-dashdotted'=>'dot-dash',};sub _collapse_borders {my ($self,$one,$two,$swapem)=@_;($one,$two)=($two,$one)if$swapem;$one='none' unless$one;$two='none' unless$two;return 'none' if$one ne 'none' || $two ne 'none';$two}sub _merge_borders {my ($self,$one,$two)=@_;$one='none' unless$one;$two='none' unless$two;return$one if$one eq $two;return$one if$two eq 'none';return$two if$one eq 'none';for my$b (qw/broad wide bold double solid/){return$b if$one eq $b || $two eq $b}my$both=$one .$two;return$merged_borders->{$both}if exists$merged_borders->{$both};$two}sub _border_to_draw {my ($self,$shape)=@_;my$cache=$self->{cache};return$cache->{border_style}if defined$cache->{border_style};$shape=$self->{att}->{shape}unless defined$shape;$shape=$self->attribute('shape')unless defined$shape;$cache->{border_style}=$self->{att}->{borderstyle};$cache->{border_style}=$self->attribute('borderstyle')unless defined$cache->{border_style};$cache->{border_style}='none' if$shape =~ /^(none|invisible)\z/;$cache->{border_style}}sub _border_styles {my ($self,$border,$collapse)=@_;my$cache=$self->{cache};return if defined$cache->{left_border};$cache->{left_border}=$border;$cache->{top_border}=$border;$cache->{right_border}=$border;$cache->{bottom_border}=$border;return unless$collapse;my$EM=14;my$border_width=Graph::Easy::_border_width_in_pixels($self,$EM);$border='bold' if$border_width > 2;$border='broad' if$border_width > $EM * 0.2 && $border_width < $EM * 0.75;$border='wide' if$border_width >= $EM * 0.75;my$parent=$self->{parent}|| $self->{graph};return unless ref$parent;my$cells=$parent->{cells};return unless ref$cells;my$x=$self->{x};my$y=$self->{y};$x -= 1;my$left=$cells->{"$x,$y"};$x += 1;$y-= 1;my$top=$cells->{"$x,$y"};$x += 1;$y += 1;my$right=$cells->{"$x,$y"};$x -= 1;$y += 1;my$bottom=$cells->{"$x,$y"};my@where=('left','top','right','bottom');my@swapem=(0,0,1,1);for my$other ($left,$top,$right,$bottom){my$side=shift@where;my$swap=shift@swapem;if (ref($other)&& !$other->isa('Graph::Easy::Edge')&& !$other->isa_cell()&& !$other->isa('Graph::Easy::Node::Empty')){$other=$other->{node}if ref($other->{node});if ($other->attribute('shape')ne 'invisible'){my$result;if ($swap){$result=$self->_merge_borders($other->_border_to_draw(),$border)}else {$result=$self->_collapse_borders($border,$other->_border_to_draw())}$cache->{$side .'_border'}=$result}}}}sub _correct_size {my$self=shift;return if defined$self->{w};my$shape=$self->attribute('shape');if ($shape eq 'point'){$self->{w}=5;$self->{h}=3;my$style=$self->attribute('pointstyle');my$shape=$self->attribute('pointshape');if ($style eq 'invisible' || $shape eq 'invisible'){$self->{w}=0;$self->{h}=0;return}}elsif ($shape eq 'invisible'){$self->{w}=3;$self->{h}=3}else {my ($w,$h)=$self->dimensions();$self->{h}=$h;$self->{w}=$w + 2}my$border=$self->_border_to_draw($shape);$self->_border_styles($border,'collapse');if ($shape !~ /^(invisible|point)/){$self->{w}++ if$self->{cache}->{right_border}ne 'none';$self->{w}++ if$self->{cache}->{left_border}ne 'none';$self->{h}++ if$self->{cache}->{top_border}ne 'none';$self->{h}++ if$self->{cache}->{bottom_border}ne 'none';$self->{h}+= 2 if$border eq 'none' && $shape !~ /^(invisible|point)/}$self}sub _unplace {my ($self,$cells)=@_;my$x=$self->{x};my$y=$self->{y};delete$cells->{"$x,$y"};$self->{x}=undef;$self->{y}=undef;$self->{cache}={};$self->_calc_size()unless defined$self->{cx};if ($self->{cx}+ $self->{cy}> 2){for my$ax (1..$self->{cx}){my$sx=$x + $ax - 1;for my$ay (1..$self->{cy}){my$sy=$y + $ay - 1;delete$cells->{"$sx,$sy"}}}}for my$e (ord_values ($self->{edges})){$e->_unplace($cells)}$self}sub _mark_as_placed {my ($self)=@_;no warnings 'recursion';delete$self->{_todo};for my$child (ord_values ($self->{children})){$child->_mark_as_placed()}$self}sub _place_children {my ($self,$x,$y,$parent)=@_;no warnings 'recursion';return 0 unless$self->_check_place($x,$y,$parent);print STDERR "# placing children of $self->{name} based on $x,$y\n" if$self->{debug};for my$child (ord_values ($self->{children})){my$dx=$child->{dx}> 0 ? $self->{cx}- 1 : 0;my$dy=$child->{dy}> 0 ? $self->{cy}- 1 : 0;my$rc=$child->_place_children($x + $dx + $child->{dx},$y + $dy + $child->{dy},$parent);return$rc if$rc==0}$self->_place($x,$y,$parent)}sub _place {my ($self,$x,$y,$parent)=@_;my$cells=$parent->{cells};$self->{x}=$x;$self->{y}=$y;$cells->{"$x,$y"}=$self;my$r=abs($self->{rank}|| 0);my$what=$parent->{_rank_coord}|| 'x';$parent->{_rank_pos}->{$r }=$self->{$what}unless defined$parent->{_rank_pos}->{$r };if ($self->{cx}+ $self->{cy}> 2){for my$ax (1..$self->{cx}){my$sx=$x + $ax - 1;for my$ay (1..$self->{cy}){next if$ax==1 && $ay==1;my$sy=$y + $ay - 1;my$filler=Graph::Easy::Node::Cell->new (node=>$self,x=>$sx,y=>$sy);$cells->{"$sx,$sy"}=$filler}}}$self->_update_boundaries($parent);1}sub _check_place {my ($self,$x,$y,$parent)=@_;my$cells=$parent->{cells};return 0 if exists$cells->{"$x,$y"};$self->_calc_size()unless defined$self->{cx};if ($self->{cx}+ $self->{cy}> 2){for my$ax (1..$self->{cx}){my$sx=$x + $ax - 1;for my$ay (1..$self->{cy}){my$sy=$y + $ay - 1;return 0 if exists$cells->{"$sx,$sy"}}}}1}sub _do_place {my ($self,$x,$y,$parent)=@_;my$cells=$parent->{cells};return 0 if exists$cells->{"$x,$y"};$self->_calc_size()unless defined$self->{cx};if ($self->{cx}+ $self->{cy}> 2){for my$ax (1..$self->{cx}){my$sx=$x + $ax - 1;for my$ay (1..$self->{cy}){my$sy=$y + $ay - 1;return 0 if exists$cells->{"$sx,$sy"}}}}my$children=0;$children=scalar keys %{$self->{children}}if$self->{children};if (defined$self->{origin}|| $children > 0){my$grandpa=$self;my$ox=0;my$oy=0;($grandpa,$ox,$oy)=$self->find_grandparent()if$self->{origin};return$grandpa->_place_children($x + $ox,$y + $oy,$parent)}$self->_place($x,$y,$parent)}sub _wrapped_label {my ($self,$label,$align,$wrap)=@_;return (@{$self->{cache}->{label}})if$self->{cache}->{label};$label =~ s/\\(n|r|l|c)/ /g;$label =~ s/\s+/ /g;if ($wrap eq 'auto'){$wrap=int(sqrt(length($label))* 1.4)}$wrap=2 if$wrap < 2;my$i=0;my$line_len=0;my$last_space=0;my$last_hyphen=0;my@lines;while ($i < length($label)){my$c=substr($label,$i,1);$last_space=$i if$c eq ' ';$last_hyphen=$i if$c eq '-';$line_len ++;if ($line_len >= $wrap && ($last_space!=0 || $last_hyphen!=0)){my$w=$last_space;my$replace='';if ($last_hyphen > $last_space){$w=$last_hyphen;$replace='-'}push@lines,substr($label,0,$w).$replace;substr($label,0,$w+1)='';$line_len=0;$i=0;$last_space=0;$last_hyphen=0;next}$i++}push@lines,$label if$label ne '';my@aligns;my$al=substr($align,0,1);for my$i (0.. scalar@lines){push@aligns,$al}$self->{cache}->{label}=[\@lines,\@aligns ];(\@lines,\@aligns)}sub _aligned_label {my ($self,$align,$wrap)=@_;$align='center' unless$align;$wrap=$self->attribute('textwrap')unless defined$wrap;my$name=$self->label();return$self->_wrapped_label($name,$align,$wrap)unless$wrap eq 'none';my (@lines,@aligns);my$al=substr($align,0,1);my$last_align=$al;while ($name ne ''){$name =~ s/^(.*?([^\\]|))(\z|\\(n|r|l|c))//;my$part=$1;my$a=$3 || '\n';$part =~ s/\\\|/\|/g;$part =~ s/\\\\/\\/g;$part =~ s/^\s+//;$part =~ s/\s+\z//;$a =~ s/\\//;$a=$al if$a eq 'n';push@lines,$part;push@aligns,$last_align;$last_align=$a}(\@lines,\@aligns)}my$remap={node=>{align=>undef,background=>undef,basename=>undef,border=>undef,borderstyle=>undef,borderwidth=>undef,bordercolor=>undef,columns=>undef,fill=>'background',origin=>undef,offset=>undef,pointstyle=>undef,pointshape=>undef,rows=>undef,size=>undef,shape=>undef,},edge=>{fill=>undef,border=>undef,},all=>{align=>'text-align',autolink=>undef,autotitle=>undef,comment=>undef,fontsize=>undef,font=>'font-family',flow=>undef,format=>undef,label=>undef,link=>undef,linkbase=>undef,style=>undef,textstyle=>undef,title=>undef,textwrap=>\&Graph::Easy::_remap_text_wrap,group=>undef,},};sub _extra_params {''}my$pod={B=>['<b>','</b>' ],O=>['<span style="text-decoration: overline">','</span>' ],S=>['<span style="text-decoration: line-through">','</span>' ],U=>['<span style="text-decoration: underline">','</span>' ],C=>['<code>','</code>' ],I=>['<i>','</i>' ],};sub _convert_pod {my ($self,$type,$text)=@_;my$t=$pod->{$type}or return$text;$t->[0].$text .$t->[1]}sub _label_as_html {my ($self)=@_;my$align=$self->attribute('align');my$text_wrap=$self->attribute('textwrap');my ($lines,$aligns);if ($text_wrap eq 'auto'){$lines=[$self->label()];$aligns=[substr($align,0,1)]}else {($lines,$aligns)=$self->_aligned_label($align,$text_wrap)}my$switch_to_center=0;if ($align ne 'center'){local $_;$switch_to_center=grep /^c/,@$aligns}$align='center' if$switch_to_center;my$a=substr($align,0,1);my$format=$self->attribute('format');my$name='';my$i=0;while ($i < @$lines){my$line=$lines->[$i];my$al=$aligns->[$i];if ($format eq 'pod'){$line =~ s/([BOSUCI])<([^<>]+)>/ $self->_convert_pod($1,$2);/eg while ($line =~ /[BOSUCI]<[^<>]+>/)}else {$line =~ s/&/&amp;/g;$line =~ s/>/&gt;/g;$line =~ s/</&lt;/g;$line =~ s/\\\\/\\/g}$line='<span class="' .$al .'">' .$line .'</span>' if$a ne $al;$name .= '<br>' .$line;$i++}$name =~ s/^<br>//;($name,$switch_to_center)}sub quoted_comment {my$self=shift;my$cmt=$self->attribute('comment');if ($cmt ne ''){$cmt =~ s/&/&amp;/g;$cmt =~ s/</&lt;/g;$cmt =~ s/>/&gt;/g;$cmt='<!-- ' .$cmt ." -->\n"}$cmt}sub as_html {my ($self)=@_;my$shape='rect';$shape=$self->attribute('shape')unless$self->isa_cell();if ($shape eq 'edge'){my$edge=Graph::Easy::Edge->new();my$cell=Graph::Easy::Edge::Cell->new(edge=>$edge);$cell->{w}=$self->{w};$cell->{h}=$self->{h};$cell->{att}->{label}=$self->label();$cell->{type}=Graph::Easy::Edge::Cell->EDGE_HOR + Graph::Easy::Edge::Cell->EDGE_LABEL_CELL;return$cell->as_html()}my$extra=$self->_extra_params();my$taga="td$extra";my$tagb='td';my$id=$self->{graph}->{id};my$a=$self->{att};my$g=$self->{graph};my$class=$self->class();my$rs=($self->{cy}|| 1)* 4;my$cs=($self->{cx}|| 1)* 4;if ($shape eq 'invisible' && $class ne 'node.anon'){return " <$taga colspan=$cs rowspan=$rs style=\"border: none; background: inherit;\"></$tagb>\n"}my$c=$class;$c =~ s/\./_/g;my$html=" <$taga colspan=$cs rowspan=$rs##class####style##";my$title=$self->title();$title =~ s/'/&#27;/g;$html .= " title='$title'" if$title ne '' && $shape ne 'img';my ($name,$switch_to_center);if ($shape eq 'point'){require Graph::Easy::As_ascii;local$self->{graph}->{_ascii_style}=1;$name=$self->_point_style($self->attribute('pointshape'),$self->attribute('pointstyle'))}elsif ($shape eq 'img'){$name=$self->label();$name =~ s/\s/\+/g;$name =~ s/'/%27/g;$name =~ s/[\x0d\x0a]//g;my$t=$title;$t=$name if$t eq '';$name="<img src='$name' alt='$t' title='$t' border='0' />"}else {($name,$switch_to_center)=$self->_label_as_html()}my$link='';$link=$self->link()unless$name eq '';my$att=$self->raw_attributes();my$out=$self->{graph}->_remap_attributes($self,$att,$remap,'noquote','encode','remap_colors');$out->{'text-align'}='center' if$switch_to_center;if (!$self->isa('Graph::Easy::Edge')){my$bc=$self->attribute('bordercolor');my$bw=$self->attribute('borderwidth');my$bs=$self->attribute('borderstyle');$out->{border}=Graph::Easy::_border_attribute_as_html($bs,$bw,$bc);if ($shape !~ /(rounded|ellipse|circle)/){my$DEF=$self->default_attribute('border');delete$out->{border}if$out->{border}=~ /^\s*\z/ || $out->{border}eq $DEF}delete$out->{border}if$class eq 'node.anon' && $out->{border}&& $out->{border}eq 'none'}my$inner_start='';my$inner_end='';if ($shape =~ /(rounded|ellipse|circle)/){my$inner_style='';my$fill=$self->color_attribute('fill');$inner_style='background:' .$fill if$fill;$inner_style .= ';border:' .$out->{border}if$out->{border};$inner_style =~ s/;\s?\z$//;delete$out->{background};delete$out->{border};my$td_style='';$td_style=' style="border: none;';my$bg=$self->color_attribute('background');$td_style .= "background: $bg\"";$html =~ s/##style##/$td_style/;$inner_end='</span></div>';my$c=substr($shape,0,1);$c='c' if$c eq 'e';my ($w,$h)=$self->dimensions();if ($shape eq 'circle'){my$r=$w;$r=$h if$h > $w;$w=$r;$h=$r}$out->{top}=($h / 2 + 0.5).'em';delete$out->{top}if$out->{top}eq '1.5em';$h=($h + 2).'em';$w=($w + 2).'em';$inner_style .= ";width: $w; height: $h";$inner_style=" style='$inner_style'";$inner_start="<div class='$c'$inner_style><span class='c'##style##>"}if ($class =~ /^group/){delete$out->{border};delete$out->{background};my$group_class=$class;$group_class =~ s/\s.*//;my@atr=qw/bordercolor borderwidth fill/;my$border_style=$self->attribute('borderstyle');$c =~ s/\s+.*// if$border_style eq 'none';push@atr,'color' if$self->{has_label};$name='&nbsp;' unless$self->{has_label};for my$b (@atr){my$def=$g->attribute($group_class,$b);my$v=$self->attribute($b);my$n=$b;$n='background' if$b eq 'fill';$out->{$n}=$v unless$v eq '' || $v eq $def}$name='&nbsp;' unless$name ne ''}if ($shape =~ /^(point|none)\z/){$out->{background}=$self->color_attribute('background');$out->{border}='none'}my$style='';for my$atr (sort keys %$out){if ($link ne ''){next if$atr =~ /^(background|border)\z/}$style .= "$atr: $out->{$atr}; "}$style .= $self->text_styles_as_css(1,1)if$name !~ /^(|&nbsp;)\z/;$style =~ s/;\s?\z$//;$style =~ s/\s+/ /g;$style =~ s/^\s+//;$style=" style=\"$style\"" if$style;my$end_tag="</$tagb>\n";if ($link ne ''){$link =~ s/\s/\+/g;$link =~ s/'/%27/g;my$outer_style='';for my$s (qw/background border/){$outer_style .= "$s: $out->{$s};" if exists$out->{$s}}$outer_style =~ s/;\s?\z$//;$outer_style=' style="'.$outer_style.'"' if$outer_style;$inner_start =~ s/##style##/$outer_style/;$html =~ s/##style##/$outer_style/;$inner_start .= "<a href='$link'##style##>";$inner_end='</a>'.$inner_end}$c=" class='$c'" if$c ne '';$html .= ">$inner_start$name$inner_end$end_tag";$html =~ s/##class##/$c/;$html =~ s/##style##/$style/;$self->quoted_comment().$html}sub angle {my$self=shift;my$angle=$self->{att}->{rotate}|| 0;$angle=180 if$angle =~ /^(south|down)\z/;$angle=0 if$angle =~ /^(north|up)\z/;$angle=270 if$angle eq 'west';$angle=90 if$angle eq 'east';if ($angle =~ /^([+-]\d+|left|right|back|front|forward)\z/){my$base_rot=$self->flow();$angle=0 if$angle =~ /^(front|forward)\z/;$angle=180 if$angle eq 'back';$angle=-90 if$angle eq 'left';$angle=90 if$angle eq 'right';$angle=$base_rot + $angle + 0;$angle += 360 while$angle < 0}$self->_croak("Illegal node angle $angle")if$angle !~ /^\d+\z/;$angle %=360 if$angle > 359;$angle}my$p_flow={'east'=>90,'west'=>270,'north'=>0,'south'=>180,'up'=>0,'down'=>180,'back'=>270,'left'=>270,'right'=>90,'front'=>90,'forward'=>90,};sub _parent_flow_absolute {my ($self,$def)=@_;return '90' if ref($self)eq 'Graph::Easy';my$flow=$self->parent()->raw_attribute('flow')|| $def;return unless defined$flow;my$f=$p_flow->{$flow};$f=$flow unless defined$f;$f}sub flow {my$self=shift;no warnings 'recursion';my$cache=$self->{cache};return$cache->{flow}if exists$cache->{flow};return$cache->{flow}=$self->_parent_flow_absolute('90')if exists$self->{_flow};local$self->{_flow}=undef;my$in;my$flow=$self->{att}->{flow};$flow=$self->_parent_flow_absolute()if!defined$flow || $flow eq 'inherit';return$cache->{flow}=$flow if defined$flow && $flow =~ /^(0|90|180|270)\z/;return$cache->{flow}=Graph::Easy->_direction_as_number($flow)if defined$flow && $flow =~ /^(south|north|east|west|up|down)\z/;for my$e (ord_values ($self->{edges})){next unless$e->{from}!=$self && $e->{to}==$self;$in=$e->flow();last if defined$in}if (!defined$in){for my$e (ord_values ($self->{edges})){my$pre=$e->{from};$pre=$e->{to}if$e->{bidirectional};if ($pre!=$self){$in=$pre->flow();last if defined$in}}}$in=$self->_parent_flow_absolute('90')unless defined$in;$flow=Graph::Easy->_direction_as_number($in)unless defined$flow;$cache->{flow}=Graph::Easy->_flow_as_direction($in,$flow)}sub _calc_size {my$self=shift;my$grow_sides={cx=>1,cy=>1 };my$r=$self->{att}->{rows};my$c=$self->{att}->{columns};delete$grow_sides->{cy}if defined$r &&!defined$c;delete$grow_sides->{cx}if defined$c &&!defined$r;$r=$self->attribute('rows')unless defined$r;$c=$self->attribute('columns')unless defined$c;$self->{cy}=abs($r || 1);$self->{cx}=abs($c || 1);$grow_sides}sub _grow {my$self=shift;my$vec={north=>'',south=>'',east=>'',west=>'' };my$cnt={north=>0,south=>0,east=>0,west=>0 };my$portnr={north=>0,south=>0,east=>0,west=>0 };my$max={north=>0,south=>0,east=>0,west=>0 };my@idx=(['start','from' ],['end','to' ]);my$unspecified=0;my$outgoing=0;for my$e (ord_values ($self->{edges})){$outgoing++ if$e->{from}==$self;for my$end (0..1){if ($e->{$idx[$end]->[1]}==$self){my ($side,$nr)=$e->port($idx[$end]->[0]);if (defined$side){if (!defined$nr || $nr eq ''){$cnt->{$side}++}else {$nr=9999 if abs($nr)> 9999;$portnr->{$side}++ if vec($vec->{$side},$nr,1)==0x0;$nr=abs($nr)- 1 if$nr < 0;$nr++;vec($vec->{$side},$nr - 1,1)=0x01;$max->{$side}=$nr if$nr > $max->{$side}}}else {$unspecified ++}}}}for my$e (ord_values ($self->{edges})){$unspecified -- if$e->{to}==$e->{from}}if ($unspecified < 4 && ($unspecified==keys %{$self->{edges}})){$self->_calc_size();return$self}my$need={};my$free={};for my$side (qw/north south east west/){$free->{$side}=$max->{$side}- $portnr->{$side};$need->{$side}=$max->{$side};if ($free->{$side}< 2 * $cnt->{$side}){$need->{$side}+= 2 * $cnt->{$side}- $free->{$side}- 1}}my$min_x=$need->{north};$min_x=$need->{south}if$need->{south}> $min_x;my$min_y=$need->{west};$min_y=$need->{east}if$need->{east}> $min_y;my$grow_sides=$self->_calc_size();$self->{cx}=$min_x if$min_x > $self->{cx};$self->{cy}=$min_y if$min_y > $self->{cy};my$flow=$self->flow();my$front_side='east';$front_side='west' if$flow==270;$front_side='south' if$flow==180;$front_side='north' if$flow==0;my$grow=0;my@grow_what=sort keys %$grow_sides;if (keys %$grow_sides > 1){@grow_what=('cy','cx')if$flow==90 || $flow==270}$outgoing=1 if ref($self->{origin})|| keys %{$self->{children}}> 0;while (3 < 5){my$free_ports=0;for my$side (qw/north south/){next if$outgoing==0 && $front_side eq $side;$free_ports += 1 + int(($self->{cx}- $cnt->{$side}- $portnr->{$side})/ 2)}for my$side (qw/east west/){next if$outgoing==0 && $front_side eq $side;$free_ports += 1 + int(($self->{cy}- $cnt->{$side}- $portnr->{$side})/ 2)}last if$free_ports >= $unspecified;$self->{$grow_what[$grow]}+= 2;$grow ++;$grow=0 if$grow >= @grow_what}$self}sub is_multicelled {my$self=shift;$self->_calc_size()unless defined$self->{cx};$self->{cx}+ $self->{cy}<=> 2}sub is_anon {0}sub _un_escape {my ($self,$txt,$do_label)=@_;if (exists$self->{edge}){my$e=$self->{edge};$txt =~ s/\\E/$e->{from}->{name}\->$e->{to}->{name}/g;$txt =~ s/\\T/$e->{from}->{name}/g;$txt =~ s/\\H/$e->{to}->{name}/g;if ($txt =~ /\\N/){my$l=$self->label();$txt =~ s/\\N/$l/g}}else {$txt =~ s/\\N/$self->{name}/g}if ($txt =~ /\\L/ && $do_label){my$l=$self->label();$txt =~ s/\\L/$l/g}if ($txt =~ /\\G/){my$g='';$g=$self->attribute('title')unless ref($self->{graph});$g=$self->{graph}->label()if ref($self->{graph});$txt =~ s/\\G/$g/g}$txt}sub title {my$self=shift;my$title=$self->attribute('title');if ($title eq ''){my$autotitle=$self->attribute('autotitle');if (defined$autotitle){$title='';if ($autotitle eq 'name'){$title=$self->{name};$title=$self->{att}->{label}unless defined$title}if ($autotitle eq 'label'){$title=$self->{name};my$label=$self->label();$title=$label if defined$label}$title=$self->link()if$autotitle eq 'link'}$title='' unless defined$title}$title=$self->_un_escape($title,1)if!$_[0]&& $title =~ /\\[EGHNTL]/;$title}sub background {my$self=shift;$self->color_attribute('background')}sub label {my$self=shift;my$label=$self->{att}->{label};$label=$self->attribute('label')unless defined$label;$label=$self->{autosplit_label}unless defined$label;$label=$self->{name}unless defined$label;return '' unless defined$label;if ($label ne ''){my$len=$self->attribute('autolabel');if ($len ne ''){$len =~ s/^name\s*,\s*//;$len=abs($len || 0);$len=99999 if$len > 99999;if (length($label)> $len){my$g=$self->{graph}|| {};if ((($g->{_ascii_style})|| 0)==0){$len=int($len / 2)- 3;$len=0 if$len < 0;$label=substr($label,0,$len).' ... ' .substr($label,-$len,$len)}else {$len=int($len / 2)- 2;$len=0 if$len < 0;$label=substr($label,0,$len).' … ' .substr($label,-$len,$len)}}}}$label=$self->_un_escape($label)if!$_[0]&& $label =~ /\\[EGHNT]/;$label}sub name {my$self=shift;$self->{name}}sub x {my$self=shift;$self->{x}}sub y {my$self=shift;$self->{y}}sub width {my$self=shift;$self->{w}}sub height {my$self=shift;$self->{h}}sub origin {my$self=shift;$self->{origin}}sub pos {my$self=shift;($self->{x}|| 0,$self->{y}|| 0)}sub offset {my$self=shift;($self->{dx}|| 0,$self->{dy}|| 0)}sub columns {my$self=shift;$self->_calc_size()unless defined$self->{cx};$self->{cx}}sub rows {my$self=shift;$self->_calc_size()unless defined$self->{cy};$self->{cy}}sub size {my$self=shift;$self->_calc_size()unless defined$self->{cx};($self->{cx},$self->{cy})}sub shape {my$self=shift;my$shape;$shape=$self->{att}->{shape}if exists$self->{att}->{shape};$shape=$self->attribute('shape')unless defined$shape;$shape}sub dimensions {my$self=shift;my$align=$self->attribute('align');my ($lines,$aligns)=$self->_aligned_label($align);my$w=0;my$h=scalar @$lines;for my$line (@$lines){$w=length($line)if length($line)> $w}($w,$h)}sub edges_to {my ($self,$other)=@_;return unless ref$self->{graph};my@edges;for my$edge (ord_values ($self->{edges})){push@edges,$edge if$edge->{from}==$self && $edge->{to}==$other}@edges}sub edges_at_port {my ($self,$attr,$side,$port)=@_;return ()unless$attr =~ /^(start|end)\z/;$self->_croak('side not defined')unless defined$side;$self->_croak('port not defined')unless defined$port;my@edges;for my$e (ord_values ($self->{edges})){next if$e->{to}eq $self && $attr eq 'start';next if$e->{from}eq $self && $attr eq 'end';my ($s_p,@ss_p)=$e->port($attr);next unless defined$s_p;push@edges,$e if$s_p eq $side && @ss_p==1 && $ss_p[0]eq $port}@edges}sub shared_edges {my ($self)=@_;my@edges;for my$e (ord_values ($self->{edges})){my ($s_p,@ss_p)=$e->port('start');push@edges,$e if defined$s_p;my ($e_p,@ee_p)=$e->port('end');push@edges,$e if defined$e_p}@edges}sub nodes_sharing_start {my ($self,$side,@port)=@_;my@edges=$self->edges_at_port('start',$side,@port);my$nodes;for my$e (@edges){my$to=$e->{to};next if$to==$self;$nodes->{$to->{name}}=$to}return (ord_values$nodes)}sub nodes_sharing_end {my ($self,$side,@port)=@_;my@edges=$self->edges_at_port('end',$side,@port);my$nodes;for my$e (@edges){my$from=$e->{from};next if$from==$self;$nodes->{$from->{name}}=$from}return (ord_values$nodes)}sub incoming {my$self=shift;return unless ref$self->{graph};if (!wantarray){my$count=0;for my$edge (ord_values ($self->{edges})){$count++ if$edge->{to}==$self}return$count}my@edges;for my$edge (ord_values ($self->{edges})){push@edges,$edge if$edge->{to}==$self}@edges}sub outgoing {my$self=shift;return unless ref$self->{graph};if (!wantarray){my$count=0;for my$edge (ord_values ($self->{edges})){$count++ if$edge->{from}==$self}return$count}my@edges;for my$edge (ord_values ($self->{edges})){push@edges,$edge if$edge->{from}==$self}@edges}sub connections {my$self=shift;return 0 unless defined$self->{graph};my$con=0;for my$edge (ord_values ($self->{edges})){$con ++ if$edge->{to}==$self;$con ++ if$edge->{from}==$self}$con}sub edges {my$self=shift;return unless ref$self->{graph};return (wantarray ? ord_values ($self->{edges}): scalar keys %{$self->{edges}})}sub sorted_successors {my$self=shift;my@suc=sort {scalar$b->successors()<=> scalar$a->successors()|| scalar$a->{name}cmp scalar$b->{name}}$self->successors();@suc}sub successors {my$self=shift;return ()unless defined$self->{graph};my%suc;for my$edge (ord_values ($self->{edges})){next unless$edge->{from}==$self;$suc{$edge->{to}->{id}}=$edge->{to}}return ord_values(\%suc)}sub predecessors {my$self=shift;return ()unless defined$self->{graph};my%pre;for my$edge (ord_values ($self->{edges})){next unless$edge->{to}==$self;$pre{$edge->{from}->{id}}=$edge->{from}}return ord_values(\%pre)}sub has_predecessors {my$self=shift;return undef unless defined$self->{graph};for my$edge (ord_values ($self->{edges})){return 1 if$edge->{to}==$self}0}sub has_as_predecessor {my ($self,$other)=@_;return ()unless defined$self->{graph};for my$edge (ord_values ($self->{edges})){return 1 if $edge->{to}==$self && $edge->{from}==$other}0}sub has_as_successor {my ($self,$other)=@_;return ()unless defined$self->{graph};for my$edge (ord_values ($self->{edges})){return 1 if $edge->{from}==$self && $edge->{to}==$other}0}sub relative_to {my ($self,$parent,$dx,$dy)=@_;if (!ref($parent)||!$parent->isa('Graph::Easy::Node')){require Carp;Carp::confess("Can't set origin to non-node object $parent")}my$grandpa=$parent->find_grandparent();if ($grandpa==$self){require Carp;Carp::confess("Detected loop in origin-chain:" ." tried to set origin of '$self->{name}' to my own grandchild $parent->{name}")}delete$self->{origin}->{children}->{$self->{id}}if defined$self->{origin};$self->{origin}=$parent;$self->{dx}=$dx if defined$dx;$self->{dy}=$dy if defined$dy;$self->{dx}=0 unless defined$self->{dx};$self->{dy}=0 unless defined$self->{dy};$parent->{children}->{$self->{id}}=$self;$self}sub find_grandparent {my$cur=shift;if (wantarray){my$ox=0;my$oy=0;while (defined($cur->{origin})){$ox -= $cur->{dx};$oy -= $cur->{dy};$cur=$cur->{origin}}return ($cur,$ox,$oy)}while (defined($cur->{origin})){$cur=$cur->{origin}}$cur}sub del_attribute {my ($self,$name)=@_;$name=$att_aliases->{$name}if exists$att_aliases->{$name};$self->{cache}={};my$a=$self->{att};delete$a->{$name};if ($name eq 'size'){delete$a->{rows};delete$a->{columns}}if ($name eq 'border'){delete$a->{borderstyle};delete$a->{borderwidth};delete$a->{bordercolor}}$self}sub set_attribute {my ($self,$name,$v,$class)=@_;$self->{cache}={};$name='undef' unless defined$name;$v='undef' unless defined$v;$name=$att_aliases->{$name}if exists$att_aliases->{$name};$class=$self->main_class()unless defined$class;my$val=Graph::Easy->unquote_attribute($class,$name,$v);my$g=$self->{graph};$g->{score}=undef if$g;my$strict=0;$strict=$g->{strict}if$g;if ($strict){my ($rc,$newname,$v)=$g->validate_attribute($name,$val,$class);return if defined$rc;$val=$v}if ($name eq 'class'){$self->sub_class($val);return$val}elsif ($name eq 'group'){$self->add_to_group($val);return$val}elsif ($name eq 'border'){my$c=$self->{att};($c->{borderstyle},$c->{borderwidth},$c->{bordercolor})=$g->split_border_attributes($val);return$val}if ($name =~ /^(columns|rows|size)\z/){if ($name eq 'size'){$val =~ /^(\d+)\s*,\s*(\d+)\z/;my ($cx,$cy)=(abs(int($1)),abs(int($2)));($self->{att}->{columns},$self->{att}->{rows})=($cx,$cy)}else {$self->{att}->{$name}=abs(int($val))}return$self}if ($name =~ /^(origin|offset)\z/){return$self if exists$self->{autosplit}&&!defined$self->{autosplit};if ($name eq 'origin'){my$org=$self->{graph}->add_node($val);$self->relative_to($org);$self->{att}->{origin}=$org->{name}}else {my ($x,$y)=split/\s*,\s*/,$val;$x=int($x);$y=int($y);if ($x==0 && $y==0){$g->error("Error in attribute: 'offset' is 0,0 in node $self->{name} with class '$class'");return}$self->{dx}=$x;$self->{dy}=$y;$self->{att}->{offset}="$self->{dx},$self->{dy}"}return$self}$self->{att}->{$name}=$val}sub set_attributes {my ($self,$atr,$index)=@_;for my$n (sort keys %$atr){my$val=$atr->{$n};$val=$val->[$index]if ref($val)eq 'ARRAY' && defined$index;next if!defined$val || $val eq '';$n eq 'class' ? $self->sub_class($val): $self->set_attribute($n,$val)}$self}BEGIN {*text_styles_as_css=\&Graph::Easy::text_styles_as_css;*text_styles=\&Graph::Easy::text_styles;*_font_size_in_pixels=\&Graph::Easy::_font_size_in_pixels;*get_color_attribute=\&color_attribute;*link=\&Graph::Easy::link;*border_attribute=\&Graph::Easy::border_attribute;*get_attributes=\&Graph::Easy::get_attributes;*get_attribute=\&Graph::Easy::attribute;*raw_attribute=\&Graph::Easy::raw_attribute;*get_raw_attribute=\&Graph::Easy::raw_attribute;*raw_color_attribute=\&Graph::Easy::raw_color_attribute;*raw_attributes=\&Graph::Easy::raw_attributes;*raw_attributes=\&Graph::Easy::raw_attributes;*attribute=\&Graph::Easy::attribute;*color_attribute=\&Graph::Easy::color_attribute;*default_attribute=\&Graph::Easy::default_attribute;$att_aliases=Graph::Easy::_att_aliases()}sub group {my$self=shift;$self->{group}}sub add_to_group {my ($self,$group)=@_;my$graph=$self->{graph};$self->{group}->del_member($self)if ref$self->{group};$group=$graph->add_group($group)if (!ref($group)&& $graph);$self->{att}->{group}=$group->{name};$group->add_member($self);$self}sub parent {my$self=shift;my$p=$self->{graph};$p=$self->{group}if ref($self->{group});$p}sub _update_boundaries {my ($self,$parent)=@_;$parent=$self->{graph};my$x=$self->{x};my$y=$self->{y};$parent->{cache}={}unless ref($parent->{cache});my$cache=$parent->{cache};$cache->{min_x}=$x if!defined$cache->{min_x}|| $x < $cache->{min_x};$cache->{min_y}=$y if!defined$cache->{min_y}|| $y < $cache->{min_y};$x=$x + ($self->{cx}||1)- 1;$y=$y + ($self->{cy}||1)- 1;$cache->{max_x}=$x if!defined$cache->{max_x}|| $x > $cache->{max_x};$cache->{max_y}=$y if!defined$cache->{max_y}|| $y > $cache->{max_y};if (($parent->{debug}||0)> 1){my$n=$self->{name};$n=$self unless defined$n;print STDERR "Update boundaries for $n (parent $parent) at $x, $y\n";print STDERR "Boundaries are now: " ."$cache->{min_x},$cache->{min_y} => $cache->{max_x},$cache->{max_y}\n"}$self}1;
GRAPH_EASY_NODE

$fatpacked{"Graph/Easy/Node/Anon.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_NODE_ANON';
  package Graph::Easy::Node::Anon;use Graph::Easy::Node;@ISA=qw/Graph::Easy::Node/;$VERSION='0.76';use strict;use warnings;sub _init {my$self=shift;$self->SUPER::_init(@_);$self->{name}='#' .$self->{id};$self->{class}='node.anon';$self->{att}->{label}=' ';$self}sub _correct_size {my$self=shift;$self->{w}=3;$self->{h}=3;$self}sub attributes_as_txt {my$self=shift;$self->SUPER::attributes_as_txt({node=>{label=>undef,shape=>undef,class=>undef,}})}sub as_pure_txt {'[ ]'}sub _as_part_txt {'[ ]'}sub as_txt {my$self=shift;'[ ]' .$self->attributes_as_txt()}sub text_styles_as_css {''}sub is_anon {1}1;
GRAPH_EASY_NODE_ANON

$fatpacked{"Graph/Easy/Node/Cell.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_NODE_CELL';
  package Graph::Easy::Node::Cell;use Graph::Easy::Node;use strict;use warnings;use vars qw(@ISA $VERSION);@ISA=qw/Graph::Easy::Node/;$VERSION='0.76';sub _init {my ($self,$args)=@_;$self->{class}='';$self->{name}='';$self->{'x'}=0;$self->{'y'}=0;$self->{node}=undef;for my$k (sort keys %$args){if ($k !~ /^(node|graph|x|y)\z/){require Carp;Carp::confess ("Invalid argument '$k' passed to Graph::Easy::Node::Cell->new()")}$self->{$k}=$args->{$k}}$self}sub _correct_size {my$self=shift;$self->{w}=0;$self->{h}=0;$self}sub node {my$self=shift;$self->{node}}sub as_ascii {''}sub as_html {''}sub group {my$self=shift;$self->{node}->group()}1;
GRAPH_EASY_NODE_CELL

$fatpacked{"Graph/Easy/Node/Empty.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_NODE_EMPTY';
  package Graph::Easy::Node::Empty;use Graph::Easy::Node;@ISA=qw/Graph::Easy::Node/;$VERSION='0.76';use strict;use warnings;sub _init {my ($self,$args)=@_;$self->SUPER::_init($args);$self->{class}='node.empty';$self}sub _correct_size {my$self=shift;$self->{w}=3;$self->{h}=3;$self}1;
GRAPH_EASY_NODE_EMPTY

$fatpacked{"Graph/Easy/Parser.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_PARSER';
  package Graph::Easy::Parser;use Graph::Easy;$VERSION='0.76';use Graph::Easy::Base;@ISA=qw/Graph::Easy::Base/;use Scalar::Util qw/weaken/;use strict;use warnings;use constant NO_MULTIPLES=>1;use Graph::Easy::Util qw(ord_values);sub _init {my ($self,$args)=@_;$self->{error}='';$self->{debug}=0;$self->{fatal_errors}=1;for my$k (sort keys %$args){if ($k !~ /^(debug|fatal_errors)\z/){require Carp;my$class=ref($self);Carp::confess ("Invalid argument '$k' passed to $class" .'->new()')}$self->{$k}=$args->{$k}}$self->{replace}='';$self->{attr_sep}=':';$self->{_qr_part_clean}=undef;$self->{use_class}={edge=>'Graph::Easy::Edge',group=>'Graph::Easy::Group',graph=>'Graph::Easy',node=>'Graph::Easy::Node',};$self}sub reset {my$self=shift;$self->{error}='';$self->{anon_id}=0;$self->{cluster_id}='';$self->{line_nr}=-1;$self->{match_stack}=[];$self->{clusters}={};Graph::Easy::Base::_reset_id();$self->{stack}=[];$self->{group_stack}=[];$self->{left_stack}=[];$self->{left_edge}=undef;Graph::Easy->_drop_special_attributes();$self->{_graph}=$self->{use_class}->{graph}->new({debug=>$self->{debug},strict=>0,fatal_errors=>$self->{fatal_errors},});$self}sub from_file {my ($self,$file)=@_;$self=$self->new()unless ref$self;my$doc;local $/=undef;if (ref($file)){binmode$file,':utf8' or die ("binmode '$file', ':utf8' failed: $!");$doc=<$file>}else {open my$PARSER_FILE,$file or die (ref($self).": Cannot read $file: $!");binmode$PARSER_FILE,':utf8' or die ("binmode '$file', ':utf8' failed: $!");$doc=<$PARSER_FILE>;close$PARSER_FILE}$self->from_text($doc)}sub use_class {my ($self,$object,$class)=@_;$self->_croak("Expected one of node, edge, group or graph, but got $object")unless$object =~ /^(node|group|graph|edge)\z/;$self->{use_class}->{$object}=$class;$self}sub _register_handler {my$self=shift;push @{$self->{match_stack}},[@_ ];$self}sub _register_attribute_handler {my ($self,$qr_attr,$target)=@_;$self->_register_handler(qr/^$qr_attr/,sub {my$self=shift;my$stack=$self->{stack};$stack=$self->{group_stack}if @{$self->{stack}}==0;my$object=$target;if ($target && $target eq 'parent'){$stack=$self->{group_stack};$object=$stack->[-1]if ref$stack;if (!defined$object){$stack=$self->{scope_stack};$object=$self->{_graph};if (!$stack || @$stack <= 1){$object=$self->{_graph};$stack=[$self->{_graph}]}}}my ($a,$max_idx)=$self->_parse_attributes($1||'',$object);return undef if$self->{error};if (ref($stack->[-1])eq 'HASH'){for my$k (sort keys %$a){$stack->[-1]->{graph}->{$k}=$a->{$k}}return 1}print STDERR "max_idx = $max_idx, stack contains ",join (" , ",@$stack),"\n" if$self->{debug}&& $self->{debug}> 1;if ($max_idx!=1){my$i=0;for my$n (@$stack){$n->set_attributes($a,$i++)}}else {for my$n (@$stack){$n->set_attributes($a)}}if (defined$a->{basename}){for my$s (@$stack){$self->_set_new_basename($s,$a->{basename})if exists$s->{autosplit_parts}}}1})}sub _register_node_attribute_handler {my ($self,$qr_node,$qr_oatr)=@_;$self->_register_handler(qr/^$qr_node$qr_oatr/,sub {my$self=shift;my$n1=$1;my$a1=$self->_parse_attributes($2||'');return undef if$self->{error};$self->{stack}=[$self->_new_node ($self->{_graph},$n1,$self->{group_stack},$a1)];$self->{left_edge}=undef;$self->{left_stack}=[];1})}sub _new_group {my ($self,$name)=@_;$name='' unless defined$name;my$gr=$self->{use_class}->{group};my$group;if ($name eq ''){print STDERR "# Creating new anon group.\n" if$self->{debug};$gr .= '::Anon';$group=$gr->new()}else {$name=$self->_unquote($name);print STDERR "# Creating new group '$name'.\n" if$self->{debug};$group=$gr->new(name=>$name)}$self->{_graph}->add_group($group);my$group_stack=$self->{group_stack};if (@$group_stack > 0){$group->set_attribute('group',$group_stack->[-1]->{name})}$group}sub _add_group_match {my$self=shift;my$qr_group_start=$self->_match_group_start();my$qr_group_end=$self->_match_group_end();my$qr_oatr=$self->_match_optional_attributes();$self->_register_handler(qr/^$qr_group_start/,sub {my$self=shift;my$graph=$self->{_graph};my$end=$2;$end='' unless defined$end;$self->{replace}='[' if$end eq '[';$self->{replace}='(' if$end eq '(';my$group=$self->_new_group($1);if ($end eq ')'){$self->{stack}=[$group ];print STDERR "# Seen end of group '$group->{name}'.\n" if$self->{debug}}else {push @{$self->{group_stack}},$group}1});$self->_register_handler(qr/^$qr_group_end$qr_oatr/,sub {my$self=shift;my$group=pop @{$self->{group_stack}};return$self->parse_error(0)if!defined$group;print STDERR "# Seen end of group '$group->{name}'.\n" if$self->{debug};my$a1=$self->_parse_attributes($1||'','group',NO_MULTIPLES);return undef if$self->{error};$group->set_attributes($a1);$self->{stack}=[$group ];1})}sub _build_match_stack {my$self=shift;my$qr_node=$self->_match_node();my$qr_attr=$self->_match_attributes();my$qr_oatr=$self->_match_optional_attributes();my$qr_edge=$self->_match_edge();my$qr_comma=$self->_match_comma();my$qr_class=$self->_match_class_selector();my$e=$self->{use_class}->{edge};$self->_register_handler(qr/^\s*$qr_class$qr_attr/,sub {my$self=shift;my$class=lc($1 || '');my$att=$self->_parse_attributes($2 || '',$class,NO_MULTIPLES);return undef unless defined$att;my$graph=$self->{_graph};$graph->set_attributes ($class,$att);$self->{stack}=[];$self->{left_edge}=undef;$self->{left_stack}=[];1});$self->_add_group_match();$self->_register_attribute_handler($qr_attr);$self->_register_node_attribute_handler($qr_node,$qr_oatr);$self->_register_handler(qr/^$qr_comma$qr_node$qr_oatr/,sub {my$self=shift;my$graph=$self->{_graph};my$n1=$1;my$a1=$self->_parse_attributes($2||'');return undef if$self->{error};push @{$self->{stack}},$self->_new_node ($graph,$n1,$self->{group_stack},$a1,$self->{stack});if (defined$self->{left_edge}){my ($style,$edge_label,$edge_atr,$edge_bd,$edge_un)=@{$self->{left_edge}};for my$node (@{$self->{left_stack}}){my$edge=$e->new({style=>$style,name=>$edge_label });$edge->set_attributes($edge_atr);$edge->bidirectional(1)if$edge_bd;$edge->undirected(1)if$edge_un;$graph->add_edge ($node,$self->{stack}->[-1],$edge)}}1});$self->_register_handler(qr/^$qr_edge$qr_oatr$qr_node$qr_oatr/,sub {my$self=shift;return if @{$self->{stack}}==0;my$graph=$self->{_graph};my$eg=$1;my$edge_bd=$2 || $4;my$edge_un=0;$edge_un=1 if!defined $2 &&!defined $5;my$edge_label=$7;my$ed=$3 || $5 || $1;my$edge_atr=$11 || '';my$n=$12;my$a1=$self->_parse_attributes($13||'');$edge_atr=$self->_parse_attributes($edge_atr,'edge');return undef if$self->{error};$edge_label=$self->_unquote($edge_label)if defined$edge_label;$edge_label =~ s/\s+\z// if defined$edge_label;my$nodes_b=[$self->_new_node ($self->{_graph},$n,$self->{group_stack},$a1)];my$style=$self->_link_lists($self->{stack},$nodes_b,$ed,$edge_label,$edge_atr,$edge_bd,$edge_un);$self->{left_edge}=[$style,$edge_label,$edge_atr,$edge_bd,$edge_un ];$self->{left_stack}=$self->{stack};$self->{stack}=$nodes_b;1});my$qr_group_start=$self->_match_group_start();$self->_register_handler(qr/^$qr_edge$qr_oatr$qr_group_start/,sub {my$self=shift;return if @{$self->{stack}}==0;my$eg=$1;my$edge_bd=$2 || $4;my$edge_un=0;$edge_un=1 if!defined $2 &&!defined $5;my$edge_label=$7;my$ed=$3 || $5 || $1;my$edge_atr=$11 || '';my$gn=$12;$self->{replace}='[' if defined $13 && $13 eq '[';$self->{replace}='(' if defined $13 && $13 eq '(';$edge_atr=$self->_parse_attributes($edge_atr,'edge');return undef if$self->{error};pop @{$self->{group_stack}};$self->{group_stack}=[$self->_new_group($gn)];$edge_label=$self->_unquote($edge_label)if$edge_label;$edge_label =~ s/\s+\z// if$edge_label;my$style=$self->_link_lists($self->{stack},$self->{group_stack},$ed,$edge_label,$edge_atr,$edge_bd,$edge_un);$self->{left_edge}=[$style,$edge_label,$edge_atr,$edge_bd,$edge_un ];$self->{left_stack}=$self->{stack};$self->{stack}=[];$self->{stack}=[$self->{group_stack}->[-1]]if defined $13 && $13 eq ')';1})}sub _line_insert {''}sub _clean_line {my ($self,$line)=@_;chomp($line);my$sep=$self->{attr_sep};$line =~ s/$sep\s*("?)(#(?:[a-fA-F0-9]{6}|[a-fA-F0-9]{3}))("?)/$sep $1\\$2$3/g;$line =~ s/(:[^\\]|)$self->{qr_comment}.*/$1/;$line =~ s/\s+\z//;$line}sub from_text {my ($self,$txt)=@_;my$o_cmt=qr#((\s*/\*.*?\*/\s*)*\s*|\s+)#;if ((ref($self)||$self)eq 'Graph::Easy::Parser' && ($txt =~ /^(\s*|\s*\/\*.*?\*\/\s*)(strict)?$o_cmt(di)?graph$o_cmt("[^"]*"|[\w_]+)$o_cmt\{/im || $txt =~ /^(\s*|\s*\/\*.*?\*\/\s*)(strict)?${o_cmt}digraph$o_cmt\{/im || $txt =~ /^(\s*|\s*\/\*.*?\*\/\s*)strict${o_cmt}(di)?graph$o_cmt\{/im)){require Graph::Easy::Parser::Graphviz;my$debug=0;my$old_self=$self;if (ref($self)){$debug=$self->{debug};$self->{fatal_errors}=0}$self=Graph::Easy::Parser::Graphviz->new(debug=>$debug,fatal_errors=>0);$self->reset();$self->{_old_self}=$old_self if ref($self)}if ((ref($self)||$self)eq 'Graph::Easy::Parser' && $txt =~ /^([\s\n\t]*|\s*\/\*.*?\*\/\s*)graph\s*:\s*\{/m){require Graph::Easy::Parser::VCG;my$debug=0;my$old_self=$self;if (ref($self)){$debug=$self->{debug};$self->{fatal_errors}=0}$self=Graph::Easy::Parser::VCG->new(debug=>$debug,fatal_errors=>0);$self->reset();$self->{_old_self}=$old_self if ref($self)}$self=$self->new()unless ref$self;$self->reset();my$graph=$self->{_graph};return$graph if!defined$txt || $txt =~ /^\s*\z/;my$uc=$self->{use_class};for my$o (sort keys %$uc){$graph->use_class($o,$uc->{$o})unless$o eq 'graph'}my@lines=split /(\r\n|\n|\r)/,$txt;my$backbuffer='';my$qr_comment=$self->_match_commented_line();$self->{qr_comment}=$self->_match_comment();$self->{_match_single_attribute}=$self->_match_single_attribute();$self->_build_match_stack();my$handled=0;my$line;LINE: while (@lines > 0 || $backbuffer ne ''){if (@lines > 0 && $handled==0){$self->{line_nr}++;my$curline=shift@lines;next if$curline =~ $qr_comment;$curline =~ tr/\t/ /;$line=$backbuffer .$self->_line_insert().$self->_clean_line($curline)}print STDERR "# Line is '$line'\n" if$self->{debug}&& $self->{debug}> 2;print STDERR "#  Backbuffer is '$backbuffer'\n" if$self->{debug}&& $self->{debug}> 2;$handled=0;PATTERN: for my$entry (@{$self->{match_stack}}){last PATTERN if$line eq '';$self->{replace}='';my ($pattern,$handler,$replace)=@$entry;print STDERR "# Matching against $pattern\n" if$self->{debug}&& $self->{debug}> 3;if ($line =~ $pattern){print STDERR "# Matched, calling handler\n" if$self->{debug}&& $self->{debug}> 2;my$rc=1;$rc=&$handler($self)if defined$handler;if ($rc){$replace=$self->{replace}unless defined$replace;$replace=&$replace($self,$line)if ref($replace);print STDERR "# Handled it successfully.\n" if$self->{debug}&& $self->{debug}> 2;$line =~ s/$pattern/$replace/;print STDERR "# Line is now '$line' (replaced with '$replace')\n" if$self->{debug}&& $self->{debug}> 2;$handled++;last PATTERN}}}$backbuffer=$line;last LINE if$handled==0 && @lines==0;last LINE if$self->{error}}$self->error("'$backbuffer' not recognized by " .ref($self))if$backbuffer ne '';$self->parse_error(7)if!$self->{error}&& $self->{scope_stack}&& @{$self->{scope_stack}}> 0;return undef if$self->{error}&& $self->{fatal_errors};print STDERR "# Parsing done.\n" if$graph->{debug};$self->_parser_cleanup()if$self->can('_parser_cleanup');$graph->_drop_special_attributes();$graph->strict(1);$graph->fatal_errors(1);$graph}sub _edge_style {my ($self,$ed)=@_;my$style=undef;$style='double-dash' if$ed =~ /^(= )+\z/;$style='double' if$ed =~ /^=+\z/;$style='dotted' if$ed =~ /^\.+\z/;$style='dashed' if$ed =~ /^(- )+\z/;$style='dot-dot-dash' if$ed =~ /^(..-)+\z/;$style='dot-dash' if$ed =~ /^(\.-)+\z/;$style='wave' if$ed =~ /^\~+\z/;$style='bold' if$ed =~ /^#+\z/;$style}sub _link_lists {my ($self,$left,$right,$ed,$label,$edge_atr,$edge_bd,$edge_un)=@_;my$graph=$self->{_graph};my$style=$self->_edge_style($ed);my$e=$self->{use_class}->{edge};for my$node (@$left){for my$node_b (@$right){my$edge=$e->new({style=>$style,name=>$label });$graph->add_edge ($node,$node_b,$edge);my$e=$edge_atr;$e=[$edge_atr ]unless ref($e)eq 'ARRAY';for my$a (@$e){if (ref$a){$edge->set_attributes($a)}else {my$out=$self->_parse_attributes($a,$edge);return undef if$self->{error};$edge->set_attributes($out)}}$edge->bidirectional(1)if$edge_bd;$edge->undirected(1)if$edge_un}}$style}sub _unquote_attribute {my ($self,$name,$value)=@_;$self->_unquote($value)}sub _unquote {my ($self,$name,$no_collapse)=@_;$name='' unless defined$name;$name =~ s/\\([\[\(\{\}\]\)#<>\-\.\=])/$1/g;$name =~ s/\s+/ /g unless$no_collapse;$name}sub _add_node {my ($self,$graph,$name)=@_;$graph->add_node($name)}sub _get_cluster_name {my ($self,$base_name)=@_;if (exists$self->{clusters}->{$base_name}){my$g=1;while ($g==1){my$base_try=$base_name;$base_try .= '-' .$self->{cluster_id}if$self->{cluster_id};last if!exists$self->{clusters}->{$base_try};$self->{cluster_id}++}$base_name .= '-' .$self->{cluster_id}if$self->{cluster_id};$self->{cluster_id}++}$self->{clusters}->{$base_name}=undef;$base_name}sub _set_new_basename {my ($self,$node,$new_basename)=@_;return if$node->{autosplit_basename}eq $new_basename;my$g=$node->{graph};my@parts=@{$node->{autosplit_parts}};my$nr=0;for my$part ($node,@parts){print STDERR "# Setting new basename $new_basename for node $part->{name}\n" if$self->{debug}> 1;$part->{autosplit_basename}=$new_basename;$part->set_attribute('basename',$new_basename);delete$g->{nodes}->{$part->{name}};$part->{name}=$new_basename .'.' .$nr;$nr++;$g->{nodes}->{$part->{name}}=$part}}sub _autosplit_node {my ($self,$graph,$name,$att,$allow_empty)=@_;$allow_empty=1 unless defined$allow_empty;my@rc;my$uc=$self->{use_class};my$qr_clean=$self->{_qr_part_clean};my$base_name=$name;$base_name =~ s/\s*\|\|?\s*//g;$base_name=$att->{basename}if exists$att->{basename};$base_name =~ s/\s+\z//;$base_name =~ s/^\s+//;$base_name=$self->_get_cluster_name($base_name);print STDERR "# Parser: Autosplitting node with basename '$base_name'\n" if$graph->{debug};my$first_in_row;my$x=0;my$y=0;my$idx=0;my$remaining=$name;my$sep;my$last_sep='';my$add=0;while ($remaining ne ''){$remaining =~ s/^((\\\||[^\|])*)(\|\|?|\z)//;my$part=$1 || ' ';$sep=$3;my$port_name='';if ($qr_clean){$part =~ s/^$qr_clean//;$port_name=$1}if ($add==0 && $remaining eq '' && $sep =~ /\|\|?/){$add++;$remaining .= '|'}print STDERR "# Parser: Found autosplit part '$part'\n" if$graph->{debug};my$class=$uc->{node};if ($allow_empty && $part eq ' '){$class .= "::Empty"}elsif ($part =~ /^[ ]{2,}\z/){$part=' '}else {$part =~ s/^\s+//;$part =~ s/\s+\z//}my$node_name="$base_name.$idx";if ($graph->{debug}){my$empty='';$empty=' empty' if$class ne $self->{use_class}->{node};print STDERR "# Parser:  Creating$empty autosplit part '$part'\n" if$graph->{debug}}if ($class =~ /::Empty/){my$node=$graph->node($node_name);if (!defined$node){$node=$class->new($node_name);$graph->add_node($node)}}my$node=$graph->add_node($node_name);$node->{autosplit_label}=$part;$node->{autosplit_portname}=$port_name;$node->{autosplit_basename}=$base_name;push@rc,$node;if (@rc==1){$node->{autosplit}=$name;$node->{autosplit}=~ s/\s+\z//;$node->{autosplit}=~ s/^\s+//;$node->{autosplit}=~ s/([^\|])\s+\|/$1 \|/g;$node->{autosplit}=~ s/\|\s+([^\|])/\| $1/g;$node->set_attribute('basename',$att->{basename})if defined$att->{basename};$node->{autosplit_parts}=[];$first_in_row=$node}else {my ($sx,$sy)=(1,0);my$origin=$rc[-2];if ($last_sep eq '||'){($sx,$sy)=(0,1);$origin=$first_in_row;$first_in_row=$node}$node->relative_to($origin,$sx,$sy);push @{$rc[0]->{autosplit_parts}},$node;weaken @{$rc[0]->{autosplit_parts}}[-1];$node->{autosplit}=undef}$node->{autosplit_xy}="$x,$y";$idx++;$last_sep=$sep;$x++;if ($sep eq '||'){$x=0;$y++}}@rc}sub _new_node {my ($self,$graph,$name,$group_stack,$att,$stack)=@_;print STDERR "# Parser: new node '$name'\n" if$graph->{debug};$name=$self->_unquote($name,'no_collapse');my$autosplit;my$uc=$self->{use_class};my@rc=();if ($name =~ /^\s*\z/){print STDERR "# Parser: Creating anon node\n" if$graph->{debug};my$class=$uc->{node}.'::Anon';my$node=$class->new();@rc=($graph->add_node($node))}elsif ((ref($self)eq 'Graph::Easy::Parser')&& $name =~ /[^\\]\|/){$autosplit=1;@rc=$self->_autosplit_node($graph,$name,$att)}else {$name =~ s/\s+\z//;$name =~ s/^\s+//;$name =~ s/\s+/ /g;$name =~ s/\\\|/\|/g;if ($self->{debug}){if (!$graph->node($name)){print STDERR "# Parser: Creating normal node from name '$name'.\n"}else {print STDERR "# Parser: Found node '$name' already in graph.\n"}}@rc=($self->_add_node($graph,$name))}$self->parse_error(5)if exists$att->{basename}&&!$autosplit;my$b=$att->{basename};delete$att->{basename};if (defined$stack){for my$node (@$stack){$node->set_attributes ($att,0)}}my$index=0;my$group=$self->{group_stack}->[-1];for my$node (@rc){$node->add_to_group($group)if$group;$node->set_attributes ($att,$index);$index++}$att->{basename}=$b if defined$b;@rc}sub _match_comma {qr/\s*,\s*/}sub _match_comment {qr/(^|[^\\])#/}sub _match_commented_line {qr/^\s*(#|\z)/}sub _match_attributes {qr/\s*\{\s*([^\}]+?)\s*\}/}sub _match_optional_attributes {qr/(\s*\{[^\}]+?\})?/}sub _match_node {qr/\s*\[				#  '[' start of the node
      (
       (?:				# non-capturing group
        \\.				# either '\]' or '\N' etc.
        |					#  or
        [^\]\\]				# not ']' and not '\'
       )*					# 0 times for '[]'
      )
      \]/x}sub _match_class_selector {my$class=qr/(?:\.\w+|graph|(?:edge|group|node)(?:\.\w+)?)/;qr/($class(?:\s*,\s*$class)*)/}sub _match_single_attribute {qr/\s*([^:]+?)\s*:\s*("(?:\\"|[^"])+"|(?:\\;|[^;])+?)(?:\s*;\s*|\s*\z)/}sub _match_group_start {qr/\s*\(\s*([^\[\)\(]*?)\s*([\[\)\(])/}sub _match_group_end {qr/\s*\)\s*/}sub _match_edge {qr/\s*
       (					# egde without label ("-->")
         (<?) 				 # optional left "<"
         (=\s|=|-\s|-|\.\.-|\.-|\.|~)+>	 # pattern (style) of edge
       |					# edge with label ("-- label -->")
         (<?) 				 # optional left "<"
         ((=\s|=|-\s|-|\.\.-|\.-|\.|~)+)	 # pattern (style) of edge
         \s+				 # followed by at least a space
         ((?:\\.|[^>\[\{])*?)		 # either \\, \[ etc, or not ">", "[", "{"
         (\s+\5)>				 # a space and pattern before ">"
  
  # inserting this needs mucking with all the code that access $5 etc
  #     |					# undirected edge (without arrows, but with label)
  #       ((=\s|=|-\s|-|\.\.-|\.-|\.|~)+)	 # pattern (style) of edge
  #       \s+				 # followed by at least a space
  #       ((?:\\.|[^>\[\{])*?)		 # either \\, \[ etc, or not ">", "[", "{"
  #       (\s+\10)				 # a space and pattern
  
       |					# undirected edge (without arrows and label)
         (\.\.-|\.-)+			 # pattern (style) of edge (at least once)
       |
         (=\s|=|-\s|-|\.|~){2,}		 # these at least two times
       )
       /x}sub _clean_attributes {my ($self,$text)=@_;$text =~ s/^\s*\{\s*//;$text =~ s/\s*\}\s*\z//;$text}sub _parse_attributes {my ($self,$text,$object,$no_multiples)=@_;my$class=$object;$class=$object->{class}if ref($object);$class='node' unless defined$class;$class =~ s/\..*//;my$out;my$att={};my$multiples=0;$text=$self->_clean_attributes($text);my$qr_att=$self->{_match_single_attribute};my$qr_cmt;$qr_cmt=$self->_match_multi_line_comment()if$self->can('_match_multi_line_comment');my$qr_satt;$qr_satt=$self->_match_special_attribute()if$self->can('_match_special_attribute');return {}if$text =~ /^\s*\z/;print STDERR "attr parsing: matching\n '$text'\n against $qr_att\n" if$self->{debug}> 3;while ($text ne ''){print STDERR "attr parsing: matching '$text'\n" if$self->{debug}> 3;$text =~ s/^$qr_cmt//g if$qr_cmt;last if$text =~ /^\s*\z/;my$done=($text =~ s/^$qr_att//)|| 0;$done++ if$done==0 && $qr_satt && ($text =~ s/^$qr_satt//);return$self->error ("Error in attribute: '$text' doesn't look valid to me.")if$done==0;my$name=$1;my$v=$2;$v='' unless defined$v;$out->{$name}=$self->_unquote_attribute($name,$v)}if ($self->{debug}&& $self->{debug}> 1){require Data::Dumper;print STDERR "# ",join (" ",caller),"\n";print STDERR "# Parsed attributes into:\n",Data::Dumper::Dumper($out),"\n"}$out=$self->_remap_attributes($out,$object)if$self->can('_remap_attributes');my$g=$self->{_graph};for my$name (sort keys %$out){my ($rc,$newname,$v)=$g->validate_attribute($name,$out->{$name},$class,$no_multiples);$self->error($g->{error})if defined$rc;$multiples=scalar @$v if ref($v)eq 'ARRAY';$att->{$newname}=$v if defined$v}return$att unless wantarray;($att,$multiples || 1)}sub parse_error {my$self=shift;my$msg_nr=shift;my$msg="Found unexpected group end";$msg="Error in attribute: '##param2##' is not a valid attribute for a ##param3##" if$msg_nr==1;$msg="Error in attribute: '##param1##' is not a valid ##param2## for a ##param3##" if$msg_nr==2;$msg="Error: Found attributes, but expected group or node start" if$msg_nr==3;$msg="Error in attribute: multi-attribute '##param1##' not allowed here" if$msg_nr==4;$msg="Error in attribute: basename not allowed for non-autosplit nodes" if$msg_nr==5;$msg="Error: Already seen graph start" if$msg_nr==6;$msg="Error: Expected '}', but found file end" if$msg_nr==7;my$i=1;for my$p (@_){$msg =~ s/##param$i##/$p/g;$i++}$self->error($msg .' at line ' .$self->{line_nr})}sub _parser_cleanup {my ($self)=@_;my$g=$self->{_graph};for my$n (ord_values ($g->{nodes})){next if$n->{autosplit};$self->warn("Node '" .$self->_quote($n->{name})."' has an offset but no origin")if (($n->attribute('offset')ne '0,0')&& $n->attribute('origin')eq '')}$self}sub _quote {my ($self,$n)=@_;$n =~ s/'/\\'/g;$n}1;
GRAPH_EASY_PARSER

$fatpacked{"Graph/Easy/Parser/Graphviz.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_PARSER_GRAPHVIZ';
  package Graph::Easy::Parser::Graphviz;$VERSION='0.76';use Graph::Easy::Parser;@ISA=qw/Graph::Easy::Parser/;use strict;use warnings;use utf8;use constant NO_MULTIPLES=>1;use Graph::Easy::Util qw(ord_values);sub _init {my$self=shift;$self->SUPER::_init(@_);$self->{attr_sep}='=';$self->{_qr_part_clean}=qr/\s*<([^>]*)>/;$self}sub reset {my$self=shift;$self->SUPER::reset(@_);my$g=$self->{_graph};$g->set_attribute('colorscheme','x11');$g->set_attribute('flow','south');$g->set_attribute('edge','arrow-style','filled');$g->set_attribute('group','align','center');$g->set_attribute('group','fill','inherit');$self->{scope_stack}=[];$g->_allow_special_attributes({node=>{shape=>["",[qw/circle diamond edge ellipse hexagon house invisible invhouse invtrapezium invtriangle octagon parallelogram pentagon point triangle trapezium septagon rect rounded none img record/ ],'','',undef,],},});$g->{_warn_on_unknown_attributes}=1;$self}my%entities=('amp'=>'&','quot'=>'"','lt'=>'<','gt'=>'>','nbsp'=>' ','iexcl'=>'¡','cent'=>'¢','pound'=>'£','curren'=>'¤','yen'=>'¥','brvbar'=>'¦','sect'=>'§','uml'=>'¨','copy'=>'©','ordf'=>'ª','ordf'=>'ª','laquo'=>'«','not'=>'¬','shy'=>"\x{00AD}",'reg'=>'®','macr'=>'¯','deg'=>'°','plusmn'=>'±','sup2'=>'²','sup3'=>'³','acute'=>'´','micro'=>'µ','para'=>'¶','midot'=>'·','cedil'=>'¸','sup1'=>'¹','ordm'=>'º','raquo'=>'»','frac14'=>'¼','frac12'=>'½','frac34'=>'¾','iquest'=>'¿','Agrave'=>'À','Aacute'=>'Á','Acirc'=>'Â','Atilde'=>'Ã','Auml'=>'Ä','Aring'=>'Å','Aelig'=>'Æ','Ccedil'=>'Ç','Egrave'=>'È','Eacute'=>'É','Ecirc'=>'Ê','Euml'=>'Ë','Igrave'=>'Ì','Iacute'=>'Í','Icirc'=>'Î','Iuml'=>'Ï','ETH'=>'Ð','Ntilde'=>'Ñ','Ograve'=>'Ò','Oacute'=>'Ó','Ocirc'=>'Ô','Otilde'=>'Õ','Ouml'=>'Ö','times'=>'×','Oslash'=>'Ø','Ugrave'=>'Ù','Uacute'=>'Ù','Ucirc'=>'Û','Uuml'=>'Ü','Yacute'=>'Ý','THORN'=>'Þ','szlig'=>'ß','agrave'=>'à','aacute'=>'á','acirc'=>'â','atilde'=>'ã','auml'=>'ä','aring'=>'å','aelig'=>'æ','ccedil'=>'ç','egrave'=>'è','eacute'=>'é','ecirc'=>'ê','euml'=>'ë','igrave'=>'ì','iacute'=>'í','icirc'=>'î','iuml'=>'ï','eth'=>'ð','ntilde'=>'ñ','ograve'=>'ò','oacute'=>'ó','ocirc'=>'ô','otilde'=>'õ','ouml'=>'ö','divide'=>'÷','oslash'=>'ø','ugrave'=>'ù','uacute'=>'ú','ucirc'=>'û','uuml'=>'ü','yacute'=>'ý','thorn'=>'þ','yuml'=>'ÿ','Oelig'=>'Œ','oelig'=>'œ','Scaron'=>'Š','scaron'=>'š','Yuml'=>'Ÿ','fnof'=>'ƒ','circ'=>'^','tilde'=>'~','Alpha'=>'Α','Beta'=>'Β','Gamma'=>'Γ','Delta'=>'Δ','Epsilon'=>'Ε','Zeta'=>'Ζ','Eta'=>'Η','Theta'=>'Θ','Iota'=>'Ι','Kappa'=>'Κ','Lambda'=>'Λ','Mu'=>'Μ','Nu'=>'Ν','Xi'=>'Ξ','Omicron'=>'Ο','Pi'=>'Π','Rho'=>'Ρ','Sigma'=>'Σ','Tau'=>'Τ','Upsilon'=>'Υ','Phi'=>'Φ','Chi'=>'Χ','Psi'=>'Ψ','Omega'=>'Ω','alpha'=>'α','beta'=>'β','gamma'=>'γ','delta'=>'δ','epsilon'=>'ε','zeta'=>'ζ','eta'=>'η','theta'=>'θ','iota'=>'ι','kappa'=>'κ','lambda'=>'λ','mu'=>'μ','nu'=>'ν','xi'=>'ξ','omicron'=>'ο','pi'=>'π','rho'=>'ρ','sigma'=>'σ','tau'=>'τ','upsilon'=>'υ','phi'=>'φ','chi'=>'χ','psi'=>'ψ','omega'=>'ω','thetasym'=>'ϑ','upsih'=>'ϒ','piv'=>'ϖ','ensp'=>"\x{2003}",'emsp'=>"\x{2004}",'thinsp'=>"\x{2009}",'zwnj'=>"\x{200c}",'zwj'=>"\x{200d}",'lrm'=>"\x{200e}",'rlm'=>"\x{200f}",'ndash'=>'–','mdash'=>'—','lsquo'=>'‘','rsquo'=>'’','sbquo'=>'‚','ldquo'=>'“','rdquo'=>'”','bdquo'=>'„','dagger'=>'†','Dagger'=>'‡','bull'=>'•','hellip'=>'…','permil'=>'‰','prime'=>'′','Prime'=>'′','lsaquo'=>'‹','rsaquo'=>'›','oline'=>'‾','frasl'=>'⁄','euro'=>'€','image'=>'ℑ','weierp'=>'℘','real'=>'ℜ','trade'=>'™','alefsym'=>'ℵ','larr'=>'←','uarr'=>'↑','rarr'=>'→','darr'=>'↓','harr'=>'↔','crarr'=>'↵','lArr'=>'⇐','uArr'=>'⇑','rArr'=>'⇒','dArr'=>'⇓','hArr'=>'⇔','forall'=>'∀','part'=>'∂','exist'=>'∃','empty'=>'∅','nabla'=>'∇','isin'=>'∈','notin'=>'∉','ni'=>'∋','prod'=>'∏','sum'=>'∑','minus'=>'−','lowast'=>'∗','radic'=>'√','prop'=>'∝','infin'=>'∞','ang'=>'∠','and'=>'∧','or'=>'∨','cap'=>'∩','cup'=>'∪','int'=>'∫','there4'=>'∴','sim'=>'∼','cong'=>'≅','asymp'=>'≃','ne'=>'≠','eq'=>'=','le'=>'≤','ge'=>'≥','sub'=>'⊂','sup'=>'⊃','nsub'=>'⊄','nsup'=>'⊅','sube'=>'⊆','supe'=>'⊇','oplus'=>'⊕','otimes'=>'⊗','perp'=>'⊥','sdot'=>'⋅','lceil'=>'⌈','rceil'=>'⌉','lfloor'=>'⌊','rfloor'=>'⌋','lang'=>'〈','rang'=>'〉','roz'=>'◊','spades'=>'♠','clubs'=>'♣','diamonds'=>'♦','hearts'=>'♥',);sub _unquote_attribute {my ($self,$name,$val)=@_;my$html_like=0;if ($name eq 'label'){$html_like=1 if$val =~ /^\s*<\s*</;if ($html_like==0 && $val =~ /\s*<(.*)>\s*\z/){$val=$1;$val=' ' if$val eq ''}}my$v=$self->_unquote($val);if ($html_like==0){$v=' ' .$v if$v =~ /^</}else {$v =~ s/^\s*//;$v =~ s/\s*\z//}$v}sub _unquote {my ($self,$name)=@_;$name='' unless defined$name;$name =~ s/^
      "((?:\\"|[^"])*)"			# "foo"
      \s*\+\s*"((?:\\"|[^"])*)"		# followed by ' + "bar"'
      /"$1$2"/x while$name =~ /^
      "(?:\\"|[^"])*"			# "foo"
      \s*\+\s*"(?:\\"|[^"])*"		# followed by ' + "bar"'
      /x;$name =~ s/&(.);/$1/g;$name =~ s/&([^;]+);/$entities{$1} || '';/eg;$name =~ s/^"\s*//;$name =~ s/\s*"\z//;$name =~ s/\\([\[\(\{\}\]\)#"])/$1/g;$name}sub _clean_line {my ($self,$line)=@_;chomp($line);$line =~ s/^\s+//;$line =~ s/\\\z//;$line}sub _line_insert {' '}sub _match_boolean {qr/(true|false|\d+)/}sub _match_comment {qr#(:[^\\]|)//#}sub _match_multi_line_comment {qr#(?:\s*/\*.*?\*/\s*)+#}sub _match_optional_multi_line_comment {qr#(?:(?:\s*/\*.*?\*/\s*)*|\s+)#}sub _match_name {qr/\s*
      (
  	# double quoted string
        "(?:\\"|[^"])*"			# "foo"
        (?:\s*\+\s*"(?:\\"|[^"])*")*	# followed by 0 or more ' + "bar"'
      |
  	# number
       -?					# optional minus sign
  	(?:				# non-capture group
  	\.[0-9]+				# .00019
  	|				 # or
  	[0-9]+(?:\.[0-9]*)?			# 123 or 123.1
  	)
      |
  	# plain node name (a-z0-9_+)
       (?!(?i:node|edge|digraph|subgraph|graph|strict)\s)[\w]+
      )/xi}sub _match_node {my$self=shift;my$qr_n=$self->_match_name();qr/
  	$qr_n				# node name (see _match_name)
  	(?:
  	  :$qr_n
  	  (?: :(n|ne|e|se|s|sw|w|nw) )?	# :port:compass_direction
  	  |
  	  :(n|ne|e|se|s|sw|w|nw)	# :compass_direction
  	  )?				# optional
      /x}sub _match_group_start {my$self=shift;my$qr_n=$self->_match_name();qr/^\s*(?:strict\s+)?(?:(?i)digraph|subgraph|graph)\s+$qr_n\s*\{/i}sub _match_pseudo_group_start_at_beginning {qr/^\s*\{/}sub _match_pseudo_group_start {qr/\s*\{/}sub _match_group_end {qr/^\s*\}\s*;?\s*/}sub _match_edge {qr/\s*(->|--)/}sub _match_html_regexps {my$qr={attribute=>qr/\s*([A-Za-z]+)\s*=\s*"((?:\\"|[^"])*)"/,attributes=>qr/(?:\s+(?:[A-Za-z]+)\s*=\s*"(?:\\"|[^"])*")*/,text=>qr/.*?/,tr=>qr/\s*<TR>/i,tr_end=>qr/\s*<\/TR>/i,td=>qr/\s*<TD[^>]*>/i,td_tag=>qr/\s*<TD\s*/i,td_end=>qr/\s*<\/TD>/i,table=>qr/\s*<TABLE[^>]*>/i,table_tag=>qr/\s*<TABLE\s*/i,table_end=>qr/\s*<\/TABLE>/i,};$qr->{row}=qr/$qr->{tr}(?:$qr->{td}$qr->{text}$qr->{td_end})*$qr->{tr_end}/;$qr}sub _match_html {my$qr=_match_html_regexps();qr/<$qr->{table}(?:$qr->{row})*$qr->{table_end}\s*>/}sub _match_single_attribute {my$qr_html=_match_html();qr/\s*(\w+)\s*=\s*		# the attribute name (label=")
      (
        "(?:\\"|[^"])*"			# "foo"
        (?:\s*\+\s*"(?:\\"|[^"])*")*	# followed by 0 or more ' + "bar"'
      |
        $qr_html				# or < <TABLE>..<\/TABLE> >
      |
        <[^>]*>				# or something like < a >
      |
        [^<][^,\]\}\n\s;]*		# or simple 'fooobar'
      )
      [,\]\n\}\s;]?\s*/x}sub _match_special_attribute {qr/\s*(
    center|
    compound|
    concentrate|
    constraint|
    decorate|
    diredgeconstraints|
    fixedsize|
    headclip|
    labelfloat|
    landscape|
    mosek|
    nojustify|
    normalize|
    overlap|
    pack|
    pin|
    regular|
    remincross|
    root|
    splines|
    tailclip|
    truecolor
    )[,;\s]?\s*/x}sub _match_attributes {my$qr_att=_match_single_attribute();my$qr_satt=_match_special_attribute();my$qr_cmt=_match_multi_line_comment();qr/\s*\[\s*((?:$qr_att|$qr_satt|$qr_cmt)*)\s*\];?/}sub _match_graph_attribute {qr/^\s*(\w+\s*=\s*("[^"]+"|[^;\n\s]+))([;\n\s]\s*|\z)/}sub _match_optional_attributes {my$qr_att=_match_single_attribute();my$qr_satt=_match_special_attribute();my$qr_cmt=_match_multi_line_comment();qr/\s*(\[\s*((?:$qr_att|$qr_satt|$qr_cmt)*)\s*\])?;?/}sub _clean_attributes {my ($self,$text)=@_;$text =~ s/^\s*\[\s*//;$text =~ s/\s*;?\s*\]\s*\z//;$text}sub _new_scope {my ($self,$is_group)=@_;my$scope={};if (@{$self->{scope_stack}}> 0){my$old_scope=$self->{scope_stack}->[-1];for my$t (sort keys %$old_scope){next if$t =~ /^_/;my$s=$old_scope->{$t};$scope->{$t}={}unless ref$scope->{$t};my$sc=$scope->{$t};for my$k (sort keys %$s){$sc->{$k}=$s->{$k}unless$k =~ /^_/}}}$scope->{_is_group}=1 if defined$is_group;push @{$self->{scope_stack}},$scope;$scope}sub _add_group_match {my$self=shift;my$qr_pseudo_group_start=$self->_match_pseudo_group_start_at_beginning();my$qr_group_start=$self->_match_group_start();my$qr_group_end=$self->_match_group_end();my$qr_edge=$self->_match_edge();my$qr_ocmt=$self->_match_optional_multi_line_comment();$self->_register_handler($qr_group_start,sub {my$self=shift;my$graph=$self->{_graph};my$gn=$self->_unquote($1);print STDERR "# Parser: found subcluster '$gn'\n" if$self->{debug};push @{$self->{group_stack}},$self->_new_group($gn);$self->_new_scope(1);1});$self->_register_handler($qr_pseudo_group_start,sub {my$self=shift;print STDERR "# Parser: Creating new scope\n" if$self->{debug};$self->_new_scope();$self->{left_edge}=undef;$self->{left_stack}=[];1});$self->_register_handler(qr/$qr_group_end$qr_ocmt$qr_edge/,sub {my$self=shift;my$scope=pop @{$self->{scope_stack}};return$self->parse_error(0)if!defined$scope;if ($scope->{_is_group}&& @{$self->{group_stack}}){print STDERR "# Parser: end subcluster '$self->{group_stack}->[-1]->{name}'\n" if$self->{debug};pop @{$self->{group_stack}}}else {print STDERR "# Parser: end scope\n" if$self->{debug}}1},sub {my ($self,$line)=@_;$line =~ qr/$qr_group_end$qr_edge/;$1 .' '});$self->_register_handler($qr_group_end,sub {my$self=shift;my$scope=pop @{$self->{scope_stack}};return$self->parse_error(0)if!defined$scope;if ($scope->{_is_group}&& @{$self->{group_stack}}){print STDERR "# Parser: end subcluster '$self->{group_stack}->[-1]->{name}'\n" if$self->{debug};pop @{$self->{group_stack}}}$self->{stack}=[];1})}sub _edge_style {my ($self,$ed)=@_;'solid'}sub _new_nodes {my ($self,$name,$group_stack,$att,$port,$stack)=@_;$port='' unless defined$port;my@rc=();if ($port ne ''){$name =~ s/^"//;$name =~ s/"\z//;$port =~ s/^"//;$port =~ s/"\z//;@rc=$self->_new_node ($self->{_graph},"$name:$port",$group_stack,$att,$stack);my$node=$rc[0];$node->{_graphviz_portlet}=$port;$node->{_graphviz_basename}=$name}else {@rc=$self->_new_node ($self->{_graph},$name,$group_stack,$att,$stack)}@rc}sub _build_match_stack {my$self=shift;my$qr_node=$self->_match_node();my$qr_name=$self->_match_name();my$qr_cmt=$self->_match_multi_line_comment();my$qr_ocmt=$self->_match_optional_multi_line_comment();my$qr_attr=$self->_match_attributes();my$qr_gatr=$self->_match_graph_attribute();my$qr_oatr=$self->_match_optional_attributes();my$qr_edge=$self->_match_edge();my$qr_pgr=$self->_match_pseudo_group_start();$self->_register_handler(qr/^$qr_cmt/,undef);$self->_register_handler(qr/^\s*\/\/.*/,undef);$self->_register_handler(qr/^\s*((?i)strict)?$qr_ocmt((?i)digraph|graph)$qr_ocmt$qr_node$qr_ocmt\{/,sub {my$self=shift;return$self->parse_error(6)if @{$self->{scope_stack}}> 0;$self->{_graphviz_graph_name}=$3;$self->_new_scope(1);$self->{_graph}->set_attribute('type','undirected')if lc($2)eq 'graph';1});$self->_register_handler(qr/^\s*(strict)?$qr_ocmt((?:di)?)graph$qr_ocmt\{/i,sub {my$self=shift;return$self->parse_error(6)if @{$self->{scope_stack}}> 0;$self->{_graphviz_graph_name}='unnamed';$self->_new_scope(1);$self->{_graph}->set_attribute('type','undirected')if lc($2)ne 'di';1});$self->_register_handler(qr/^\s*;/,undef);$self->_add_group_match();$self->_register_handler(qr/^\s*((?i)node|graph|edge)$qr_ocmt$qr_attr/,sub {my$self=shift;my$type=lc($1 || '');my$att=$self->_parse_attributes($2 || '',$type,NO_MULTIPLES);return undef unless defined$att;if ($type ne 'graph'){my$scope=$self->{scope_stack}->[-1];$scope->{$type}={}unless ref$scope->{$type};my$s=$scope->{$type};for my$k (sort keys %$att){$s->{$k}=$att->{$k}}}else {my$graph=$self->{_graph};$graph->set_attributes ($type,$att)}$self->{stack}=[];$self->{left_edge}=undef;$self->{left_stack}=[];1});$self->_register_attribute_handler($qr_gatr,'parent');$self->_register_attribute_handler($qr_attr);$self->_register_handler(qr/^$qr_edge$qr_ocmt$qr_pgr/,sub {my$self=shift;return if @{$self->{stack}}==0;my$graph=$self->{_graph};my$eg=$1;my$edge_un=0;$edge_un=1 if$eg eq '--';my$scope=$self->{scope_stack}->[-1]|| {};my$edge_atr=$scope->{edge}|| {};$self->_new_scope();$self->{left_edge}=['solid','',$edge_atr,0,$edge_un ];$self->{left_stack}=$self->{stack};$self->{stack}=[];1});$self->_register_handler(qr/^$qr_node/,sub {my$self=shift;my$graph=$self->{_graph};return if exists$self->{scope_stack}->[-1]->{_is_group};my$n1=$1;my$port=$2;push @{$self->{stack}},$self->_new_nodes ($n1,$self->{group_stack},{},$port,$self->{stack});if (defined$self->{left_edge}){my$e=$self->{use_class}->{edge};my ($style,$edge_label,$edge_atr,$edge_bd,$edge_un)=@{$self->{left_edge}};for my$node (@{$self->{left_stack}}){my$edge=$e->new({style=>$style,name=>$edge_label });my$scope=$self->{scope_stack}->[-1];$edge->set_attributes($scope->{edge})if$scope;my$e=$edge_atr;$e=[$edge_atr ]unless ref($e)eq 'ARRAY';for my$a (@$e){if (ref$a){$edge->set_attributes($a)}else {my$out=$self->_parse_attributes($a,$edge,NO_MULTIPLES);return undef unless defined$out;$edge->set_attributes($out)}}$edge->bidirectional(1)if$edge_bd;$edge->undirected(1)if$edge_un;$graph->add_edge ($node,$self->{stack}->[-1],$edge)}}1});$self->_register_handler(qr/^$qr_node$qr_oatr/,sub {my$self=shift;my$name=$1;my$port=$2;my$compass=$4 || '';$port .= ":$compass" if$compass;$self->{stack}=[$self->_new_nodes ($name,$self->{group_stack},{},$port)];my$node=$self->{stack}->[0];my$a1=$self->_parse_attributes($5||'',$node);return undef if$self->{error};$node->set_attributes($a1);$self->{left_edge}=undef;$self->{left_stack}=[];1});$self->_register_handler(qr/^$qr_edge$qr_ocmt$qr_node$qr_ocmt$qr_oatr/,sub {my$self=shift;return if @{$self->{stack}}==0;my$graph=$self->{_graph};my$eg=$1;my$n=$2;my$port=$3;my$compass=$4 || $5 || '';$port .= ":$compass" if$compass;my$edge_un=0;$edge_un=1 if$eg eq '--';my$scope=$self->{scope_stack}->[-1]|| {};my$edge_atr=[$6||'',$scope->{edge}|| {}];my$nodes_b=[$self->_new_nodes ($n,$self->{group_stack},{},$port)];my$style=$self->_link_lists($self->{stack},$nodes_b,'--','',$edge_atr,0,$edge_un);$self->{left_edge}=[$style,'',$edge_atr,0,$edge_un ];$self->{left_stack}=$self->{stack};$self->{stack}=$nodes_b;1});$self}sub _add_node {my ($self,$graph,$name)=@_;my@groups=$graph->groups();for my$g (@groups){return$g if$g->{name}eq $name}my$node=$graph->node($name);if (!defined$node){$node=$graph->add_node($name);my$scope=$self->{scope_stack}->[-1];return$self->error("Scope stack is empty!")unless defined$scope;my$is_group=$scope->{_is_group};delete$scope->{_is_group};$node->set_attributes($scope->{node});$scope->{_is_group}=$is_group if$is_group}$node}my$remap={'node'=>{'distortion'=>'x-dot-distortion','fixedsize'=>undef,'group'=>'x-dot-group','height'=>'x-dot-height','dir'=>undef,'layer'=>'x-dot-layer','margin'=>'x-dot-margin','orientation'=>\&_from_graphviz_node_orientation,'peripheries'=>\&_from_graphviz_node_peripheries,'pin'=>'x-dot-pin','pos'=>'x-dot-pos','rects'=>'x-dot-rects','regular'=>'x-dot-regular','sides'=>'x-dot-sides','shapefile'=>'x-dot-shapefile','shape'=>\&_from_graphviz_node_shape,'skew'=>'x-dot-skew','style'=>\&_from_graphviz_style,'width'=>'x-dot-width','z'=>'x-dot-z',},'edge'=>{'arrowsize'=>'x-dot-arrowsize','arrowhead'=>\&_from_graphviz_arrow_style,'arrowtail'=>'x-dot-arrowtail','color'=>\&_from_graphviz_edge_color,'constraint'=>'x-dot-constraint','dir'=>\&_from_graphviz_edge_dir,'decorate'=>'x-dot-decorate','f'=>'x-dot-f','headclip'=>'x-dot-headclip','headhref'=>'headlink','headurl'=>'headlink','headport'=>\&_from_graphviz_headport,'headlabel'=>'headlabel','headtarget'=>'x-dot-headtarget','headtooltip'=>'headtitle','labelangle'=>'x-dot-labelangle','labeldistance'=>'x-dot-labeldistance','labelfloat'=>'x-dot-labelfloat','labelfontcolor'=>\&_from_graphviz_color,'labelfontname'=>'font','labelfontsize'=>'font-size','layer'=>'x-dot-layer','len'=>'x-dot-len','lhead'=>'x-dot-lhead','ltail'=>'x-dot-tail','minlen'=>\&_from_graphviz_edge_minlen,'pos'=>'x-dot-pos','samehead'=>'x-dot-samehead','samearrowhead'=>'x-dot-samearrowhead','sametail'=>'x-dot-sametail','style'=>\&_from_graphviz_edge_style,'tailclip'=>'x-dot-tailclip','tailhref'=>'taillink','tailurl'=>'taillink','tailport'=>\&_from_graphviz_tailport,'taillabel'=>'taillabel','tailtarget'=>'x-dot-tailtarget','tailtooltip'=>'tailtitle','weight'=>'x-dot-weight',},'graph'=>{'damping'=>'x-dot-damping','K'=>'x-dot-k','bb'=>'x-dot-bb','center'=>'x-dot-center','charset'=>undef,'clusterrank'=>'x-dot-clusterrank','compound'=>'x-dot-compound','concentrate'=>'x-dot-concentrate','defaultdist'=>'x-dot-defaultdist','dim'=>'x-dot-dim','dpi'=>'x-dot-dpi','epsilon'=>'x-dot-epsilon','esep'=>'x-dot-esep','fontpath'=>'x-dot-fontpath','labeljust'=>\&_from_graphviz_graph_labeljust,'labelloc'=>\&_from_graphviz_labelloc,'landscape'=>'x-dot-landscape','layers'=>'x-dot-layers','layersep'=>'x-dot-layersep','levelsgap'=>'x-dot-levelsgap','margin'=>'x-dot-margin','maxiter'=>'x-dot-maxiter','mclimit'=>'x-dot-mclimit','mindist'=>'x-dot-mindist','minquit'=>'x-dot-minquit','mode'=>'x-dot-mode','model'=>'x-dot-model','nodesep'=>'x-dot-nodesep','normalize'=>'x-dot-normalize','nslimit'=>'x-dot-nslimit','nslimit1'=>'x-dot-nslimit1','ordering'=>'x-dot-ordering','orientation'=>'x-dot-orientation','output'=>'output','outputorder'=>'x-dot-outputorder','overlap'=>'x-dot-overlap','pack'=>'x-dot-pack','packmode'=>'x-dot-packmode','page'=>'x-dot-page','pagedir'=>'x-dot-pagedir','pencolor'=>\&_from_graphviz_color,'quantum'=>'x-dot-quantum','rankdir'=>\&_from_graphviz_graph_rankdir,'ranksep'=>'x-dot-ranksep','ratio'=>'x-dot-ratio','remincross'=>'x-dot-remincross','resolution'=>'x-dot-resolution','rotate'=>'x-dot-rotate','samplepoints'=>'x-dot-samplepoints','searchsize'=>'x-dot-searchsize','sep'=>'x-dot-sep','size'=>'x-dot-size','splines'=>'x-dot-splines','start'=>'x-dot-start','style'=>\&_from_graphviz_style,'stylesheet'=>'x-dot-stylesheet','truecolor'=>'x-dot-truecolor','viewport'=>'x-dot-viewport','voro-margin'=>'x-dot-voro-margin',},'group'=>{'labeljust'=>\&_from_graphviz_graph_labeljust,'labelloc'=>\&_from_graphviz_labelloc,'pencolor'=>\&_from_graphviz_color,'style'=>\&_from_graphviz_style,'K'=>'x-dot-k',},'all'=>{'color'=>\&_from_graphviz_color,'colorscheme'=>'x-colorscheme','bgcolor'=>\&_from_graphviz_color,'fillcolor'=>\&_from_graphviz_color,'fontsize'=>\&_from_graphviz_font_size,'fontcolor'=>\&_from_graphviz_color,'fontname'=>'font','lp'=>'x-dot-lp','nojustify'=>'x-dot-nojustify','rank'=>'x-dot-rank','showboxes'=>'x-dot-showboxes','target'=>'x-dot-target','tooltip'=>'title','URL'=>'link','href'=>'link',},};sub _remap {$remap}my$rankdir={'LR'=>'east','RL'=>'west','TB'=>'south','BT'=>'north',};sub _from_graphviz_graph_rankdir {my ($self,$name,$dir,$object)=@_;my$d=$rankdir->{$dir}|| 'east';('flow',$d)}my$shapes={box=>'rect',polygon=>'rect',egg=>'rect',rectangle=>'rect',mdiamond=>'diamond',msquare=>'rect',plaintext=>'none',none=>'none',};sub _from_graphviz_node_shape {my ($self,$name,$shape)=@_;my@rc;my$s=lc($shape);if ($s =~ /^(triple|double)/){$s =~ s/^(triple|double)//;push@rc,('border-style','double')}$s=$shapes->{$s}|| $s;(@rc,$name,$s)}sub _from_graphviz_style {my ($self,$name,$style,$class)=@_;my@styles=split /\s*,\s*/,$style;my$is_node=0;$is_node=1 if ref($class)&&!$class->isa('Graph::Easy::Group');$is_node=1 if!ref($class)&& defined$class && $class eq 'node';my@rc;for my$s (@styles){@rc=('shape','rounded')if$s eq 'rounded';@rc=('shape','invisible')if$s eq 'invis';@rc=('border','black ' .$1)if$s =~ /^(bold|dotted|dashed)\z/;if ($is_node!=0){@rc=('shape','rect')if$s eq 'filled'}if ($s =~ /setlinewidth\((\d+|\d*\.\d+)\)/){my$width=abs($1 || 1);my$style='';$style='wide';$style='solid' if$width < 3;$style='bold' if$width >= 3 && $width < 5;$style='broad' if$width >= 5 && $width < 11;push@rc,('borderstyle',$style)}}@rc}sub _from_graphviz_node_orientation {my ($self,$name,$o)=@_;my$r=int($o);return (undef,undef)if$r==0;('rotate',$r)}my$port_remap={n=>'north',e=>'east',w=>'west',s=>'south',};sub _from_graphviz_headport {my ($self,$name,$compass)=@_;my$c=$port_remap->{substr(lc($compass),0,1)}|| 'east';('end',$c)}sub _from_graphviz_tailport {my ($self,$name,$compass)=@_;my$c=$port_remap->{substr(lc($compass),0,1)}|| 'east';('start',$c)}sub _from_graphviz_node_peripheries {my ($self,$name,$cnt)=@_;return (undef,undef)if$cnt < 2;('border-style','double')}sub _from_graphviz_edge_minlen {my ($self,$name,$len)=@_;$len=$len * 2 - 1;($name,$len)}sub _from_graphviz_font_size {my ($self,$f,$size)=@_;$size=$size .'px' if$size =~ /^\d+(\.\d+)?\z/;('fontsize',$size)}sub _from_graphviz_labelloc {my ($self,$name,$loc)=@_;my$l='top';$l='bottom' if$loc =~ /^b/;('labelpos',$l)}sub _from_graphviz_edge_dir {my ($self,$name,$dir,$edge)=@_;if (ref($edge)){$edge->flip()if$dir eq 'back';$edge->bidirectional(1)if$dir eq 'both';$edge->undirected(1)if$dir eq 'none'}(undef,undef)}sub _from_graphviz_edge_style {my ($self,$name,$style,$object)=@_;$style='invisible' if$style eq 'invis';$style='solid' if$style eq 'normal';if ($style =~ /setlinewidth\((\d+|\d*\.\d+)\)/){my$width=abs($1 || 1);$style='wide';$style='solid' if$width < 3;$style='bold' if$width >= 3 && $width < 5;$style='broad' if$width >= 5 && $width < 11}($name,$style)}sub _from_graphviz_arrow_style {my ($self,$name,$shape,$object)=@_;my$style='open';$style='closed' if$shape =~ /^(empty|onormal)\z/;$style='filled' if$shape eq 'normal' || $shape eq 'normalnormal';$style='open' if$shape eq 'vee' || $shape eq 'veevee';$style='none' if$shape eq 'none' || $shape eq 'nonenone';('arrow-style',$style)}my$color_atr_map={fontcolor=>'color',bgcolor=>'background',fillcolor=>'fill',pencolor=>'bordercolor',labelfontcolor=>'labelcolor',color=>'color',};sub _from_graphviz_color {my ($self,$name,$color)=@_;$color =~ s/^\/\///;my$colorscheme='x11';if ($color =~ /^\//){$color =~ s/^\/([^\/]+)\///;$colorscheme=$1;$color=Graph::Easy->color_value($color,$colorscheme)|| 'black'}$color =~ s/\s+//g if$color =~ /^#/;$color =~ s/\s+/,/g if$color =~ /\s/;$color='hsv(' .$color .')' if$color =~ /,/;($color_atr_map->{$name},$color)}sub _from_graphviz_edge_color {my ($self,$name,$color)=@_;my@colors=split /:/,$color;for my$c (@colors){$c=Graph::Easy::Parser::Graphviz::_from_graphviz_color($self,$name,$c)}my@rc;if (@colors > 1){push@rc,'style','double'}(@rc,$color_atr_map->{$name},$colors[0])}sub _from_graphviz_graph_labeljust {my ($self,$name,$l)=@_;my$a='center';$a='left' if$l eq 'l';$a='right' if$l eq 'r';('align',$a)}sub _remap_attributes {my ($self,$att,$object,$r)=@_;if ($self->{debug}){my$o='';$o=" for $object" if$object;print STDERR "# remapping attributes '$att'$o\n";require Data::Dumper;print STDERR "#",Data::Dumper::Dumper($att),"\n"}$r=$self->_remap()unless defined$r;$self->{_graph}->_remap_attributes($object,$att,$r,'noquote',undef,undef)}my$html_remap={'table'=>{'align'=>'align','balign'=>undef,'bgcolor'=>'fill','border'=>'border','cellborder'=>'border','cellspacing'=>undef,'cellpadding'=>undef,'fixedsize'=>undef,'height'=>undef,'href'=>'link','port'=>undef,'target'=>undef,'title'=>'title','tooltip'=>'title','valign'=>undef,'width'=>undef,},'td'=>{'align'=>'align','balign'=>undef,'bgcolor'=>'fill','border'=>'border','cellspacing'=>undef,'cellpadding'=>undef,'colspan'=>'columns','fixedsize'=>undef,'height'=>undef,'href'=>'link','port'=>undef,'rowspan'=>'rows','target'=>undef,'title'=>'title','tooltip'=>'title','valign'=>undef,'width'=>undef,},};sub _parse_html_attributes {my ($self,$text,$qr,$tag)=@_;$text =~ s/^$qr->{td_tag}//;$text =~ s/\s*>\z//;my$attr={};while ($text ne ''){return$self->error("HTML-like attribute '$text' doesn't look valid to me.")unless$text =~ s/^($qr->{attribute})//;my$name=lc($2);my$value=$3;$self->_unquote($value);$value=lc($value)if$name eq 'align';$self->error ("Unknown attribute '$name' in HTML-like label")unless exists$html_remap->{$tag}->{$name};$attr->{$name}=$value if defined$html_remap->{$tag}->{$name}}$attr}sub _html_per_table {my ($self,$attributes)=@_;$self->_remap_attributes($attributes,'table',$html_remap)}sub _html_per_node {my ($self,$attr,$node)=@_;my$c=$attr->{colspan}|| 1;$node->set_attribute('columns',$c)if$c!=1;my$r=$attr->{rowspan}|| 1;$node->set_attribute('rows',$r)if$r!=1;$node->{autosplit_portname}=$attr->{port}if exists$attr->{port};for my$k (qw/port colspan rowspan/){delete$attr->{$k}}my$att=$self->_remap_attributes($attr,$node,$html_remap);$node->set_attributes($att);$self}sub _parse_html {my ($self,$n,$qr)=@_;my$graph=$self->{_graph};my$label=$n->label(1);$label='' unless defined$label;my$org_label=$label;$label =~ s/^<\s*//;$label =~ s/\s*>\z//;$label =~ s/$qr->{table_end}\s*\z//;$label =~ s/($qr->{table})//;my$table_tag=$1 || '';$table_tag =~ /$qr->{table_tag}(.*?)>/;my$table_attr=$self->_parse_html_attributes($1 || '',$qr,'table');my$base_name=$n->{name};my$class=$self->{use_class}->{node};my$raw_attributes=$n->raw_attributes();delete$raw_attributes->{label};delete$raw_attributes->{shape};my@rc;my$first_in_row;my$x=0;my$y=0;my$idx=0;while ($label ne ''){$label =~ s/^\s*($qr->{row})//;return$self->error ("Cannot parse HTML-like label: '$label'")unless defined $1;my$row=$1;$row =~ s/^\s*$qr->{tr}\s*//;$row =~ s/\s*$qr->{tr_end}\s*\z//;my$first=1;while ($row ne ''){$row =~ s/^($qr->{td})($qr->{text})$qr->{td_end}//;return$self->error ("Cannot parse HTML-like row: '$row'")unless defined $1;my$node_label=$2;my$attr_txt=$1;$node_label =~ s/<BR\s*\/?>/\\n/gi;my$font_face=undef;if ($node_label =~ /^[ ]*<FONT FACE="([^"]+)">(.*)<\/FONT>[ ]*\z/i){$node_label=$2;$font_face=$1}$node_label =~ s/<FONT[^>]+>(.*)<\/FONT>/$1/ig;my$node_name=$base_name .'.' .$idx;my$node=$graph->node($node_name);if (!defined$node){$node=$class->new($node_name);$graph->add_node($node);$node->set_attributes($raw_attributes);$node->{autosplit_portname}=$idx}$node->set_attributes($table_attr);$node->set_attribute('font',$font_face)if defined$font_face;$self->_html_per_node($self->_parse_html_attributes($attr_txt,$qr,'td'),$node);$node->{autosplit_label}=$node_label;$node->{autosplit_basename}=$base_name;push@rc,$node;if (@rc==1){$node->{autosplit}=$org_label;$node->{autosplit}=~ s/\s+\z//;$node->{autosplit}=~ s/^\s+//;$first_in_row=$node}else {my ($sx,$sy)=(1,0);my$origin=$rc[-2];if ($first==1){($sx,$sy)=(0,1);$origin=$first_in_row;$first_in_row=$node;$first=0}$node->relative_to($origin,$sx,$sy);$node->{autosplit}=undef}$node->{autosplit_xy}="$x,$y";$idx++;$x++}$y++}@rc}sub _parser_cleanup {my ($self)=@_;print STDERR "# Parser cleanup pass\n" if$self->{debug};my$g=$self->{_graph};my@nodes=$g->nodes();my$delete={};my$html_regexps=$self->_match_html_regexps();my$graph_flow=$g->attribute('flow');for my$n (@nodes){my$label=$n->label(1);my$shape=$n->{att}->{shape}|| 'rect';if ($shape ne 'record' && $label =~ /^<\s*<.*>\z/){print STDERR "# HTML-like label found: $label\n" if$self->{debug};my@nodes=$self->_parse_html($n,$html_regexps);$delete->{$n->{name}}=undef;my@edges=$n->edges();for my$e (@edges){$e->start_at($nodes[0])if ($e->{from}==$n);$e->end_at($nodes[0])if ($e->{to}==$n)}$g->del_node($n);next}if ($shape eq 'record' && $label =~ /\|/){my$att={};$att->{basename}=$n->{name};if ($n->{name}ne $label){$att->{basename}=$n->{name}}if ($label =~ /^\s*\{[^\{\}]+\}\s*\z/){$label =~ s/[\{\}]//g;$label =~ s/\|/\|\|  /g if ($graph_flow =~ /^(east|west)/);$label =~ s/\|\|/\|  \|/g if ($graph_flow =~ /^(north|south)/)}my@rc=$self->_autosplit_node($g,$label,$att,0);my$group=$n->group();$n->del_attribute('label');my$qr_clean=$self->{_qr_part_clean};$rc[0]->{autosplit}=~ s/(^|\|)$qr_clean/$1/g;$rc[0]->{att}->{basename}=~ s/(^|\|)$qr_clean/$1/g;$rc[0]->{autosplit}=~ s/^\s*//;$rc[0]->{att}->{basename}=~ s/^\s*//;$rc[0]->{autosplit}=~ s/\|\s\|/\|  \|/g;$rc[0]->{att}->{basename}=~ s/\|\s\|/\|  \|/g;$rc[0]->{autosplit}=~ s/\|\s\|/\|  \|/g;$rc[0]->{att}->{basename}=~ s/\|\s\|/\|  \|/g;delete$rc[0]->{att}->{basename}if$rc[0]->{att}->{basename}eq $rc[0]->{autosplit};for my$n1 (@rc){$n1->add_to_group($group)if$group;$n1->set_attributes($n->{att});$n1->del_attribute('shape')}for my$e (ord_values($n->{edges})){$e->start_at($rc[0])if$e->{from}==$n;$e->end_at($rc[0])if$e->{to}==$n}$delete->{$n->{name}}=undef;$g->del_node($n)}}my$node_cache={};my@edges=$g->edges();@nodes=$g->nodes();for my$e (@edges){for my$side ('from','to'){my$n=$e->{$side};next unless defined$n->{_graphviz_portlet};my$port=$n->{_graphviz_portlet};my$base=$n->{_graphviz_basename};my$compass='';if ($port =~ s/:(n|ne|e|se|s|sw|w|nw)\z//){$compass=$1}my$node=$node_cache->{"$base:$port"};my$p=undef;if (!defined$node){for my$na (@nodes){next unless exists$na->{autosplit_portname}&& exists$na->{autosplit_basename};next unless$na->{autosplit_basename}eq $base;next unless$na->{autosplit_portname}eq $port;$node_cache->{"$base:$port"}=$na;$node=$na;$p=$port_remap->{substr($compass,0,1)}if$compass}}if (!defined$node){if ($port =~ /^(n|ne|e|se|s|sw|w|nw)\z/){for my$na (@nodes){next unless exists$na->{autosplit_basename};next unless$na->{autosplit_basename}eq $base;$node_cache->{"$base:$port"}=$na;$node=$na}if (!defined$node){return$self->error("Cannot find autosplit node for $base:$port on edge $e->{id}")}$p=$port_remap->{substr($port,0,1)}}else {return$self->error("Cannot find autosplit node for $base:$port on edge $e->{id}")}}if ($side eq 'from'){$delete->{$e->{from}->{name}}=undef;print STDERR "# Setting new edge start point to $node->{name}\n" if$self->{debug};$e->start_at($node);print STDERR "# Setting new edge end point to start at $p\n" if$self->{debug}&& $p;$e->set_attribute('start',$p)if$p}else {$delete->{$e->{to}->{name}}=undef;print STDERR "# Setting new edge end point to $node->{name}\n" if$self->{debug};$e->end_at($node);print STDERR "# Setting new edge end point to end at $p\n" if$self->{debug}&& $p;$e->set_attribute('end',$p)if$p}}}for my$n (@nodes){next unless exists$n->{_graphviz_portlet};my$name=$n->{name};$name =~ s/:.*?\z//;$g->add_node($name)unless exists$delete->{$name};$g->del_node($n)}$g->set_attribute('title',$self->{_graphviz_graph_name})unless defined$g->raw_attribute('title');if ($g->groups()==0){$g->del_attribute('group','align');$g->del_attribute('group','fill')}$g->{_warn_on_unknown_attributes}=0;$self}1;
GRAPH_EASY_PARSER_GRAPHVIZ

$fatpacked{"Graph/Easy/Parser/VCG.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_PARSER_VCG';
  package Graph::Easy::Parser::VCG;$VERSION='0.76';use Graph::Easy::Parser::Graphviz;@ISA=qw/Graph::Easy::Parser::Graphviz/;use strict;use warnings;use utf8;use constant NO_MULTIPLES=>1;use Encode qw/decode/;sub _init {my$self=shift;$self->SUPER::_init(@_);$self->{attr_sep}='=';$self}my$vcg_color_by_name={};my$vcg_colors=[white=>'white',blue=>'blue',red=>'red',green=>'green',yellow=>'yellow',magenta=>'magenta',cyan=>'cyan',darkgrey=>'rgb(85,85,85)',darkblue=>'rgb(0,0,128)',darkred=>'rgb(128,0,0)',darkgreen=>'rgb(0,128,0)',darkyellow=>'rgb(128,128,0)',darkmagenta=>'rgb(128,0,128)',darkcyan=>'rgb(0,128,128)',gold=>'rgb(255,215,0)',lightgrey=>'rgb(170,170,170)',lightblue=>'rgb(128,128,255)',lightred=>'rgb(255,128,128)',lightgreen=>'rgb(128,255,128)',lightyellow=>'rgb(255,255,128)',lightmagenta=>'rgb(255,128,255)',lightcyan=>'rgb(128,255,255)',lilac=>'rgb(238,130,238)',turquoise=>'rgb(64,224,208)',aquamarine=>'rgb(127,255,212)',khaki=>'rgb(240,230,140)',purple=>'rgb(160,32,240)',yellowgreen=>'rgb(154,205,50)',pink=>'rgb(255,192,203)',orange=>'rgb(255,165,0)',orchid=>'rgb(218,112,214)',black=>'black',];{for (my$i=0;$i < @$vcg_colors;$i+=2){$vcg_color_by_name->{$vcg_colors->[$i]}=$vcg_colors->[$i+1]}}sub reset {my$self=shift;Graph::Easy::Parser::reset($self,@_);my$g=$self->{_graph};$self->{scope_stack}=[];$g->{_vcg_color_map}=[];for (my$i=0;$i < @$vcg_colors;$i+=2){push @{$g->{_vcg_color_map}},$vcg_colors->[$i+1]}$g->{_vcg_class_names}={};$g->_allow_special_attributes({edge=>{source=>["",undef,'','',undef,],target=>["",undef,'','',undef,],},});$g->{_warn_on_unknown_attributes}=1;$self->{_in_vcg_multi_line_label}=0;$g->set_attribute('flow','south');$g->set_attribute('edge','arrow-style','filled');$g->set_attribute('node','align','left');$self}sub _vcg_color_map_entry {my ($self,$index,$color)=@_;$color =~ /([0-9]+)\s+([0-9]+)\s+([0-9]+)/;$self->{_graph}->{_vcg_color_map}->[$index]="rgb($1,$2,$3)"}sub _unquote {my ($self,$name)=@_;$name='' unless defined$name;$name =~ s/^"[ ]*//;$name =~ s/[ ]*"\z//;$name =~ s/\\([\[\(\{\}\]\)#"])/$1/g;$name}sub _match_commented_line {qr/^\s*\z/}sub _match_multi_line_comment {qr#^\s*/\*.*?\*/\s*#}sub _match_optional_multi_line_comment {qr#(?:(?:\s*/\*.*?\*/\s*)*|\s+)#}sub _match_classname {my$self=shift;qr/^\s*classname\s([0-9]+)\s*:\s*"((\\"|[^"])*)"/}sub _match_node {my$self=shift;my$attr=$self->_match_attributes();qr/^\s*node:\s*$attr/}sub _match_edge {my$self=shift;my$attr=$self->_match_attributes();qr/^\s*(|near|bentnear|back)edge:\s*$attr/}sub _match_single_attribute {qr/\s*(	energetic\s\w+			# "energetic attraction" etc.
  		|
  		\w+ 				# a word
  		|
  		border\s(?:x|y)			# "border x" or "border y"
  		|
  		colorentry\s+[0-9]{1,2}		# colorentry
  	)\s*:\s*
      (
        "(?:\\"|[^"])*"				# "foo"
      |
        [0-9]{1,3}\s+[0-9]{1,3}\s+[0-9]{1,3}	# "128 128 64" for color entries
      |
        \{[^\}]+\}				# or {..}
      |
        [^<][^,\]\}\n\s;]*			# or simple 'fooobar'
      )
      \s*/x}sub _match_class_attribute {qr/\s*(edge|node)\.(\w+)\s*:\s*	# the attribute name (label:")
      (
        "(?:\\"|[^"])*"		# "foo"
      |
        [^<][^,\]\}\n\s]*		# or simple 'fooobar'
      )
      \s*/x}sub _match_attributes {my$qr_att=_match_single_attribute();my$qr_cmt=_match_multi_line_comment();qr/\s*\{\s*((?:$qr_att|$qr_cmt)*)\s*\}/}sub _match_graph_attribute {qr/^\s*(
      (
       colorentry\s+[0-9]{1,2}:\s+[0-9]+\s+[0-9]+\s+[0-9]+
       |
       (?!(node|edge|nearedge|bentnearedge|graph))	# not one of these
       \w+\s*:\s*("(?:\\"|[^"])*"|[^\n\s]+)
      )
     )([\n\s]\s*|\z)/x}sub _clean_attributes {my ($self,$text)=@_;$text =~ s/^\s*\{\s*//;$text =~ s/\s*;?\s*\}\s*\z//;$text}sub _match_group_end {qr/^\s*\}\s*/}sub _match_group_start {qr/^\s*graph:\s+\{\s*/}sub _clean_line {my ($self,$line)=@_;chomp($line);$line =~ s/^\s+//;if ($self->{_in_vcg_multi_line_label}){if ($line =~ /\"[^\"]*\z/){$self->{_in_vcg_multi_line_label}=0;$self->{match_stack}=$self->{_match_stack};delete$self->{_match_stack}}else {$line =~ s/([^\\])\"/$1\\\"/g}}elsif ($line =~ /(^|\s)label:\s+\"[^\"]*\z/){$self->{_in_vcg_multi_line_label}=1;$self->{_match_stack}=$self->{match_stack};delete$self->{match_stack}}$line}sub _line_insert {my ($self)=@_;print STDERR "in multiline\n" if$self->{_in_vcg_multi_line_label}&& $self->{debug};return '\\n' if$self->{_in_vcg_multi_line_label};' '}sub _new_scope {my ($self,$is_group)=@_;my$scope={};if (@{$self->{scope_stack}}> 0){my$old_scope=$self->{scope_stack}->[-1];for my$t (sort keys %$old_scope){next if$t =~ /^_/;my$s=$old_scope->{$t};$scope->{$t}={}unless ref$scope->{$t};my$sc=$scope->{$t};for my$k (sort keys %$s){$sc->{$k}=$s->{$k}unless$k =~ /^_/}}}$scope->{_is_group}=1 if defined$is_group;push @{$self->{scope_stack}},$scope;$scope}sub _edge_style {my ($self,$ed)=@_;'solid'}sub _build_match_stack {my$self=shift;my$qr_cn=$self->_match_classname();my$qr_node=$self->_match_node();my$qr_cmt=$self->_match_multi_line_comment();my$qr_ocmt=$self->_match_optional_multi_line_comment();my$qr_attr=$self->_match_attributes();my$qr_gatr=$self->_match_graph_attribute();my$qr_oatr=$self->_match_optional_attributes();my$qr_edge=$self->_match_edge();my$qr_class=$self->_match_class_attribute();my$qr_group_end=$self->_match_group_end();my$qr_group_start=$self->_match_group_start();$self->_register_handler($qr_group_start,sub {my$self=shift;if (@{$self->{scope_stack}}==0){print STDERR "# Parser: found main graph\n" if$self->{debug};$self->{_vcg_graph_name}='unnamed';$self->_new_scope(1)}else {print STDERR "# Parser: found subgraph\n" if$self->{debug};push @{$self->{group_stack}},$self->_new_group()}1});$self->_register_handler($qr_group_end,sub {my$self=shift;print STDERR "# Parser: found end of (sub-)graph\n" if$self->{debug};my$scope=pop @{$self->{scope_stack}};return$self->parse_error(0)if!defined$scope;1});$self->_register_handler($qr_cn,sub {my$self=shift;my$class=$1;my$name=$2;print STDERR "#  Found classname '$name' for class '$class'\n" if$self->{debug}> 1;$self->{_graph}->{_vcg_class_names}->{$class}=$name;1});$self->_register_handler($qr_node,sub {my$self=shift;my$att=$self->_parse_attributes($1 || '','node',NO_MULTIPLES);return undef unless defined$att;my$name=$att->{title};delete$att->{title};print STDERR "#  Found node with name $name\n" if$self->{debug}> 1;my$node=$self->_new_node($self->{_graph},$name,$self->{group_stack},$att,[]);my$scope=$self->{scope_stack}->[-1]|| {};$node->set_attributes ($scope->{node})if keys %{$scope->{node}}!=0;$node->set_attributes ($att)if keys %$att!=0;1});$self->_register_handler($qr_edge,sub {my$self=shift;my$type=$1 || 'edge';my$txt=$2 || '';$type="edge" if$type =~ /edge/;my$att=$self->_parse_attributes($txt,'edge',NO_MULTIPLES);return undef unless defined$att;my$from=$att->{source};delete$att->{source};my$to=$att->{target};delete$att->{target};print STDERR "#  Found edge ($type) from $from to $to\n" if$self->{debug}> 1;my$edge=$self->{_graph}->add_edge ($from,$to);my$scope=$self->{scope_stack}->[-1]|| {};$edge->set_attributes ($scope->{edge})if keys %{$scope->{edge}}!=0;$edge->set_attributes ($att)if keys %$att!=0;1});$self->_register_attribute_handler($qr_gatr,'parent');$self->_register_handler($qr_class,sub {my$self=shift;my$type=$1;my$name=$2;my$val=$3;print STDERR "#  Found color definition $type $name $val\n" if$self->{debug}> 2;my$att=$self->_remap_attributes({$name=>$val },$type,$self->_remap());my$scope=$self->{scope_stack}->[-1];$scope->{$type}={}unless ref$scope->{$type};my$s=$scope->{$type};for my$k (sort keys %$att){$s->{$k}=$att->{$k}}1});$self->_register_handler($qr_cmt,undef);$self->_register_handler(qr/^\s*\/\/.*/,undef);$self}sub _new_node {my ($self,$graph,$name,$group_stack,$att,$stack)=@_;my$node=$graph->node($name);if (!defined$node){$node=$graph->add_node($name);my$scope=$self->{scope_stack}->[-1];return$self->error("Scope stack is empty!")unless defined$scope;my$is_group=$scope->{_is_group};delete$scope->{_is_group};$node->set_attributes($scope->{node});$scope->{_is_group}=$is_group if$is_group;my$group=$self->{group_stack}->[-1];$node->add_to_group($group)if$group}$node}my$vcg_remap={'node'=>{iconfile=>'x-vcg-iconfile',info1=>'x-vcg-info1',info2=>'x-vcg-info2',info3=>'x-vcg-info3',invisible=>\&_invisible_from_vcg,importance=>'x-vcg-importance',focus=>'x-vcg-focus',margin=>'x-vcg-margin',textmode=>\&_textmode_from_vcg,textcolor=>\&_node_color_from_vcg,color=>\&_node_color_from_vcg,bordercolor=>\&_node_color_from_vcg,level=>'rank',horizontal_order=>\&_horizontal_order_from_vcg,shape=>\&_vcg_node_shape,vertical_order=>\&_vertical_order_from_vcg,},'edge'=>{anchor=>'x-vcg-anchor',right_anchor=>'x-vcg-right_anchor',left_anchor=>'x-vcg-left_anchor',arrowcolor=>'x-vcg-arrowcolor',arrowsize=>'x-vcg-arrowsize',arrowstyle=>'x-vcg-arrowstyle',backarrowcolor=>'x-vcg-backarrowcolor',backarrowsize=>'x-vcg-backarrowsize',backarrowstyle=>'x-vcg-backarrowstyle',class=>\&_edge_class_from_vcg,color=>\&_edge_color_from_vcg,horizontal_order=>'x-vcg-horizontal_order',linestyle=>'style',priority=>'x-vcg-priority',source=>'source',sourcename=>'source',target=>'target',targetname=>'target',textcolor=>\&_edge_color_from_vcg,thickness=>'x-vcg-thickness',},'graph'=>{color=>\&_node_color_from_vcg,bordercolor=>\&_node_color_from_vcg,textcolor=>\&_node_color_from_vcg,x=>'x-vcg-x',y=>'x-vcg-y',xmax=>'x-vcg-xmax',ymax=>'x-vcg-ymax',xspace=>'x-vcg-xspace',yspace=>'x-vcg-yspace',xlspace=>'x-vcg-xlspace',ylspace=>'x-vcg-ylspace',xbase=>'x-vcg-xbase',ybase=>'x-vcg-ybase',xlraster=>'x-vcg-xlraster',xraster=>'x-vcg-xraster',yraster=>'x-vcg-yraster',amax=>'x-vcg-amax',bmax=>'x-vcg-bmax',cmax=>'x-vcg-cmax',cmin=>'x-vcg-cmin',smax=>'x-vcg-smax',pmax=>'x-vcg-pmax',pmin=>'x-vcg-pmin',rmax=>'x-vcg-rmax',rmin=>'x-vcg-rmin',splines=>'x-vcg-splines',focus=>'x-vcg-focus',hidden=>'x-vcg-hidden',horizontal_order=>'x-vcg-horizontal_order',iconfile=>'x-vcg-iconfile',inport_sharing=>\&_inport_sharing_from_vcg,importance=>'x-vcg-importance',ignore_singles=>'x-vcg-ignore_singles',invisible=>'x-vcg-invisible',info1=>'x-vcg-info1',info2=>'x-vcg-info2',info3=>'x-vcg-info3',infoname1=>'x-vcg-infoname1',infoname2=>'x-vcg-infoname2',infoname3=>'x-vcg-infoname3',level=>'x-vcg-level',loc=>'x-vcg-loc',layout_algorithm=>'x-vcg-layout_algorithm',layoutalgorithm=>'x-vcg-layout_algorithm',layout_downfactor=>'x-vcg-layout_downfactor',layout_upfactor=>'x-vcg-layout_upfactor',layout_nearfactor=>'x-vcg-layout_nearfactor',linear_segments=>'x-vcg-linear_segments',margin=>'x-vcg-margin',manhattan_edges=>\&_manhattan_edges_from_vcg,near_edges=>'x-vcg-near_edges',nearedges=>'x-vcg-nearedges',node_alignment=>'x-vcg-node_alignment',port_sharing=>\&_port_sharing_from_vcg,priority_phase=>'x-vcg-priority_phase',outport_sharing=>\&_outport_sharing_from_vcg,shape=>'x-vcg-shape',smanhattan_edges=>'x-vcg-smanhattan_edges',state=>'x-vcg-state',splines=>'x-vcg-splines',splinefactor=>'x-vcg-splinefactor',spreadlevel=>'x-vcg-spreadlevel',title=>'label',textmode=>\&_textmode_from_vcg,useractioncmd1=>'x-vcg-useractioncmd1',useractioncmd2=>'x-vcg-useractioncmd2',useractioncmd3=>'x-vcg-useractioncmd3',useractioncmd4=>'x-vcg-useractioncmd4',useractionname1=>'x-vcg-useractionname1',useractionname2=>'x-vcg-useractionname2',useractionname3=>'x-vcg-useractionname3',useractionname4=>'x-vcg-useractionname4',vertical_order=>'x-vcg-vertical_order',display_edge_labels=>'x-vcg-display_edge_labels',edges=>'x-vcg-edges',nodes=>'x-vcg-nodes',icons=>'x-vcg-icons',iconcolors=>'x-vcg-iconcolors',view=>'x-vcg-view',subgraph_labels=>'x-vcg-subgraph_labels',arrow_mode=>'x-vcg-arrow_mode',arrowmode=>'x-vcg-arrowmode',crossing_optimization=>'x-vcg-crossing_optimization',crossing_phase2=>'x-vcg-crossing_phase2',crossing_weight=>'x-vcg-crossing_weight',equal_y_dist=>'x-vcg-equal_y_dist',equalydist=>'x-vcg-equalydist',finetuning=>'x-vcg-finetuning',fstraight_phase=>'x-vcg-fstraight_phase',straight_phase=>'x-vcg-straight_phase',import_sharing=>'x-vcg-import_sharing',late_edge_labels=>'x-vcg-late_edge_labels',treefactor=>'x-vcg-treefactor',orientation=>\&_orientation_from_vcg,attraction=>'x-vcg-attraction','border x'=>'x-vcg-border-x','border y'=>'x-vcg-border-y','energetic'=>'x-vcg-energetic','energetic attraction'=>'x-vcg-energetic-attraction','energetic border'=>'x-vcg-energetic-border','energetic crossing'=>'x-vcg-energetic-crossing','energetic gravity'=>'x-vcg-energetic gravity','energetic overlapping'=>'x-vcg-energetic overlapping','energetic repulsion'=>'x-vcg-energetic repulsion',fdmax=>'x-vcg-fdmax',gravity=>'x-vcg-gravity',magnetic_field1=>'x-vcg-magnetic_field1',magnetic_field2=>'x-vcg-magnetic_field2',magnetic_force1=>'x-vcg-magnetic_force1',magnetic_force2=>'x-vcg-magnetic_force2',randomfactor=>'x-vcg-randomfactor',randomimpulse=>'x-vcg-randomimpulse',randomrounds=>'x-vcg-randomrounds',repulsion=>'x-vcg-repulsion',tempfactor=>'x-vcg-tempfactor',tempmax=>'x-vcg-tempmax',tempmin=>'x-vcg-tempmin'.tempscheme=>'x-vcg-tempscheme'.temptreshold=>'x-vcg-temptreshold',dirty_edge_labels=>'x-vcg-dirty_edge_labels',fast_icons=>'x-vcg-fast_icons',},'group'=>{title=>\&_group_name_from_vcg,status=>'x-vcg-status',},'all'=>{loc=>'x-vcg-loc',folding=>'x-vcg-folding',scaling=>'x-vcg-scaling',shrink=>'x-vcg-shrink',stretch=>'x-vcg-stretch',width=>'x-vcg-width',height=>'x-vcg-height',fontname=>'font',},};{my$group=$vcg_remap->{group};my$graph=$vcg_remap->{graph};for my$k (sort keys %$graph){$group->{$k}=$graph->{$k}}}sub _remap {$vcg_remap}my$vcg_edge_color_remap={textcolor=>'labelcolor',};my$vcg_node_color_remap={textcolor=>'color',color=>'fill',};sub _vertical_order_from_vcg {my ($graph,$name,$value)=@_;my$rank=$value;$rank='1000000' if$value eq 'maxdepth';('x-vcg-vertical_order',$value,'rank',$rank)}sub _horizontal_order_from_vcg {my ($graph,$name,$value)=@_;my$rank=$value;$rank='1000000' if$value eq 'maxdepth';('x-vcg-horizontal_order',$value,'rank',$rank)}sub _invisible_from_vcg {my ($graph,$name,$value)=@_;return (undef,undef)if$value ne 'yes';('shape','invisible')}sub _manhattan_edges_from_vcg {my ($graph,$name,$value)=@_;if ($value eq 'yes'){$graph->set_attribute('edge','start','front');$graph->set_attribute('edge','end','back')}('x-vcg-' .$name,$value)}sub _textmode_from_vcg {my ($graph,$name,$align)=@_;$align =~ s/_.*//;('align',lc($align))}sub _edge_color_from_vcg {my ($graph,$name,$color)=@_;my$c=$vcg_color_by_name->{$color}|| $color;$c=$graph->{_vcg_color_map}->[$c]if$c =~ /^[0-9]+\z/ && $c < 256;($vcg_edge_color_remap->{$name}|| $name,$c)}sub _edge_class_from_vcg {my ($graph,$name,$class)=@_;$class=$graph->{_vcg_class_names}->{$class}|| ('edgeclass' .$class)if$class =~ /^[0-9]+\z/;('class',$class)}my$vcg_orientation={top_to_bottom=>'south',bottom_to_top=>'north',left_to_right=>'east',right_to_left=>'west',};sub _orientation_from_vcg {my ($graph,$name,$value)=@_;('flow',$vcg_orientation->{$value}|| 'south')}sub _port_sharing_from_vcg {my ($graph,$name,$value)=@_;$value=($value =~ /yes/i)? 'yes' : 'no';('autojoin',$value,'autosplit',$value)}sub _inport_sharing_from_vcg {my ($graph,$name,$value)=@_;$value=($value =~ /yes/i)? 'yes' : 'no';('autojoin',$value)}sub _outport_sharing_from_vcg {my ($graph,$name,$value)=@_;$value=($value =~ /yes/i)? 'yes' : 'no';('autosplit',$value)}sub _node_color_from_vcg {my ($graph,$name,$color)=@_;my$c=$vcg_color_by_name->{$color}|| $color;$c=$graph->{_vcg_color_map}->[$c]if$c =~ /^[0-9]+\z/ && $c < 256;($vcg_node_color_remap->{$name}|| $name,$c)}my$shapes={box=>'rect',rhomb=>'diamond',triangle=>'triangle',ellipse=>'ellipse',circle=>'circle',hexagon=>'hexagon',trapeze=>'trapezium',uptrapeze=>'invtrapezium',lparallelogram=>'invparallelogram',rparallelogram=>'parallelogram',};sub _vcg_node_shape {my ($self,$name,$shape)=@_;my@rc;my$s=lc($shape);$s=$shapes->{$s}|| 'rect';(@rc,$name,$s)}sub _group_name_from_vcg {my ($self,$attr,$name,$object)=@_;print STDERR "# Renaming anon group '$object->{name}' to '$name'\n" if$self->{debug}> 0;$self->rename_group($object,$name);(undef,undef)}sub _remap_attributes {my ($self,$att,$object,$r)=@_;for my$key (sort keys %$att){if ($key =~ /^colorentry\s+([0-9]{1,2})/){$self->_vcg_color_map_entry($1,$att->{$key});delete$att->{$key};next}$att->{$key}=~ s/(\x0c|\\f)i([0-9]{3})/ decode('iso-8859-1', chr($2)); /eg;$att->{$key}=~ s/(\x0c|\\f)([0-9]{2})//g;$att->{$key}=~ s/(\x0c|\\f)([0-9]{2})//g;$att->{$key}=~ s/(\x0c|\\f)-/\\c ---- \\n /g}$self->SUPER::_remap_attributes($att,$object,$r)}sub _parser_cleanup {my ($self)=@_;my$g=$self->{_graph};$g->{_warn_on_unknown_attributes}=0;delete$g->{_vcg_color_map};delete$g->{_vcg_class_names};$self}1;
GRAPH_EASY_PARSER_VCG

$fatpacked{"Graph/Easy/Util.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GRAPH_EASY_UTIL';
  package Graph::Easy::Util;use strict;use warnings;use base 'Exporter';our@EXPORT_OK=(qw(first_kv ord_values));use List::Util qw(minstr);sub first_kv {my$href=shift;my$n=minstr(keys(%$href));my$v=$href->{$n};return ($n,$v)}sub ord_values {my$href=shift;if ((!defined$href)|| (!%$href)){return (wantarray ? (): 0)}else {return (wantarray ? @{$href}{sort keys(%$href)}: scalar(keys(%$href)))}}1;
GRAPH_EASY_UTIL

$fatpacked{"Tk/AbstractCanvas.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'TK_ABSTRACTCANVAS';
  package Tk::AbstractCanvas;require Tk::Derived;require Tk::Canvas;use strict;use warnings;use utf8;use Tk;use Carp;our$VERSION='1.82';my$d8VS='H7DMAlTk';@Tk::AbstractCanvas::ISA=qw(Tk::Derived Tk::Canvas);Construct Tk::Widget 'AbstractCanvas';sub Tk::Widget::ScrlACnv {shift->Scrolled('AbstractCanvas'=>@_)}my%_can_rotate_about_center=(line=>1,polygon=>1,);my%_rotate_methods=(line=>\&_rotate_line,text=>\&_rotate_line,image=>\&_rotate_line,bitmap=>\&_rotate_line,window=>\&_rotate_line,rectangle=>\&_rotate_rect,arc=>\&_rotate_rect,grid=>\&_rotate_rect,oval=>\&_rotate_rect,polygon=>\&_rotate_poly,);use constant PI=>3.14159269;sub ClassInit {my($acnv,$mwin)=@_;$acnv->SUPER::ClassInit($mwin)}sub InitObject {my($acnv,$args)=@_;my$pdat=$acnv->privateData();$pdat->{'bbox' }=[0,0,-1,-1];$pdat->{'scale' }=1 ;$pdat->{'movex' }=0 ;$pdat->{'movey' }=0 ;$pdat->{'bboxvalid' }=1 ;$pdat->{'inverty' }=0 ;$pdat->{'rect_to_poly' }=0 ;$pdat->{'oval_to_poly' }=0 ;$pdat->{'control_nav' }=0 ;$pdat->{'control_nav_busy' }=0 ;$pdat->{'control_zoom_scale'}=-0.001;$pdat->{'control_rot_scale' }=-0.3 ;$pdat->{'control_rot_mocb' }=undef;$pdat->{'control_rot_rlcb' }=undef;$pdat->{'eventx' }=-1 ;$pdat->{'eventy' }=-1 ;$pdat->{'width' }=$acnv->width();$pdat->{'height' }=$acnv->height();$acnv->configure(-confine=>0);$acnv->ConfigSpecs('-bandColor'=>['PASSIVE','bandColor','BandColor','red' ],'-bandcolor'=>'-bandColor','-changeView'=>['CALLBACK','changeView','ChangeView',undef],'-changeview'=>'-changeView');$acnv->CanvasBind('<Configure>'=>sub {my$widt=$acnv->width();my$pwid=$pdat->{'width' };my$hite=$acnv->height();my$phit=$pdat->{'height'};if($widt!=$pwid || $hite!=$phit){my$bwid=$acnv->cget('-borderwidth');_view_area_canvas($acnv,$bwid,$bwid,$pwid - $bwid,$phit - $bwid);$pdat->{'width' }=$widt;$pdat->{'height'}=$hite;my$bbox=$pdat->{'bbox'};my$left=$acnv->canvasx($bwid);my$rite=$acnv->canvasx($widt - $bwid);my$topp=$acnv->canvasy($bwid);my$botm=$acnv->canvasy($hite - $bwid);$acnv->viewAll()if(_inside(@$bbox,$left,$topp,$rite,$botm))}});$acnv->SUPER::InitObject($args)}sub invertY {my$acnv=shift();my$pdat=$acnv->privateData();$pdat->{'inverty' }=shift()if(@_);return($pdat->{'inverty' })}sub rectToPoly {my$acnv=shift();my$pdat=$acnv->privateData();$pdat->{'rect_to_poly'}=shift()if(@_);return($pdat->{'rect_to_poly'})}sub ovalToPoly {my$acnv=shift();my$pdat=$acnv->privateData();$pdat->{'oval_to_poly'}=shift()if(@_);return($pdat->{'oval_to_poly'})}sub controlNav {my$acnv=shift();my$pdat=$acnv->privateData();if(@_){$pdat->{'control_nav'}=shift();if($pdat->{'control_nav'}){$acnv->CanvasBind('<Control-Button-1>'=>sub {if(!$pdat->{'control_nav_busy'}&& $pdat->{'eventx'}==-1 && $pdat->{'eventy'}==-1){$pdat->{'control_nav_busy'}=1;($pdat->{'eventx'},$pdat->{'eventy'})=$acnv->eventLocation();$acnv->CanvasBind('<Control-B1-Motion>'=>sub {my($evtx,$evty)=$acnv->eventLocation();my($left,$botm,$rite,$topp)=$acnv->getView();my($cntx,$cnty)=(($left + $rite)/ 2,($botm + $topp)/ 2);for($acnv->find('all')){$acnv->rotate($_,(($pdat->{'eventx'}- $evtx)+ ($pdat->{'eventy'}- $evty))* $pdat->{'control_rot_scale'}* $pdat->{'scale'},$cntx,$cnty)}($pdat->{'eventx'},$pdat->{'eventy'})=($evtx,$evty);$pdat->{'control_rot_mocb'}->()if($pdat->{'control_rot_mocb'})});my$rcrf=sub {my($evtx,$evty)=$acnv->eventLocation();my($left,$botm,$rite,$topp)=$acnv->getView();my($cntx,$cnty)=(($left + $rite)/ 2,($botm + $topp)/ 2);for($acnv->find('all')){$acnv->rotate($_,(($pdat->{'eventx'}- $evtx)+ ($pdat->{'eventy'}- $evty))* $pdat->{'control_rot_scale'}* $pdat->{'scale'},$cntx,$cnty)}($pdat->{'eventx'},$pdat->{'eventy'})=(-1,-1);$pdat->{'control_rot_rlcb'}->()if($pdat->{'control_rot_rlcb'});$pdat->{'control_nav_busy'}=0;$acnv->CanvasBind('<Control-B1-Motion>'=>'');$acnv->CanvasBind('<Control-KeyRelease>'=>'');$acnv->CanvasBind('<ButtonRelease-1>'=>'')};$acnv->CanvasBind('<Control-KeyRelease>'=>$rcrf);$acnv->CanvasBind('<ButtonRelease-1>'=>$rcrf)}});$acnv->CanvasBind('<Control-Button-2>'=>sub {if(!$pdat->{'control_nav_busy'}&& $pdat->{'eventx'}==-1 && $pdat->{'eventy'}==-1){$pdat->{'control_nav_busy'}=1;($pdat->{'eventx'},$pdat->{'eventy'})=$acnv->eventLocation();$acnv->CanvasBind('<Control-B2-Motion>'=>sub {my($evtx,$evty)=$acnv->eventLocation();$acnv->panAbstract($pdat->{'eventx'}- $evtx,$pdat->{'eventy'}- $evty);($pdat->{'eventx'},$pdat->{'eventy'})=$acnv->eventLocation()});my$rcrf=sub {my($evtx,$evty)=$acnv->eventLocation();$acnv->panAbstract($pdat->{'eventx'}- $evtx,$pdat->{'eventy'}- $evty);($pdat->{'eventx'},$pdat->{'eventy'})=(-1,-1);$pdat->{'control_nav_busy'}=0;$acnv->CanvasBind('<Control-B2-Motion>'=>'');$acnv->CanvasBind('<Control-KeyRelease>'=>'');$acnv->CanvasBind('<ButtonRelease-2>'=>'')};$acnv->CanvasBind('<Control-KeyRelease>'=>$rcrf);$acnv->CanvasBind('<ButtonRelease-2>'=>$rcrf)}});$acnv->CanvasBind('<Control-Button-3>'=>sub {if(!$pdat->{'control_nav_busy'}&& $pdat->{'eventx'}==-1 && $pdat->{'eventy'}==-1){$pdat->{'control_nav_busy'}=1;($pdat->{'eventx'},$pdat->{'eventy'})=$acnv->eventLocation();$acnv->CanvasBind('<Control-B3-Motion>'=>sub {my($evtx,$evty)=$acnv->eventLocation();$acnv->zoom(1.0 + (($pdat->{'eventx'}- $evtx)+ ($pdat->{'eventy'}- $evty))* $pdat->{'control_zoom_scale'}* $pdat->{'scale'});($pdat->{'eventx'},$pdat->{'eventy'})=($evtx,$evty)});my$rcrf=sub {my($evtx,$evty)=$acnv->eventLocation();$acnv->zoom(1.0 + (($pdat->{'eventx'}- $evtx)+ ($pdat->{'eventy'}- $evty))* $pdat->{'control_zoom_scale'}* $pdat->{'scale'});($pdat->{'eventx'},$pdat->{'eventy'})=(-1,-1);$pdat->{'control_nav_busy'}=0;$acnv->CanvasBind('<Control-B3-Motion>'=>'');$acnv->CanvasBind('<Control-KeyRelease>'=>'');$acnv->CanvasBind('<ButtonRelease-3>'=>'')};$acnv->CanvasBind('<Control-KeyRelease>'=>$rcrf);$acnv->CanvasBind('<ButtonRelease-3>'=>$rcrf)}})}else {$acnv->CanvasBind('<Control-Button-1>'=>'');$acnv->CanvasBind('<Control-Button-2>'=>'');$acnv->CanvasBind('<Control-Button-3>'=>'')}}return($pdat->{'control_nav'})}sub controlNavBusy {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'control_nav_busy' }=shift if(@_);return($pdat->{'control_nav_busy' })}sub controlZoomScale {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'control_zoom_scale'}=shift if(@_);return($pdat->{'control_zoom_scale'})}sub controlRotScale {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'control_rot_scale' }=shift if(@_);return($pdat->{'control_rot_scale' })}sub controlRotMoCB {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'control_rot_mocb' }=shift if(@_);return($pdat->{'control_rot_mocb' })}sub controlRotRlCB {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'control_rot_rlcb' }=shift if(@_);return($pdat->{'control_rot_rlcb' })}sub controlScale {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'scale' }=shift if(@_);return($pdat->{'scale' })}sub eventX {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'eventx' }=shift if(@_);return($pdat->{'eventx' })}sub eventY {my$acnv=shift;my$pdat=$acnv->privateData();$pdat->{'eventy' }=shift if(@_);return($pdat->{'eventy' })}sub rotate {my($self,$obid,$angl,$xfoc,$yfoc)=@_;croak "rotate: Must supply an angle -" unless(defined($angl));my$type=$self->type($obid);return()unless(exists($_can_rotate_about_center{$type})|| (defined($xfoc)&& defined($yfoc)));$_rotate_methods{$type}->($self,$obid,$angl,$xfoc,$yfoc)}sub _rotate_line {my($self,$obid,$angl,$xmid,$ymid)=@_;my@crds=$self->coords($obid);unless(defined($xmid)){$xmid=$crds[0]+ 0.5 * ($crds[2]- $crds[0]);$ymid=$crds[1]+ 0.5 * ($crds[3]- $crds[1])}my@newc;my$radi=PI * $angl / 180.0;my$sine=sin($radi);my$cosi=cos($radi);while(my($xcrd,$ycrd)=splice(@crds,0,2)){my$xnew=$xcrd - $xmid;my$ynew=$ycrd - $ymid;push(@newc,$xmid + ($xnew * $cosi - $ynew * $sine));push(@newc,$ymid + ($xnew * $sine + $ynew * $cosi))}$self->coords($obid,@newc)}sub _rotate_poly {my($self,$obid,$angl,$xmid,$ymid)=@_;my@crds=$self->coords($obid);($xmid,$ymid)=_get_CM(@crds)unless(defined($xmid));my@newc;my$radi=PI * $angl / 180.0;my$sine=sin($radi);my$cosi=cos($radi);while(my($xcrd,$ycrd)=splice(@crds,0,2)){my$xnew=$xcrd - $xmid;my$ynew=$ycrd - $ymid;push(@newc,$xmid + ($xnew * $cosi - $ynew * $sine));push(@newc,$ymid + ($xnew * $sine + $ynew * $cosi))}$self->coords($obid,@newc)}sub _rotate_rect {my($self,$obid,$angl,$xmid,$ymid)=@_;my@crds=$self->coords($obid);my($xomd,$yomd)=(($crds[0]+ $crds[2])/ 2,($crds[1]+ $crds[3])/ 2);($xmid,$ymid)=($xomd,$yomd)unless(defined($xmid));my@newc;my$radi=PI * $angl / 180.0;my$sine=sin($radi);my$cosi=cos($radi);my$xnew=$xomd - $xmid;my$ynew=$yomd - $ymid;my$xrmd=$xmid + ($xnew * $cosi - $ynew * $sine);my$yrmd=$ymid + ($xnew * $sine + $ynew * $cosi);while(my($xcrd,$ycrd)=splice(@crds,0,2)){push(@newc,($xcrd - $xomd)+ $xrmd,($ycrd - $yomd)+ $yrmd)}$self->coords($obid,@newc)}sub getView {my($cnvs)=@_;my$bwid=$cnvs->cget('-borderwidth');my$left=$bwid;my$rite=$cnvs->width()- $bwid;my$topp=$bwid;my$botm=$cnvs->height()- $bwid;return(abstractxy($cnvs,$left,$topp),abstractxy($cnvs,$rite,$botm))}sub xview {my$cnvs=shift();_new_bbox($cnvs)unless($cnvs->privateData->{'bboxvalid'});$cnvs->SUPER::xview(@_);$cnvs->Callback('-changeView'=>getView($cnvs))if(defined($cnvs->cget('-changeView')))}sub yview {my$cnvs=shift();_new_bbox($cnvs)unless($cnvs->privateData->{'bboxvalid'});$cnvs->SUPER::yview(@_);$cnvs->Callback('-changeView'=>getView($cnvs))if(defined($cnvs->cget('-changeView')))}sub delete {my($cnvs,@tags)=@_;my$recr=_killBand($cnvs);my$foun=0;for(@tags){if($cnvs->type($_)){$foun=1;last()}}unless($foun){_makeBand($cnvs)if($recr);return()}my$pdat=$cnvs->privateData();my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};my($cbx1,$cby1,$cbx2,$cby2)=_superBbox($cnvs,@tags);$cnvs->SUPER::delete(@tags);if(!$cnvs->type('all')){$pdat->{'bbox' }=[0,0,-1,-1];$pdat->{'movex'}=0;$pdat->{'scale' }=1 ;$pdat->{'movey'}=0}elsif(!_inside($cbx1,$cby1,$cbx2,$cby2,$pbx1,$pby1,$pbx2,$pby2)){$pdat->{'bboxvalid'}=0 }_makeBand($cnvs)if($recr)}sub _inside {my($pbx1,$pby1,$pbx2,$pby2,$cbx1,$cby1,$cbx2,$cby2)=@_;my$wmrg=0.01 * ($cbx2 - $cbx1);$wmrg=3 if($wmrg < 3);my$hmrg=0.01 * ($cby2 - $cby1);$hmrg=3 if($hmrg < 3);return($pbx1 - $wmrg > $cbx1 && $pby1 - $hmrg > $cby1 && $pbx2 + $wmrg < $cbx2 && $pby2 + $hmrg < $cby2)}sub _new_bbox {my($cnvs)=@_;my$bwid=$cnvs->cget('-borderwidth');my$pdat=$cnvs->privateData();my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};my$vwid=$cnvs->width()- 2 * $bwid;$pbx2++ if($pbx2==$pbx1);my$zumx=$vwid / abs($pbx2 - $pbx1);my$vhit=$cnvs->height()- 2 * $bwid;$pby2++ if($pby2==$pby1);my$zumy=$vhit / abs($pby2 - $pby1);my$zoom=($zumx > $zumy)? $zumx : $zumy;if($zoom > 1.01){_scale($cnvs,$cnvs->width()/ 2,$cnvs->height()/ 2,$zoom * 100)}my($cbx1,$cby1,$cbx2,$cby2)=_superBbox($cnvs,'all');$pdat->{'bbox' }=[$cbx1,$cby1,$cbx2,$cby2];$cnvs->configure('-scrollregion'=>[$cbx1,$cby1,$cbx2,$cby2]);if($zoom > 1.01){_scale($cnvs,$cnvs->width()/ 2,$cnvs->height()/ 2,1 / ($zoom * 100))}$pdat->{'bboxvalid'}=1}sub _find_box {die "!*EROR*! The number of args to _find_box must be positive and even!\n" if((@_ % 2)||!@_);my($fbx1,$fbx2,$fby1,$fby2)=($_[0],$_[0],$_[1],$_[1]);for(my$indx=2;$indx < @_;$indx += 2){$fbx1=$_[$indx ]if($_[$indx ]< $fbx1);$fbx2=$_[$indx ]if($_[$indx ]> $fbx2);$fby1=$_[$indx + 1]if($_[$indx + 1]< $fby1);$fby2=$_[$indx + 1]if($_[$indx + 1]> $fby2)}return($fbx1,$fby1,$fbx2,$fby2)}sub zoom {my($cnvs,$zoom)=@_;_new_bbox($cnvs)unless($cnvs->privateData->{'bboxvalid'});_scale($cnvs,$cnvs->width()/ 2,$cnvs->height()/ 2,$zoom);$cnvs->Callback('-changeView'=>getView($cnvs))if(defined($cnvs->cget('-changeView')))}sub _scale {my($cnvs,$xoff,$yoff,$scal)=@_;$scal=abs($scal);my$xval=$cnvs->canvasx(0)+ $xoff;my$pdat=$cnvs->privateData();my$yval=$cnvs->canvasy(0)+ $yoff;return()unless($cnvs->type('all'));$pdat->{'movex'}=($pdat->{'movex'}- $xval)* $scal + $xval;$pdat->{'movey'}=($pdat->{'movey'}- $yval)* $scal + $yval;$pdat->{'scale'}*= $scal;$cnvs->SUPER::scale('all',$xval,$yval,$scal,$scal);my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};$pbx1=($pbx1 - $xval)* $scal + $xval;$pbx2=($pbx2 - $xval)* $scal + $xval;$pby1=($pby1 - $yval)* $scal + $yval;$pby2=($pby2 - $yval)* $scal + $yval;$pdat->{'bbox'}=[$pbx1,$pby1,$pbx2,$pby2];$cnvs->configure('-scrollregion'=>[$pbx1,$pby1,$pbx2,$pby2])}sub center {my($cnvs,$xval,$yval)=@_;return()unless($cnvs->type('all'));my$pdat=$cnvs->privateData();_new_bbox($cnvs)unless($pdat->{'bboxvalid'});$xval=$xval * $pdat->{'scale'}+ $pdat->{'movex'};if($pdat->{'inverty'}){$yval=$yval * -$pdat->{'scale'}+ $pdat->{'movey'}}else {$yval=$yval * $pdat->{'scale'}+ $pdat->{'movey'}}my$xdlt=$cnvs->canvasx(0)+ $cnvs->width()/ 2 - $xval;$pdat->{'movex'}+= $xdlt;my$ydlt=$cnvs->canvasy(0)+ $cnvs->height()/ 2 - $yval;$pdat->{'movey'}+= $ydlt;$cnvs->SUPER::move('all',$xdlt,$ydlt);my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};$pbx1 += $xdlt;$pbx2 += $xdlt;$pby1 += $ydlt;$pby2 += $ydlt;$pdat->{'bbox'}=[$pbx1,$pby1,$pbx2,$pby2];$cnvs->configure('-scrollregion'=>[$pbx1,$pby1,$pbx2,$pby2]);$cnvs->Callback('-changeView'=>getView($cnvs))if(defined($cnvs->cget('-changeView')))}sub centerTags {my($cnvs,@args)=@_;my($cbx1,$cby1,$cbx2,$cby2)=bbox($cnvs,@args);return()unless(defined($cby2));center($cnvs,($cbx1 + $cbx2)/ 2.0,($cby1 + $cby2)/ 2.0)}sub panAbstract {my($cnvs,$xval,$yval)=@_;my$cnvx=abstractx($cnvs,$cnvs->width()/ 2)+ $xval;my$cnvy=abstracty($cnvs,$cnvs->height()/ 2)+ $yval;center($cnvs,$cnvx,$cnvy)}sub viewAll {my$cnvs=shift();return()unless($cnvs->type('all'));my%swch=('-border'=>0.02,@_);$swch{'-border'}=0 if($swch{'-border'}< 0);my$pdat=$cnvs->privateData();_new_bbox($cnvs)unless($pdat->{'bboxvalid'});my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};my$scal=$pdat->{'scale'};my$movx=$pdat->{'movex'};my$movy=$pdat->{'movey'};my$wnx1=($pbx1 - $movx)/ $scal;my$wnx2=($pbx2 - $movx)/ $scal;my$wny1=($pby1 - $movy)/ $scal;my$wny2=($pby2 - $movy)/ $scal;if($pdat->{'inverty'}){viewArea($cnvs,$wnx1,-$wny1,$wnx2,-$wny2,'-border'=>$swch{'-border'})}else {viewArea($cnvs,$wnx1,$wny1,$wnx2,$wny2,'-border'=>$swch{'-border'})}}sub viewArea {my($cnvs,$vwx1,$vwy1,$vwx2,$vwy2)=splice(@_,0,5);return()if(!defined($vwy2)||!$cnvs->type('all'));my%swch=('-border'=>0.02,@_);$swch{'-border'}=0 if($swch{'-border'}< 0);my$pdat=$cnvs->privateData();_new_bbox($cnvs)unless($pdat->{'bboxvalid'});($vwx1,$vwx2)=($vwx2,$vwx1)if($vwx1 > $vwx2);my$bwid=$swch{'-border'}* ($vwx2 - $vwx1);$vwx1 -= $bwid;$vwx2 += $bwid;($vwy1,$vwy2)=($vwy2,$vwy1)if($vwy1 > $vwy2);my$bhit=$swch{'-border'}* ($vwy2 - $vwy1);$vwy1 -= $bhit;$vwy2 += $bhit;my$scal=$pdat->{'scale'};my$movx=$pdat->{'movex'};my$cnvx=$cnvs->canvasx(0);my$cnx1=$vwx1 * $scal + $movx - $cnvx;my$cnx2=$vwx2 * $scal + $movx - $cnvx;my$movy=$pdat->{'movey'};my$cnvy=$cnvs->canvasy(0);my$cny1=$vwy1 * $scal + $movy - $cnvy;my$cny2=$vwy2 * $scal + $movy - $cnvy;_view_area_canvas($cnvs,$cnx1,$cny1,$cnx2,$cny2)}sub _view_area_canvas {my($cnvs,$vwx1,$vwy1,$vwx2,$vwy2)=@_;return()unless($cnvs->type('all'));my$pdat=$cnvs->privateData();_new_bbox($cnvs)unless($pdat->{'bboxvalid'});my$bwid=$cnvs->cget('-borderwidth');my$cwid=$cnvs->width();my$dltx=$cwid / 2 - ($vwx1 + $vwx2)/ 2;my$chit=$cnvs->height();my$dlty=$chit / 2 - ($vwy1 + $vwy2)/ 2;my$midx=$cnvs->canvasx(0)+ $cwid / 2;$vwx2++ if($vwx2==$vwx1);my$zumx=($cwid - 2 * $bwid)/ abs($vwx2 - $vwx1);my$midy=$cnvs->canvasy(0)+ $chit / 2;$vwy2++ if($vwy2==$vwy1);my$zumy=($chit - 2 * $bwid)/ abs($vwy2 - $vwy1);my$zoom=($zumx < $zumy)? $zumx : $zumy;if($zoom > 0.999 && $zoom < 1.001){$cnvs->SUPER::move('all',$dltx,$dlty)}else {$cnvs->SUPER::scale('all',$midx - $dltx - $dltx / ($zoom - 1),$midy - $dlty - $dlty / ($zoom - 1),$zoom,$zoom)}$pdat->{'movex'}=($pdat->{'movex'}+ $dltx - $midx)* $zoom + $midx;$pdat->{'movey'}=($pdat->{'movey'}+ $dlty - $midy)* $zoom + $midy;$pdat->{'scale'}*= $zoom;my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};$pbx1=($pbx1 + $dltx - $midx)* $zoom + $midx;$pbx2=($pbx2 + $dltx - $midx)* $zoom + $midx;$pby1=($pby1 + $dlty - $midy)* $zoom + $midy;$pby2=($pby2 + $dlty - $midy)* $zoom + $midy;$pdat->{'bbox'}=[$pbx1,$pby1,$pbx2,$pby2];$cnvs->configure('-scrollregion'=>[$pbx1,$pby1,$pbx2,$pby2]);$cnvs->Callback('-changeView'=>getView($cnvs))if(defined($cnvs->cget('-changeView')))}sub _map_coords {my$cnvs=shift();my@crds=();my$chbx=0;my$pdat=$cnvs->privateData();my$xval=1;my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};my$movx=$pdat->{'movex'};my$movy=$pdat->{'movey'};my$scal=$pdat->{'scale'};while(defined(my$argu=shift())){if($argu !~ /^[+-.]*\d/){unshift(@_,$argu);last()}else {if($xval){$argu=$argu * $scal + $movx;if($pbx2 < $pbx1){$pbx2=$pbx1=$argu;$chbx=1}if($argu < $pbx1){$pbx1=$argu;$chbx=1}if($argu > $pbx2){$pbx2=$argu;$chbx=1}$xval=0}else {if($pdat->{'inverty'}){$argu=-$argu * $scal + $movy}else {$argu=$argu * $scal + $movy}if($pby2 < $pby1){$pby2=$pby1=$argu;$chbx=1}if($argu < $pby1){$pby1=$argu;$chbx=1}if($argu > $pby2){$pby2=$argu;$chbx=1}$xval=1}push(@crds,$argu)}}if($chbx){$pdat->{'bbox'}=[$pbx1,$pby1,$pbx2,$pby2];$cnvs->configure('-scrollregion'=>[$pbx1,$pby1,$pbx2,$pby2])}return(@crds,@_)}sub find {my($cnvs,@args)=@_;my$pdat=$cnvs->privateData();if($args[0]=~ /^(closest|above|below)$/i){if(lc($args[0])eq 'closest'){return()if(@args < 3);my$scal=$pdat->{'scale' };$args[1]=$args[1]* $scal + $pdat->{'movex'};if($pdat->{'inverty'}){$args[2]=-$args[2]* $scal + $pdat->{'movey'}}else {$args[2]=$args[2]* $scal + $pdat->{'movey'}}}my$recr=_killBand($cnvs);my$foun=$cnvs->SUPER::find(@args);_makeBand($cnvs)if($recr);return($foun)}else {if($args[0]=~ /^(enclosed|overlapping)$/i){return()if(@args < 5);my$scal=$pdat->{'scale' };my$movx=$pdat->{'movex' };$args[1]=$args[1]* $scal + $movx;$args[3]=$args[3]* $scal + $movx;my$movy=$pdat->{'movey' };if($pdat->{'inverty'}){$args[2]=-$args[2]* $scal + $movy;$args[4]=-$args[4]* $scal + $movy}else {$args[2]=$args[2]* $scal + $movy;$args[4]=$args[4]* $scal + $movy}}my$recr=_killBand($cnvs);my@foun=$cnvs->SUPER::find(@args);_makeBand($cnvs)if($recr);return(@foun)}}sub coords {my($cnvs,$tagg,@wcrd)=@_;return()unless($cnvs->type($tagg));my$pdat=$cnvs->privateData();my$scal=$pdat->{'scale'};my$movx=$pdat->{'movex'};my$movy=$pdat->{'movey'};if(@wcrd){die "!*EROR*! Missing y-coordinate in call to coords()!\n" if(@wcrd % 2);my($cbx1,$cby1,$cbx2,$cby2)=_find_box($cnvs->SUPER::coords($tagg));my@ccrd=@wcrd;for(my$indx=0;$indx < @ccrd;$indx += 2){$ccrd[$indx ]=$ccrd[$indx ]* $scal + $movx;if($pdat->{'inverty'}){$ccrd[$indx + 1]=-$ccrd[$indx + 1]* $scal + $movy}else {$ccrd[$indx + 1]=$ccrd[$indx + 1]* $scal + $movy}}$cnvs->SUPER::coords($tagg,@ccrd);my($abx1,$aby1,$abx2,$aby2)=_find_box(@ccrd);_adjustBbox($cnvs,$cbx1,$cby1,$cbx2,$cby2,$abx1,$aby1,$abx2,$aby2)}else {@wcrd=$cnvs->SUPER::coords($tagg);die "!*EROR*! Missing y-coordinate in return value from SUPER::coords()!\n" if(@wcrd % 2);for(my$indx=0;$indx < @wcrd;$indx += 2){$wcrd[$indx ]=($wcrd[$indx ]- $movx)/ $scal;if($pdat->{'inverty'}){$wcrd[$indx + 1]=0 - ($wcrd[$indx + 1]- $movy)/ $scal}else {$wcrd[$indx + 1]=($wcrd[$indx + 1]- $movy)/ $scal}}if(@wcrd==4 && ($wcrd[0]> $wcrd[2]|| $wcrd[1]> $wcrd[3])){my$type=$cnvs->type($tagg);if($type =~ /^(arc|oval|rectangle)$/){($wcrd[0],$wcrd[2])=($wcrd[2],$wcrd[0])if($wcrd[0]> $wcrd[2]);($wcrd[1],$wcrd[3])=($wcrd[3],$wcrd[1])if($wcrd[1]> $wcrd[3])}}return(@wcrd)}return()}sub scale {my($cnvs,$tagg,$xoff,$yoff,$xscl,$yscl)=@_;return()unless($cnvs->type($tagg));my$pdat=$cnvs->privateData();my$cnxo=$xoff * $pdat->{'scale'}+ $pdat->{'movex'};my$cnyo=$yoff * $pdat->{'scale'}+ $pdat->{'movey'};if($pdat->{'inverty'}){$cnyo=-$yoff * $pdat->{'scale'}+ $pdat->{'movey'}}if(lc($tagg)eq 'all'){$cnvs->SUPER::scale($tagg,$cnxo,$cnyo,$xscl,$yscl);my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};$pbx1=($pbx1 - $cnxo)* $xscl + $cnxo;$pbx2=($pbx2 - $cnxo)* $xscl + $cnxo;$pby1=($pby1 - $cnyo)* $yscl + $cnyo;$pby2=($pby2 - $cnyo)* $yscl + $cnyo;$pdat->{'bbox'}=[$pbx1,$pby1,$pbx2,$pby2];$cnvs->configure('-scrollregion'=>[$pbx1,$pby1,$pbx2,$pby2])}else {my($cbx1,$cby1,$cbx2,$cby2)=_find_box($cnvs->SUPER::coords($tagg));$cnvs->SUPER::scale($tagg,$cnxo,$cnyo,$xscl,$yscl);my$nwx1=($cbx1 - $cnxo)* $xscl + $cnxo;my$nwx2=($cbx2 - $cnxo)* $xscl + $cnxo;my$nwy1=($cby1 - $cnyo)* $yscl + $cnyo;my$nwy2=($cby2 - $cnyo)* $yscl + $cnyo;_adjustBbox($cnvs,$cbx1,$cby1,$cbx2,$cby2,$nwx1,$nwy1,$nwx2,$nwy2)}}sub move {my($cnvs,$tagg,$xval,$yval)=@_;my($cbx1,$cby1,$cbx2,$cby2)=_find_box($cnvs->SUPER::coords($tagg));my$scal=$cnvs->privateData->{'scale'};my$dltx=$xval * $scal;my$dlty=$yval * $scal;$cnvs->SUPER::move($tagg,$dltx,$dlty);my($nwx1,$nwy1,$nwx2,$nwy2)=($cbx1 + $dltx,$cby1 + $dlty,$cbx2 + $dltx,$cby2 + $dlty);_adjustBbox($cnvs,$cbx1,$cby1,$cbx2,$cby2,$nwx1,$nwy1,$nwx2,$nwy2)}sub _adjustBbox {my($cnvs,$cbx1,$cby1,$cbx2,$cby2,$nwx1,$nwy1,$nwx2,$nwy2)=@_;my$pdat=$cnvs->privateData();my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};my$chbx=0;if($nwx1 < $pbx1){$pbx1=$nwx1;$chbx=1}if($nwx2 > $pbx2){$pbx2=$nwx2;$chbx=1}if($nwy1 < $pby1){$pby1=$nwy1;$chbx=1}if($nwy2 > $pby2){$pby2=$nwy2;$chbx=1}if($chbx){$pdat->{'bbox'}=[$pbx1,$pby1,$pbx2,$pby2];$cnvs->configure('-scrollregion'=>[$pbx1,$pby1,$pbx2,$pby2])}my$wmrg=0.01 * ($pbx2 - $pbx1);$wmrg=3 if($wmrg < 3);my$hmrg=0.01 * ($pby2 - $pby1);$hmrg=3 if($hmrg < 3);if(($cbx1 - $wmrg < $pbx1 && $cbx1 < $nwx1)|| ($cby1 - $hmrg < $pby1 && $cby1 < $nwy1)|| ($cbx2 + $wmrg > $pbx2 && $cbx2 > $nwx2)|| ($cby2 + $hmrg > $pby2 && $cby2 > $nwy2)){$pdat->{'bboxvalid'}=0}}sub bbox {my$cnvs=shift();my$xact=0;if($_[0]=~ /-exact/i){shift();$xact=shift()}my@tags=@_;my$foun=0;for(@tags){if($cnvs->type($_)){$foun=1;last()}}return()unless($foun);my$pdat=$cnvs->privateData();if(lc($tags[0])eq 'all'){my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'bbox'}};my$scal=$pdat->{'scale'};my$movx=$pdat->{'movex'};my$movy=$pdat->{'movey'};my$wnx1=($pbx1 - $movx)/ $scal;my$wnx2=($pbx2 - $movx)/ $scal;my$wny1=($pby1 - $movy)/ $scal;my$wny2=($pby2 - $movy)/ $scal;($wnx1,$wnx2)=($wnx2,$wnx1)if($wnx2 < $wnx1);($wny1,$wny2)=($wny2,$wny1)if($wny2 < $wny1);return($wnx1,$wny1,$wnx2,$wny2)}else {my$onep=1.0 / $pdat->{'scale'};my$zfix=0;if($xact && $onep > 0.001){zoom($cnvs,$onep * 1000);$zfix=1}my($cbx1,$cby1,$cbx2,$cby2)=_superBbox($cnvs,@tags);unless(defined($cbx1)){zoom($cnvs,1 / ($onep * 1000))if($zfix);return()}if(!$xact && abs($cbx2 - $cbx1)< 27 && abs($cby2 - $cby1)< 27){zoom($cnvs,$onep * 1000);my($nwx1,$nwy1,$nwx2,$nwy2)=_superBbox($cnvs,@tags);if(!defined($nwx1)){zoom($cnvs,1 / ($onep * 1000))}else {$zfix=1;($cbx1,$cby1,$cbx2,$cby2)=($nwx1,$nwy1,$nwx2,$nwy2)}}my$scal=$pdat->{'scale' };my$movx=$pdat->{'movex' };$cbx1=($cbx1 - $movx)/ $scal;$cbx2=($cbx2 - $movx)/ $scal;my$movy=$pdat->{'movey' };if($pdat->{'inverty'}){$cby1=($cby1 - $movy)/ -$scal;$cby2=($cby2 - $movy)/ -$scal}else {$cby1=($cby1 - $movy)/ $scal;$cby2=($cby2 - $movy)/ $scal}zoom($cnvs,1 / ($onep * 1000))if($zfix);if($pdat->{'inverty'}){return($cbx1,$cby2,$cbx2,$cby1)}else {return($cbx1,$cby1,$cbx2,$cby2)}}}sub rubberBand {die "!*EROR*! Wrong number of args passed to rubberBand()!\n" unless(@_==2);my($cnvs,$step)=@_;my$pdat=$cnvs->privateData();return()if($step >= 1 &&!defined($pdat->{'RubberBand'}));my$xevt=$cnvs->XEvent();my$xabs=abstractx($cnvs,$xevt->x());my$yabs=abstracty($cnvs,$xevt->y());if ($step==0){_killBand($cnvs);$pdat->{'RubberBand'}=[$xabs,$yabs,$xabs,$yabs]}elsif($step==1){$pdat->{'RubberBand'}[2]=$xabs;$pdat->{'RubberBand'}[3]=$yabs;_killBand($cnvs);_makeBand($cnvs)}elsif($step==2){_killBand($cnvs)|| return();my($pbx1,$pby1,$pbx2,$pby2)=@{$pdat->{'RubberBand'}};undef($pdat->{'RubberBand'});($pbx1,$pbx2)=($pbx2,$pbx1)if($pbx2 < $pbx1);($pby1,$pby2)=($pby2,$pby1)if($pby2 < $pby1);return($pbx1,$pby1,$pbx2,$pby2)}}sub _superBbox {my($cnvs,@tags)=@_;my$recr=_killBand($cnvs);my($cbx1,$cby1,$cbx2,$cby2)=$cnvs->SUPER::bbox(@tags);_makeBand($cnvs)if($recr);return($cbx1,$cby1,$cbx2,$cby2)}sub _killBand {my($cnvs)=@_;my$rbid=$cnvs->privateData->{'RubberBandID'};return(0)unless(defined($rbid));$cnvs->SUPER::delete($rbid);undef($cnvs->privateData->{'RubberBandID'});return(1)}sub _makeBand {my($cnvs)=@_;my$pdat=$cnvs->privateData();my$rbnd=$pdat->{'RubberBand'};die "!*EROR*! RubberBand is not defined!" unless(defined($rbnd));die "!*EROR*! RubberBand does not have 4 values!" if(@$rbnd!=4);my$scal=$pdat->{'scale'};my$colr=$cnvs->cget('-bandColor');my$movx=$pdat->{'movex'};my$rbx1=$rbnd->[0]* $scal + $movx;my$rbx2=$rbnd->[2]* $scal + $movx;my$movy=$pdat->{'movey'};my$rby1=$rbnd->[1]* $scal + $movy;my$rby2=$rbnd->[3]* $scal + $movy;my$rbid=$cnvs->SUPER::create('rectangle',$rbx1,$rby1,$rbx2,$rby2,'-outline'=>$colr);$pdat->{'RubberBandID'}=$rbid}sub eventLocation {my($cnvs)=@_;my$xevt=$cnvs->XEvent();return($cnvs->abstractx($xevt->x()),$cnvs->abstracty($xevt->y()))if(defined($xevt));return()}sub viewFit {my$cnvs=shift();my$bord=0.02;if(lc($_[0])eq '-border'){shift();$bord=shift()if(@_);$bord=0 if($bord < 0)}my@tags=@_;my$foun=0;for(@tags){if($cnvs->type($_)){$foun=1;last()}}return()unless($foun);viewArea($cnvs,bbox($cnvs,@tags),'-border'=>$bord)}sub pixelSize {my($cnvs)=@_;return(1.0 / $cnvs->privateData->{'scale'})}sub abstractx {my($cnvs,$xval)=@_;my$pdat=$cnvs->privateData();my$scal=$pdat->{'scale'};return()unless($scal);return(($cnvs->canvasx(0)+ $xval - $pdat->{'movex'})/ $scal)}sub abstracty {my($cnvs,$yval)=@_;my$pdat=$cnvs->privateData();my$scal=$pdat->{'scale'};return()unless($scal);if($pdat->{'inverty'}){return(0 - ($cnvs->canvasy(0)+ $yval - $pdat->{'movey'})/ $scal)}else {return(($cnvs->canvasy(0)+ $yval - $pdat->{'movey'})/ $scal)}}sub abstractxy {my($cnvs,$xval,$yval)=@_;my$pdat=$cnvs->privateData();my$scal=$pdat->{'scale'};return()unless($scal);if($pdat->{'inverty'}){return(($cnvs->canvasx(0)+ $xval - $pdat->{'movex'})/ $scal,0 - ($cnvs->canvasy(0)+ $yval - $pdat->{'movey'})/ $scal)}else {return(($cnvs->canvasx(0)+ $xval - $pdat->{'movex'})/ $scal,($cnvs->canvasy(0)+ $yval - $pdat->{'movey'})/ $scal)}}sub widgetx {my($cnvs,$xval)=@_;my$pdat=$cnvs->privateData();return($xval * $pdat->{'scale'}+ $pdat->{'movex'}- $cnvs->canvasx(0))}sub widgety {my($cnvs,$yval)=@_;my$pdat=$cnvs->privateData();if($pdat->{'inverty'}){return(-$yval * $pdat->{'scale'}+ $pdat->{'movey'}- $cnvs->canvasy(0))}else {return($yval * $pdat->{'scale'}+ $pdat->{'movey'}- $cnvs->canvasy(0))}}sub widgetxy {my($cnvs,$xval,$yval)=@_;my$pdat=$cnvs->privateData();my$scal=$pdat->{'scale'};if($pdat->{'inverty'}){return ($xval * $scal + $pdat->{'movex'}- $cnvs->canvasx(0),-$yval * $scal + $pdat->{'movey'}- $cnvs->canvasy(0))}else {return ($xval * $scal + $pdat->{'movex'}- $cnvs->canvasx(0),$yval * $scal + $pdat->{'movey'}- $cnvs->canvasy(0))}}my$cmap=0;sub create {my($cnvs,$type)=splice(@_,0,2);my@narg=($cmap)? @_ : _map_coords($cnvs,@_);if ($type eq 'rectangle'){$cnvs->_rect_to_poly(@narg)}elsif($type eq 'oval'){$cnvs->_oval_to_poly(@narg)}else {$cnvs->SUPER::create($type,@narg)}}sub createPolygon {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$plid=$cnvs->SUPER::createPolygon(@narg);$cmap=0;return($plid)}sub createLine {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$lnid=$cnvs->SUPER::createLine(@narg);$cmap=0;return($lnid)}sub createText {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$txid=$cnvs->SUPER::createText(@narg);$cmap=0;return($txid)}sub createWindow {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$wnid=$cnvs->SUPER::createWindow(@narg);$cmap=0;return($wnid)}sub createBitmap {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$bmid=$cnvs->SUPER::createBitmap(@narg);$cmap=0;return($bmid)}sub createImage {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$imid=$cnvs->SUPER::createImage(@narg);$cmap=0;return($imid)}sub createArc {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$arid=$cnvs->SUPER::createArc(@narg);$cmap=0;return($arid)}sub createOval {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$ovid;if($cnvs->privateData->{'oval_to_poly'}){$ovid=$cnvs->_oval_to_poly(@narg)}else {$ovid=$cnvs->SUPER::createOval(@narg)}$cmap=0;return($ovid)}sub createRectangle {my$cnvs=shift;my@narg=_map_coords($cnvs,@_);$cmap=1;my$rcid;if($cnvs->privateData->{'rect_to_poly'}){$rcid=$cnvs->_rect_to_poly(@narg)}else {$rcid=$cnvs->SUPER::createRectangle(@narg)}$cmap=0;return($rcid)}sub _rect_to_poly {my$self=shift();my($left,$topp,$rite,$botm)=splice(@_,0,4);($left,$rite)=($rite,$left)if($rite < $left);($topp,$botm)=($botm,$topp)if($botm < $topp);$self->createPolygon($left,$topp,$rite,$topp,$rite,$botm,$left,$botm,@_)}sub _oval_to_poly {my$self=shift();my($left,$topp,$rite,$botm)=splice(@_,0,4);my$stps=127;if(lc($_[0])eq '-steps'){shift();$stps=shift()}my$xcnt=($rite - $left)/ 2;my$ycnt=($botm - $topp)/ 2;my@ptls;for my$indx (0..$stps){my$thta=(PI * 2)* ($indx / $stps);my$xnew=$xcnt * cos($thta)- $xcnt + $rite;my$ynew=$ycnt * sin($thta)+ $ycnt + $topp;push(@ptls,$xnew,$ynew)}push(@_,'-fill',undef)unless(grep {/-fill/}@_);push(@_,'-outline','black')unless(grep {/-outline/}@_);$self->createPolygon(@ptls,@_)}sub _get_CM {my($xcnt,$ycnt,$area);my$indx=0;while($indx < $#_){my$xzer=$_[$indx ];my$yzer=$_[$indx + 1];my($xone,$yone);if($indx + 2 > $#_){$xone=$_[0];$yone=$_[1]}else {$xone=$_[$indx + 2];$yone=$_[$indx + 3]}$indx += 2;my$aone=($xzer + $xone)/ 2;my$atwo=($xzer**2 + $xzer*$xone + $xone**2)/ 6;my$ydlt=$yone - $yzer;my$athr=($xzer*$yone + $yzer*$xone + 2 * ($xone*$yone + $xzer*$yzer))/ 6;$area += $aone * $ydlt;$xcnt += $atwo * $ydlt;$ycnt += $athr * $ydlt}return(split(' ',sprintf("%.0f %0.f"=>$xcnt/$area,$ycnt/$area)))}8;
TK_ABSTRACTCANVAS

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
     if (my $fat = $_[0]{$_[1]}) {
       return sub {
         return 0 unless length $fat;
         $fat =~ s/^([^\n]*\n?)//;
         $_ = $1;
         return 1;
       };
     }
     return;
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

